// Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using IxMilia.Dxf.Entities;

namespace IxMilia.Dxf
{
    public partial class DxfHeader
    {
        private const string ACADVER = "$ACADVER";
        private const string ACADMAINTVER = "$ACADMAINTVER";
        private const string DWGCODEPAGE = "$DWGCODEPAGE";
        private const string LASTSAVEDBY = "$LASTSAVEDBY";
        private const string REQUIREDVERSIONS = "$REQUIREDVERSIONS";
        private const string INSBASE = "$INSBASE";
        private const string EXTMIN = "$EXTMIN";
        private const string EXTMAX = "$EXTMAX";
        private const string LIMMIN = "$LIMMIN";
        private const string LIMMAX = "$LIMMAX";
        private const string ORTHOMODE = "$ORTHOMODE";
        private const string REGENMODE = "$REGENMODE";
        private const string FILLMODE = "$FILLMODE";
        private const string QTEXTMODE = "$QTEXTMODE";
        private const string MIRRTEXT = "$MIRRTEXT";
        private const string DRAGMODE = "$DRAGMODE";
        private const string LTSCALE = "$LTSCALE";
        private const string OSMODE = "$OSMODE";
        private const string ATTMODE = "$ATTMODE";
        private const string TEXTSIZE = "$TEXTSIZE";
        private const string TRACEWID = "$TRACEWID";
        private const string TEXTSTYLE = "$TEXTSTYLE";
        private const string CLAYER = "$CLAYER";
        private const string CELTYPE = "$CELTYPE";
        private const string CECOLOR = "$CECOLOR";
        private const string CELTSCALE = "$CELTSCALE";
        private const string DELOBJ = "$DELOBJ";
        private const string DISPSILH = "$DISPSILH";
        private const string DRAGVS = "$DRAGVS";
        private const string DIMSCALE = "$DIMSCALE";
        private const string DIMASZ = "$DIMASZ";
        private const string DIMEXO = "$DIMEXO";
        private const string DIMDLI = "$DIMDLI";
        private const string DIMRND = "$DIMRND";
        private const string DIMDLE = "$DIMDLE";
        private const string DIMEXE = "$DIMEXE";
        private const string DIMTP = "$DIMTP";
        private const string DIMTM = "$DIMTM";
        private const string DIMTXT = "$DIMTXT";
        private const string DIMCEN = "$DIMCEN";
        private const string DIMTSZ = "$DIMTSZ";
        private const string DIMTOL = "$DIMTOL";
        private const string DIMLIM = "$DIMLIM";
        private const string DIMTIH = "$DIMTIH";
        private const string DIMTOH = "$DIMTOH";
        private const string DIMSE1 = "$DIMSE1";
        private const string DIMSE2 = "$DIMSE2";
        private const string DIMTAD = "$DIMTAD";
        private const string DIMZIN = "$DIMZIN";
        private const string DIMBLK = "$DIMBLK";
        private const string DIMASO = "$DIMASO";
        private const string DIMSHO = "$DIMSHO";
        private const string DIMPOST = "$DIMPOST";
        private const string DIMAPOST = "$DIMAPOST";
        private const string DIMALT = "$DIMALT";
        private const string DIMALTD = "$DIMALTD";
        private const string DIMALTF = "$DIMALTF";
        private const string DIMLFAC = "$DIMLFAC";
        private const string DIMTOFL = "$DIMTOFL";
        private const string DIMTVP = "$DIMTVP";
        private const string DIMTIX = "$DIMTIX";
        private const string DIMSOXD = "$DIMSOXD";
        private const string DIMSAH = "$DIMSAH";
        private const string DIMBLK1 = "$DIMBLK1";
        private const string DIMBLK2 = "$DIMBLK2";
        private const string DIMSTYLE = "$DIMSTYLE";
        private const string DIMCLRD = "$DIMCLRD";
        private const string DIMCLRE = "$DIMCLRE";
        private const string DIMCLRT = "$DIMCLRT";
        private const string DIMTFAC = "$DIMTFAC";
        private const string DIMGAP = "$DIMGAP";
        private const string DIMJUST = "$DIMJUST";
        private const string DIMSD1 = "$DIMSD1";
        private const string DIMSD2 = "$DIMSD2";
        private const string DIMTOLJ = "$DIMTOLJ";
        private const string DIMTZIN = "$DIMTZIN";
        private const string DIMALTZ = "$DIMALTZ";
        private const string DIMALTTZ = "$DIMALTTZ";
        private const string DIMFIT = "$DIMFIT";
        private const string DIMUPT = "$DIMUPT";
        private const string DIMUNIT = "$DIMUNIT";
        private const string DIMDEC = "$DIMDEC";
        private const string DIMTDEC = "$DIMTDEC";
        private const string DIMALTU = "$DIMALTU";
        private const string DIMALTTD = "$DIMALTTD";
        private const string DIMTXSTY = "$DIMTXSTY";
        private const string DIMAUNIT = "$DIMAUNIT";
        private const string DIMADEC = "$DIMADEC";
        private const string DIMALTRND = "$DIMALTRND";
        private const string DIMAZIN = "$DIMAZIN";
        private const string DIMDSEP = "$DIMDSEP";
        private const string DIMATFIT = "$DIMATFIT";
        private const string DIMFRAC = "$DIMFRAC";
        private const string DIMLDRBLK = "$DIMLDRBLK";
        private const string DIMLUNIT = "$DIMLUNIT";
        private const string DIMLWD = "$DIMLWD";
        private const string DIMLWE = "$DIMLWE";
        private const string DIMTMOVE = "$DIMTMOVE";
        private const string DIMFXL = "$DIMFXL";
        private const string DIMFXLON = "$DIMFXLON";
        private const string DIMJOGANG = "$DIMJOGANG";
        private const string DIMTFILL = "$DIMTFILL";
        private const string DIMTFILLCLR = "$DIMTFILLCLR";
        private const string DIMARCSYM = "$DIMARCSYM";
        private const string DIMLTYPE = "$DIMLTYPE";
        private const string DIMLTEX1 = "$DIMLTEX1";
        private const string DIMLTEX2 = "$DIMLTEX2";
        private const string DIMTXTDIRECTION = "$DIMTXTDIRECTION";
        private const string LUNITS = "$LUNITS";
        private const string LUPREC = "$LUPREC";
        private const string SKETCHINC = "$SKETCHINC";
        private const string FILLETRAD = "$FILLETRAD";
        private const string AUNITS = "$AUNITS";
        private const string AUPREC = "$AUPREC";
        private const string MENU = "$MENU";
        private const string ELEVATION = "$ELEVATION";
        private const string PELEVATION = "$PELEVATION";
        private const string THICKNESS = "$THICKNESS";
        private const string LIMCHECK = "$LIMCHECK";
        private const string BLIPMODE = "$BLIPMODE";
        private const string CHAMFERA = "$CHAMFERA";
        private const string CHAMFERB = "$CHAMFERB";
        private const string CHAMFERC = "$CHAMFERC";
        private const string CHAMFERD = "$CHAMFERD";
        private const string SKPOLY = "$SKPOLY";
        private const string TDCREATE = "$TDCREATE";
        private const string TDUCREATE = "$TDUCREATE";
        private const string TDUPDATE = "$TDUPDATE";
        private const string TDUUPDATE = "$TDUUPDATE";
        private const string TDINDWG = "$TDINDWG";
        private const string TDUSRTIMER = "$TDUSRTIMER";
        private const string USRTIMER = "$USRTIMER";
        private const string ANGBASE = "$ANGBASE";
        private const string ANGDIR = "$ANGDIR";
        private const string PDMODE = "$PDMODE";
        private const string PDSIZE = "$PDSIZE";
        private const string PLINEWID = "$PLINEWID";
        private const string COORDS = "$COORDS";
        private const string SPLFRAME = "$SPLFRAME";
        private const string SPLINETYPE = "$SPLINETYPE";
        private const string SPLINESEGS = "$SPLINESEGS";
        private const string ATTDIA = "$ATTDIA";
        private const string ATTREQ = "$ATTREQ";
        private const string HANDLING = "$HANDLING";
        private const string HANDSEED = "$HANDSEED";
        private const string SURFTAB1 = "$SURFTAB1";
        private const string SURFTAB2 = "$SURFTAB2";
        private const string SURFTYPE = "$SURFTYPE";
        private const string SURFU = "$SURFU";
        private const string SURFV = "$SURFV";
        private const string UCSBASE = "$UCSBASE";
        private const string UCSNAME = "$UCSNAME";
        private const string UCSORG = "$UCSORG";
        private const string UCSXDIR = "$UCSXDIR";
        private const string UCSYDIR = "$UCSYDIR";
        private const string UCSORTHOREF = "$UCSORTHOREF";
        private const string UCSORTHOVIEW = "$UCSORTHOVIEW";
        private const string UCSORGTOP = "$UCSORGTOP";
        private const string UCSORGBOTTOM = "$UCSORGBOTTOM";
        private const string UCSORGLEFT = "$UCSORGLEFT";
        private const string UCSORGRIGHT = "$UCSORGRIGHT";
        private const string UCSORGFRONT = "$UCSORGFRONT";
        private const string UCSORGBACK = "$UCSORGBACK";
        private const string PUCSBASE = "$PUCSBASE";
        private const string PUCSNAME = "$PUCSNAME";
        private const string PUCSORG = "$PUCSORG";
        private const string PUCSXDIR = "$PUCSXDIR";
        private const string PUCSYDIR = "$PUCSYDIR";
        private const string PUCSORTHOREF = "$PUCSORTHOREF";
        private const string PUCSORTHOVIEW = "$PUCSORTHOVIEW";
        private const string PUCSORGTOP = "$PUCSORGTOP";
        private const string PUCSORGBOTTOM = "$PUCSORGBOTTOM";
        private const string PUCSORGLEFT = "$PUCSORGLEFT";
        private const string PUCSORGRIGHT = "$PUCSORGRIGHT";
        private const string PUCSORGFRONT = "$PUCSORGFRONT";
        private const string PUCSORGBACK = "$PUCSORGBACK";
        private const string USERI1 = "$USERI1";
        private const string USERI2 = "$USERI2";
        private const string USERI3 = "$USERI3";
        private const string USERI4 = "$USERI4";
        private const string USERI5 = "$USERI5";
        private const string USERR1 = "$USERR1";
        private const string USERR2 = "$USERR2";
        private const string USERR3 = "$USERR3";
        private const string USERR4 = "$USERR4";
        private const string USERR5 = "$USERR5";
        private const string WORLDVIEW = "$WORLDVIEW";
        private const string SHADEDGE = "$SHADEDGE";
        private const string SHADEDIF = "$SHADEDIF";
        private const string TILEMODE = "$TILEMODE";
        private const string MAXACTVP = "$MAXACTVP";
        private const string PINSBASE = "$PINSBASE";
        private const string PLIMCHECK = "$PLIMCHECK";
        private const string PEXTMIN = "$PEXTMIN";
        private const string PEXTMAX = "$PEXTMAX";
        private const string PLIMMIN = "$PLIMMIN";
        private const string PLIMMAX = "$PLIMMAX";
        private const string UNITMODE = "$UNITMODE";
        private const string VISRETAIN = "$VISRETAIN";
        private const string PLINEGEN = "$PLINEGEN";
        private const string PSLTSCALE = "$PSLTSCALE";
        private const string TREEDEPTH = "$TREEDEPTH";
        private const string PICKSTYLE = "$PICKSTYLE";
        private const string CMLSTYLE = "$CMLSTYLE";
        private const string CMLJUST = "$CMLJUST";
        private const string CMLSCALE = "$CMLSCALE";
        private const string PROXYGRAPHICS = "$PROXYGRAPHICS";
        private const string MEASUREMENT = "$MEASUREMENT";
        private const string CELWEIGHT = "$CELWEIGHT";
        private const string ENDCAPS = "$ENDCAPS";
        private const string JOINSTYLE = "$JOINSTYLE";
        private const string LWDISPLAY = "$LWDISPLAY";
        private const string INSUNITS = "$INSUNITS";
        private const string HYPERLINKBASE = "$HYPERLINKBASE";
        private const string STYLESHEET = "$STYLESHEET";
        private const string XEDIT = "$XEDIT";
        private const string CEPSNID = "$CEPSNID";
        private const string CEPSNTYPE = "$CEPSNTYPE";
        private const string PSTYLEMODE = "$PSTYLEMODE";
        private const string FINGERPRINTGUID = "$FINGERPRINTGUID";
        private const string VERSIONGUID = "$VERSIONGUID";
        private const string EXTNAMES = "$EXTNAMES";
        private const string PSVPSCALE = "$PSVPSCALE";
        private const string OLESTARTUP = "$OLESTARTUP";
        private const string SORTENTS = "$SORTENTS";
        private const string INDEXCTL = "$INDEXCTL";
        private const string HIDETEXT = "$HIDETEXT";
        private const string XCLIPFRAME = "$XCLIPFRAME";
        private const string HALOGAP = "$HALOGAP";
        private const string OBSCOLOR = "$OBSCOLOR";
        private const string OBSLTYPE = "$OBSLTYPE";
        private const string INTERSECTIONDISPLAY = "$INTERSECTIONDISPLAY";
        private const string INTERSECTIONCOLOR = "$INTERSECTIONCOLOR";
        private const string DIMASSOC = "$DIMASSOC";
        private const string PROJECTNAME = "$PROJECTNAME";
        private const string CAMERADISPLAY = "$CAMERADISPLAY";
        private const string LENSLENGTH = "$LENSLENGTH";
        private const string CAMERAHEIGHT = "$CAMERAHEIGHT";
        private const string STEPSPERSEC = "$STEPSPERSEC";
        private const string STEPSIZE = "$STEPSIZE";
        private const string _3DDWFPREC = "$3DDWFPREC";
        private const string PSOLWIDTH = "$PSOLWIDTH";
        private const string PSOLHEIGHT = "$PSOLHEIGHT";
        private const string LOFTANG1 = "$LOFTANG1";
        private const string LOFTANG2 = "$LOFTANG2";
        private const string LOFTMAG1 = "$LOFTMAG1";
        private const string LOFTMAG2 = "$LOFTMAG2";
        private const string LOFTPARAM = "$LOFTPARAM";
        private const string LOFTNORMALS = "$LOFTNORMALS";
        private const string LATITUDE = "$LATITUDE";
        private const string LONGITUDE = "$LONGITUDE";
        private const string NORTHDIRECTION = "$NORTHDIRECTION";
        private const string TIMEZONE = "$TIMEZONE";
        private const string LIGHTGLYPHDISPLAY = "$LIGHTGLYPHDISPLAY";
        private const string TILEMODELIGHTSYNCH = "$TILEMODELIGHTSYNCH";
        private const string CMATERIAL = "$CMATERIAL";
        private const string SOLIDHIST = "$SOLIDHIST";
        private const string SHOWHIST = "$SHOWHIST";
        private const string DWFFRAME = "$DWFFRAME";
        private const string DGNFRAME = "$DGNFRAME";
        private const string REALWORLDSCALE = "$REALWORLDSCALE";
        private const string INTERFERECOLOR = "$INTERFERECOLOR";
        private const string INTERFEREOBJVS = "$INTERFEREOBJVS";
        private const string INTERFEREVPVS = "$INTERFEREVPVS";
        private const string CSHADOW = "$CSHADOW";
        private const string SHADOWPLANELOCATION = "$SHADOWPLANELOCATION";
        private const string AXISMODE = "$AXISMODE";
        private const string AXISUNIT = "$AXISUNIT";
        private const string FASTZOOM = "$FASTZOOM";
        private const string GRIDMODE = "$GRIDMODE";
        private const string GRIDUNIT = "$GRIDUNIT";
        private const string SNAPANG = "$SNAPANG";
        private const string SNAPBASE = "$SNAPBASE";
        private const string SNAPISOPAIR = "$SNAPISOPAIR";
        private const string SNAPMODE = "$SNAPMODE";
        private const string SNAPSTYLE = "$SNAPSTYLE";
        private const string SNAPUNIT = "$SNAPUNIT";
        private const string VIEWCTR = "$VIEWCTR";
        private const string VIEWDIR = "$VIEWDIR";
        private const string VIEWSIZE = "$VIEWSIZE";

        /// <summary>
        /// The $ACADVER header variable.  The AutoCAD drawing database version number.
        /// </summary>
        public DxfAcadVersion Version { get; set; }

        /// <summary>
        /// The $ACADMAINTVER header variable.  Maintenance version number (should be ignored).  Minimum AutoCAD version: R14.
        /// </summary>
        public short MaintenenceVersion { get; set; }

        /// <summary>
        /// The $DWGCODEPAGE header variable.  Drawing code page; set to the system code page when a new drawing is created, but not otherwise maintained by AutoCAD.  Minimum AutoCAD version: R13.
        /// </summary>
        public string DrawingCodePage { get; set; }

        /// <summary>
        /// The $LASTSAVEDBY header variable.  Name of the last user to modify the file.  Minimum AutoCAD version: R2004.
        /// </summary>
        public string LastSavedBy { get; set; }

        /// <summary>
        /// The $REQUIREDVERSIONS header variable.  Unknown.  Minimum AutoCAD version: R2013.
        /// </summary>
        public long RequiredVersions { get; set; }

        /// <summary>
        /// The $INSBASE header variable.  Insertion base set by BASE command (in WCS).
        /// </summary>
        public DxfPoint InsertionBase { get; set; }

        /// <summary>
        /// The $EXTMIN header variable.  X, Y, and Z drawing extents lower-left corner (in WCS).
        /// </summary>
        public DxfPoint MinimumDrawingExtents { get; set; }

        /// <summary>
        /// The $EXTMAX header variable.  X, Y, and Z drawing extents upper-right corner (in WCS).
        /// </summary>
        public DxfPoint MaximumDrawingExtents { get; set; }

        /// <summary>
        /// The $LIMMIN header variable.  XY drawing limits lower-left corner (in WCS).
        /// </summary>
        public DxfPoint MinimumDrawingLimits { get; set; }

        /// <summary>
        /// The $LIMMAX header variable.  XY drawing limits upper-right corner (in WCS).
        /// </summary>
        public DxfPoint MaximumDrawingLimits { get; set; }

        /// <summary>
        /// The $ORTHOMODE header variable.  Ortho mode on.
        /// </summary>
        public bool DrawOrthoganalLines { get; set; }

        /// <summary>
        /// The $REGENMODE header variable.  REGENAUTO mode on.
        /// </summary>
        public bool UseRegenMode { get; set; }

        /// <summary>
        /// The $FILLMODE header variable.  Fill mode on.
        /// </summary>
        public bool FillModeOn { get; set; }

        /// <summary>
        /// The $QTEXTMODE header variable.  Quick text mode on.
        /// </summary>
        public bool UseQuickTextMode { get; set; }

        /// <summary>
        /// The $MIRRTEXT header variable.  Mirror text.
        /// </summary>
        public bool MirrorText { get; set; }

        /// <summary>
        /// The $DRAGMODE header variable.  Controls the way dragged objects are displayed.  Maximum AutoCAD version: R14.
        /// </summary>
        public DxfDragMode DragMode { get; set; }

        /// <summary>
        /// The $LTSCALE header variable.  Global line type scale.
        /// </summary>
        public double LineTypeScale { get; set; }

        /// <summary>
        /// The $OSMODE header variable.  Running object snap modes.  Maximum AutoCAD version: R14.
        /// </summary>
        public int ObjectSnapFlags { get; set; }

        /// <summary>
        /// The $ATTMODE header variable.  Attribute visibility.
        /// </summary>
        public DxfAttributeVisibility AttributeVisibility { get; set; }

        /// <summary>
        /// The $TEXTSIZE header variable.  Default text height.
        /// </summary>
        public double DefaultTextHeight { get; set; }

        /// <summary>
        /// The $TRACEWID header variable.  Default trace width.
        /// </summary>
        public double TraceWidth { get; set; }

        /// <summary>
        /// The $TEXTSTYLE header variable.  Current text style name.
        /// </summary>
        public string TextStyle { get; set; }

        /// <summary>
        /// The $CLAYER header variable.  Current layer name.
        /// </summary>
        public string CurrentLayer { get; set; }

        /// <summary>
        /// The $CELTYPE header variable.  Entity line type name, or BYBLOCK or BYLAYER.
        /// </summary>
        public string CurrentEntityLineType { get; set; }

        /// <summary>
        /// The $CECOLOR header variable.  Current entity color.
        /// </summary>
        public DxfColor CurrentEntityColor { get; set; }

        /// <summary>
        /// The $CELTSCALE header variable.  Current entity line type scale.  Minimum AutoCAD version: R13.
        /// </summary>
        public double CurrentEntityLineTypeScale { get; set; }

        /// <summary>
        /// The $DELOBJ header variable.  Controls object deletion.  Minimum AutoCAD version: R13.  Maximum AutoCAD version: R14.
        /// </summary>
        public bool RetainDeletedObjects { get; set; }

        /// <summary>
        /// The $DISPSILH header variable.  Controls the display of silhouette curves of body objects in wireframe mode.  Minimum AutoCAD version: R13.
        /// </summary>
        public bool DisplaySilhouetteCurvesInWireframeMode { get; set; }

        /// <summary>
        /// The $DRAGVS header variable.  Hard-pointer ID to visual style when creating 3D solid primitives.  Minimum AutoCAD version: R2007.
        /// </summary>
        public uint SolidVisualStylePointer { get; set; }

        /// <summary>
        /// The $DIMSCALE header variable.  Overall dimensioning scale factor.
        /// </summary>
        public double DimensioningScaleFactor { get; set; }

        /// <summary>
        /// The $DIMASZ header variable.  Dimensioning arrow size.
        /// </summary>
        public double DimensioningArrowSize { get; set; }

        /// <summary>
        /// The $DIMEXO header variable.  Extension line offset.
        /// </summary>
        public double DimensionExtensionLineOffset { get; set; }

        /// <summary>
        /// The $DIMDLI header variable.  Dimension line increment.
        /// </summary>
        public double DimensionLineIncrement { get; set; }

        /// <summary>
        /// The $DIMRND header variable.  Rounding value for dimension distances.
        /// </summary>
        public double DimensionDistanceRoundingValue { get; set; }

        /// <summary>
        /// The $DIMDLE header variable.  Dimension line extension.
        /// </summary>
        public double DimensionLineExtension { get; set; }

        /// <summary>
        /// The $DIMEXE header variable.  Extension line extension.
        /// </summary>
        public double DimensionExtensionLineExtension { get; set; }

        /// <summary>
        /// The $DIMTP header variable.  Plus tolerance.
        /// </summary>
        public double DimensionPlusTolerance { get; set; }

        /// <summary>
        /// The $DIMTM header variable.  Minus tolerance.
        /// </summary>
        public double DimensionMinusTolerance { get; set; }

        /// <summary>
        /// The $DIMTXT header variable.  Dimensioning text height.
        /// </summary>
        public double DimensioningTextHeight { get; set; }

        /// <summary>
        /// The $DIMCEN header variable.  Size of center mark/lines.
        /// </summary>
        public double CenterMarkSize { get; set; }

        /// <summary>
        /// The $DIMTSZ header variable.  Dimensioning tick size.
        /// </summary>
        public double DimensioningTickSize { get; set; }

        /// <summary>
        /// The $DIMTOL header variable.  Dimension tolerances generated.
        /// </summary>
        public bool GenerateDimensionTolerances { get; set; }

        /// <summary>
        /// The $DIMLIM header variable.  Dimension limits generated.
        /// </summary>
        public bool GenerateDimensionLimits { get; set; }

        /// <summary>
        /// The $DIMTIH header variable.  Text inside horizontal.
        /// </summary>
        public bool DimensionTextInsideHorizontal { get; set; }

        /// <summary>
        /// The $DIMTOH header variable.  Text outside horizontal.
        /// </summary>
        public bool DimensionTextOutsideHorizontal { get; set; }

        /// <summary>
        /// The $DIMSE1 header variable.  Suppression of first extension line.  Minimum AutoCAD version: R12.
        /// </summary>
        public bool SuppressFirstDimensionExtensionLine { get; set; }

        /// <summary>
        /// The $DIMSE2 header variable.  Suppression of second extension line.  Minimum AutoCAD version: R12.
        /// </summary>
        public bool SuppressSecondDimensionExtensionLine { get; set; }

        /// <summary>
        /// The $DIMTAD header variable.  Text above dimension line.
        /// </summary>
        public bool TextAboveDimensionLine { get; set; }

        /// <summary>
        /// The $DIMZIN header variable.  Controls suppression of zeros for primary unit values.
        /// </summary>
        public DxfUnitZeroSuppression DimensionUnitZeroSuppression { get; set; }

        /// <summary>
        /// The $DIMBLK header variable.  Arrow block name.
        /// </summary>
        public string ArrowBlockName { get; set; }

        /// <summary>
        /// The $DIMASO header variable.  Controls associative dimensioning.
        /// </summary>
        public bool CreateAssociativeDimensioning { get; set; }

        /// <summary>
        /// The $DIMSHO header variable.  Recompute dimensions while dragging.
        /// </summary>
        public bool RecomputeDimensionsWhileDragging { get; set; }

        /// <summary>
        /// The $DIMPOST header variable.  General dimensioning suffix.
        /// </summary>
        public string DimensioningSuffix { get; set; }

        /// <summary>
        /// The $DIMAPOST header variable.  Alternate dimensioning suffix.
        /// </summary>
        public string AlternateDimensioningSuffix { get; set; }

        /// <summary>
        /// The $DIMALT header variable.  Alternate unit dimensioning performed.
        /// </summary>
        public bool UseAlternateDimensioning { get; set; }

        /// <summary>
        /// The $DIMALTD header variable.  Alternate unit decimal places.
        /// </summary>
        public short AlternateDimensioningDecimalPlaces { get; set; }

        /// <summary>
        /// The $DIMALTF header variable.  Alternate unit scale factor.
        /// </summary>
        public double AlternateDimensioningScaleFactor { get; set; }

        /// <summary>
        /// The $DIMLFAC header variable.  Linear measurements scale factor.
        /// </summary>
        public double DimensionLinearMeasurementsScaleFactor { get; set; }

        /// <summary>
        /// The $DIMTOFL header variable.  If text is outside extensions, force line extensions between extensions.
        /// </summary>
        public bool ForceDimensionLineExtensionsOutsideIfTextIs { get; set; }

        /// <summary>
        /// The $DIMTVP header variable.  Text vertical position.
        /// </summary>
        public double DimensionVerticalTextPosition { get; set; }

        /// <summary>
        /// The $DIMTIX header variable.  Force text inside extensions.
        /// </summary>
        public bool ForceDimensionTextInsideExtensions { get; set; }

        /// <summary>
        /// The $DIMSOXD header variable.  Suppress outside-extensions dimension lines.
        /// </summary>
        public bool SuppressOutsideExtensionDimensionLines { get; set; }

        /// <summary>
        /// The $DIMSAH header variable.  Use separate arrow blocks.
        /// </summary>
        public bool UseSeparateArrowBlocksForDimensions { get; set; }

        /// <summary>
        /// The $DIMBLK1 header variable.  First arrow block name.
        /// </summary>
        public string FirstArrowBlockName { get; set; }

        /// <summary>
        /// The $DIMBLK2 header variable.  Second arrow block name.
        /// </summary>
        public string SecondArrowBlockName { get; set; }

        /// <summary>
        /// The $DIMSTYLE header variable.  Dimension style name.
        /// </summary>
        public string DimensionStyleName { get; set; }

        /// <summary>
        /// The $DIMCLRD header variable.  Dimension line color.  Minimum AutoCAD version: R11.
        /// </summary>
        public DxfColor DimensionLineColor { get; set; }

        /// <summary>
        /// The $DIMCLRE header variable.  Dimension extension line color.  Minimum AutoCAD version: R11.
        /// </summary>
        public DxfColor DimensionExtensionLineColor { get; set; }

        /// <summary>
        /// The $DIMCLRT header variable.  Dimension text color.  Minimum AutoCAD version: R11.
        /// </summary>
        public DxfColor DimensionTextColor { get; set; }

        /// <summary>
        /// The $DIMTFAC header variable.  Dimension tolerance display factor.  Minimum AutoCAD version: R12.
        /// </summary>
        public double DimensionToleranceDisplayScaleFactor { get; set; }

        /// <summary>
        /// The $DIMGAP header variable.  Dimension line gap.  Minimum AutoCAD version: R11.
        /// </summary>
        public double DimensionLineGap { get; set; }

        /// <summary>
        /// The $DIMJUST header variable.  Horizontal dimension text position.  Minimum AutoCAD version: R13.
        /// </summary>
        public DxfDimensionTextJustification DimensionTextJustification { get; set; }

        /// <summary>
        /// The $DIMTOLJ header variable.  Vertical justification for tolerance values.  Minimum AutoCAD version: R13.
        /// </summary>
        public DxfJustification DimensionToleranceVerticalJustification { get; set; }

        /// <summary>
        /// The $DIMTZIN header variable.  Controls suppression of zeros for tolerance values.  Minimum AutoCAD version: R13.
        /// </summary>
        public DxfUnitZeroSuppression DimensionToleranceZeroSuppression { get; set; }

        /// <summary>
        /// The $DIMALTZ header variable.  Controls suppression of zeros for alternate unit dimension values.  Minimum AutoCAD version: R13.
        /// </summary>
        public DxfUnitZeroSuppression AlternateDimensioningZeroSupression { get; set; }

        /// <summary>
        /// The $DIMALTTZ header variable.  Controls suppression of zeros for alternate tolerance values.  Minimum AutoCAD version: R13.
        /// </summary>
        public DxfUnitZeroSuppression AlternateDimensioningToleranceZeroSupression { get; set; }

        /// <summary>
        /// The $DIMFIT header variable.  Placement of text and arrowheads.  Minimum AutoCAD version: R13.  Maximum AutoCAD version: R14.
        /// </summary>
        public DxfDimensionFit DimensionTextAndArrowPlacement { get; set; }

        /// <summary>
        /// The $DIMUPT header variable.  Cursor functionality for user-positioned text.  Minimum AutoCAD version: R13.
        /// </summary>
        public bool DimensionCursorControlsTextPosition { get; set; }

        /// <summary>
        /// The $DIMUNIT header variable.  Units format for all dimension style family members except angular.  Minimum AutoCAD version: R13.  Maximum AutoCAD version: R14.
        /// </summary>
        public DxfUnitFormat DimensionUnitFormat { get; set; }

        /// <summary>
        /// The $DIMDEC header variable.  Number of decimal places for the tolerance values of a primary units dimension.  Minimum AutoCAD version: R13.
        /// </summary>
        public short DimensionUnitToleranceDecimalPlaces { get; set; }

        /// <summary>
        /// The $DIMTDEC header variable.  Number of decimal places to display the tolerance values.  Minimum AutoCAD version: R13.
        /// </summary>
        public short DimensionToleranceDecimalPlaces { get; set; }

        /// <summary>
        /// The $DIMALTU header variable.  Units format for alternate units of all dimension style family members except angular.  Minimum AutoCAD version: R13.
        /// </summary>
        public DxfUnitFormat AlternateDimensioningUnits { get; set; }

        /// <summary>
        /// The $DIMALTTD header variable.  Number of decimal places for tolerance values of an alternate units dimension.  Minimum AutoCAD version: R13.
        /// </summary>
        public short AlternateDimensioningToleranceDecimalPlaces { get; set; }

        /// <summary>
        /// The $DIMTXSTY header variable.  Dimension text style.  Minimum AutoCAD version: R13.
        /// </summary>
        public string DimensionTextStyle { get; set; }

        /// <summary>
        /// The $DIMAUNIT header variable.  Angle format for angular dimensions.  Minimum AutoCAD version: R13.
        /// </summary>
        public DxfAngleFormat DimensioningAngleFormat { get; set; }

        /// <summary>
        /// The $DIMADEC header variable.  Number of precision places displayed in angular dimensions.  Minimum AutoCAD version: R2000.
        /// </summary>
        public short AngularDimensionPrecision { get; set; }

        /// <summary>
        /// The $DIMALTRND header variable.  Determines rounding of alternate units.  Minimum AutoCAD version: R2000.
        /// </summary>
        public double AlternateDimensioningUnitRounding { get; set; }

        /// <summary>
        /// The $DIMAZIN header variable.  Controls suppression of zeros for angular dimensions.  Minimum AutoCAD version: R2000.
        /// </summary>
        public DxfUnitZeroSuppression DimensionAngleZeroSuppression { get; set; }

        /// <summary>
        /// The $DIMDSEP header variable.  Single-character decimal separator used when creating dimensions whose unit format is decimal.  Minimum AutoCAD version: R2000.
        /// </summary>
        public char DimensionDecimalSeparatorChar { get; set; }

        /// <summary>
        /// The $DIMFRAC header variable.  Sets the fraction format when DIMLUNIT is set to Architectural or Fractional.  Minimum AutoCAD version: R2000.
        /// </summary>
        public DxfDimensionFractionFormat DimensionTextHeightScaleFactor { get; set; }

        /// <summary>
        /// The $DIMLDRBLK header variable.  Arrow block name for leaders.  Minimum AutoCAD version: R2000.
        /// </summary>
        public string DimensionLeaderBlockName { get; set; }

        /// <summary>
        /// The $DIMLUNIT header variable.  Sets units for all dimension types except angular.  Minimum AutoCAD version: R2000.
        /// </summary>
        public DxfNonAngularUnits DimensionNonAngularUnits { get; set; }

        /// <summary>
        /// The $DIMLWD header variable.  Dimension line lineweight.  Minimum AutoCAD version: R2000.
        /// </summary>
        public DxfLineWeight DimensionLineWeight { get; set; }

        /// <summary>
        /// The $DIMLWE header variable.  Extension line lineweight.  Minimum AutoCAD version: R2000.
        /// </summary>
        public DxfLineWeight DimensionExtensionLineWeight { get; set; }

        /// <summary>
        /// The $DIMTMOVE header variable.  Dimension text movement rules.  Minimum AutoCAD version: R2000.
        /// </summary>
        public DxfDimensionTextMovementRule DimensionTextMovementRule { get; set; }

        /// <summary>
        /// The $DIMFXL header variable.  Sets the total length of the extension lines starting from the dimension line toward the dimension origin.  Minimum AutoCAD version: R2007.
        /// </summary>
        public double DimensionLineFixedLength { get; set; }

        /// <summary>
        /// The $DIMFXLON header variable.  Controls whether extension lines are set to a fixed length.  Minimum AutoCAD version: R2007.
        /// </summary>
        public bool DimensionLineFixedLengthOn { get; set; }

        /// <summary>
        /// The $DIMJOGANG header variable.  Determines the angle of the transverse segment of the dimension line in a jogged radius dimension.  Minimum AutoCAD version: R2007.
        /// </summary>
        public double DimensionTransverseSegmentAngleInJoggedRadius { get; set; }

        /// <summary>
        /// The $DIMTFILL header variable.  Controls the background of dimension text.  Minimum AutoCAD version: R2007.
        /// </summary>
        public DxfDimensionTextBackgroundColorMode DimensionTextBackgroundColorMode { get; set; }

        /// <summary>
        /// The $DIMTFILLCLR header variable.  Sets the color for the text background in dimensions.  Minimum AutoCAD version: R2007.
        /// </summary>
        public DxfColor DxfDimensionTextBackgroundCustomColor { get; set; }

        /// <summary>
        /// The $DIMARCSYM header variable.  Controls the display of the arc symbol in an arc length dimension.  Minimum AutoCAD version: R2007.
        /// </summary>
        public DxfDimensionArcSymbolDisplayMode DimensionArcSymbolDisplayMode { get; set; }

        /// <summary>
        /// The $DIMLTYPE header variable.  Sets the line type of the dimension line.  Minimum AutoCAD version: R2007.
        /// </summary>
        public string DimensionLineType { get; set; }

        /// <summary>
        /// The $DIMLTEX1 header variable.  Sets the line type of the first extension line.  Minimum AutoCAD version: R2007.
        /// </summary>
        public string DimensionFirstExtensionLineType { get; set; }

        /// <summary>
        /// The $DIMLTEX2 header variable.  Sets the line type of the second extension line.  Minimum AutoCAD version: R2007.
        /// </summary>
        public string DimensionSecondExtensionLineType { get; set; }

        /// <summary>
        /// The $DIMTXTDIRECTION header variable.  Specifies the reading direction of the dimension text.  Minimum AutoCAD version: R2010.
        /// </summary>
        public DxfTextDirection DimensionTextDirection { get; set; }

        /// <summary>
        /// The $LUNITS header variable.  Units format for coordinates and distances.
        /// </summary>
        public DxfUnitFormat UnitFormat { get; set; }

        /// <summary>
        /// The $LUPREC header variable.  Units precision for coordinates and distances.
        /// </summary>
        public short UnitPrecision { get; set; }

        /// <summary>
        /// The $SKETCHINC header variable.  Sketch record increment.
        /// </summary>
        public double SketchRecordIncrement { get; set; }

        /// <summary>
        /// The $FILLETRAD header variable.  Fillet radius.
        /// </summary>
        public double FilletRadius { get; set; }

        /// <summary>
        /// The $AUNITS header variable.  Units format for angles.
        /// </summary>
        public DxfAngleFormat AngleUnitFormat { get; set; }

        /// <summary>
        /// The $AUPREC header variable.  Units precision for angles.
        /// </summary>
        public short AngleUnitPrecision { get; set; }

        /// <summary>
        /// The $MENU header variable.  Name of menu file.
        /// </summary>
        public string FileName { get; set; }

        /// <summary>
        /// The $ELEVATION header variable.  Current elevation set by ELEV command.
        /// </summary>
        public double Elevation { get; set; }

        /// <summary>
        /// The $PELEVATION header variable.  Current paper space elevation.  Minimum AutoCAD version: R11.
        /// </summary>
        public double PaperspaceElevation { get; set; }

        /// <summary>
        /// The $THICKNESS header variable.  Current thickness set by ELEV command.
        /// </summary>
        public double Thickness { get; set; }

        /// <summary>
        /// The $LIMCHECK header variable.  Limits checking.
        /// </summary>
        public bool UseLimitsChecking { get; set; }

        /// <summary>
        /// The $BLIPMODE header variable.  Display blips for click locations.  Maximum AutoCAD version: R14.
        /// </summary>
        public bool BlipMode { get; set; }

        /// <summary>
        /// The $CHAMFERA header variable.  First chamfer distance.
        /// </summary>
        public double FirstChamferDistance { get; set; }

        /// <summary>
        /// The $CHAMFERB header variable.  Second chamfer distance.
        /// </summary>
        public double SecondChamferDistance { get; set; }

        /// <summary>
        /// The $CHAMFERC header variable.  Chamfer length.  Minimum AutoCAD version: R14.
        /// </summary>
        public double ChamferLength { get; set; }

        /// <summary>
        /// The $CHAMFERD header variable.  Chamfer angle.  Minimum AutoCAD version: R14.
        /// </summary>
        public double ChamferAngle { get; set; }

        /// <summary>
        /// The $SKPOLY header variable.  Controls polyline sketch mode.
        /// </summary>
        public DxfPolySketchMode PolylineSketchMode { get; set; }

        /// <summary>
        /// The $TDCREATE header variable.  Local date/time of drawing creation.
        /// </summary>
        public DateTime CreationDate { get; set; }

        /// <summary>
        /// The $TDUCREATE header variable.  Universal date/time the drawing was created.  Minimum AutoCAD version: R2000.
        /// </summary>
        public DateTime CreationDateUniversal { get; set; }

        /// <summary>
        /// The $TDUPDATE header variable.  Local date/time of last drawing update.
        /// </summary>
        public DateTime UpdateDate { get; set; }

        /// <summary>
        /// The $TDUUPDATE header variable.  Universal date/time of the last update/save.  Minimum AutoCAD version: R2000.
        /// </summary>
        public DateTime UpdateDateUniversal { get; set; }

        /// <summary>
        /// The $TDINDWG header variable.  Cumulative editing time for this drawing.
        /// </summary>
        public TimeSpan TimeInDrawing { get; set; }

        /// <summary>
        /// The $TDUSRTIMER header variable.  User-elapsed timer.
        /// </summary>
        public TimeSpan UserElapsedTimer { get; set; }

        /// <summary>
        /// The $USRTIMER header variable.  User timer on.
        /// </summary>
        public bool UserTimerOn { get; set; }

        /// <summary>
        /// The $ANGBASE header variable.  Angle 0 direction.
        /// </summary>
        public double AngleZeroDirection { get; set; }

        /// <summary>
        /// The $ANGDIR header variable.  Angle directions.
        /// </summary>
        public DxfAngleDirection AngleDirection { get; set; }

        /// <summary>
        /// The $PDMODE header variable.  Point display mode.
        /// </summary>
        public int PointDisplayMode { get; set; }

        /// <summary>
        /// The $PDSIZE header variable.  Point display size.
        /// </summary>
        public double PointDisplaySize { get; set; }

        /// <summary>
        /// The $PLINEWID header variable.  Default polyline width.
        /// </summary>
        public double DefaultPolylineWidth { get; set; }

        /// <summary>
        /// The $COORDS header variable.  Controls the display of coordinates.  Maximum AutoCAD version: R14.
        /// </summary>
        public DxfCoordinateDisplay CoordinateDisplay { get; set; }

        /// <summary>
        /// The $SPLFRAME header variable.  Controls the display of helixes and smoothed mesh objects.  Maximum AutoCAD version: R2013.
        /// </summary>
        public bool DisplaySplinePolygonControl { get; set; }

        /// <summary>
        /// The $SPLINETYPE header variable.  Spline curve type for PEDIT Spline.
        /// </summary>
        public DxfPolylineCurvedAndSmoothSurfaceType PEditSplineCurveType { get; set; }

        /// <summary>
        /// The $SPLINESEGS header variable.  Number of line segments per spline hatch.
        /// </summary>
        public short LineSegmentsPerSplinePatch { get; set; }

        /// <summary>
        /// The $ATTDIA header variable.  Controls whether the INSERT command uses a dialog box for attribute value entry.  Maximum AutoCAD version: R14.
        /// </summary>
        public bool ShowAttributeEntryDialogs { get; set; }

        /// <summary>
        /// The $ATTREQ header variable.  Controls whether INSERT uses default attribute settings during insertion of blocks.  Maximum AutoCAD version: R14.
        /// </summary>
        public bool PromptForAttributeOnInsert { get; set; }

        /// <summary>
        /// The $HANDLING header variable.  Handles available.  Maximum AutoCAD version: R12.
        /// </summary>
        public bool HandlesEnabled { get; set; }

        /// <summary>
        /// The $HANDSEED header variable.  Next available handle.
        /// </summary>
        public uint NextAvailableHandle { get; set; }

        /// <summary>
        /// The $SURFTAB1 header variable.  Number of mesh tabulations in first direction.
        /// </summary>
        public short MeshTabulationsInFirstDirection { get; set; }

        /// <summary>
        /// The $SURFTAB2 header variable.  Number of mesh tabulations in second direction.
        /// </summary>
        public short MeshTabulationsInSecondDirection { get; set; }

        /// <summary>
        /// The $SURFTYPE header variable.  Surface type for PEDIT Smooth.
        /// </summary>
        public DxfPolylineCurvedAndSmoothSurfaceType PEditSmoothSurfaceType { get; set; }

        /// <summary>
        /// The $SURFU header variable.  Surface density (for PEDIT Smooth) in M direction.
        /// </summary>
        public short PEditSmoothMDensith { get; set; }

        /// <summary>
        /// The $SURFV header variable.  Surface density (for PEDIT Smooth) in N direction.
        /// </summary>
        public short PEditSmoothNDensith { get; set; }

        /// <summary>
        /// The $UCSBASE header variable.  Name of the UCS that defines the origin and orientation of orthographic UCS settings.  Minimum AutoCAD version: R2000.
        /// </summary>
        public string UCSDefinitionName { get; set; }

        /// <summary>
        /// The $UCSNAME header variable.  Name of current UCS.
        /// </summary>
        public string UCSName { get; set; }

        /// <summary>
        /// The $UCSORG header variable.  Origin of current UCS (in WCS).
        /// </summary>
        public DxfPoint UCSOrigin { get; set; }

        /// <summary>
        /// The $UCSXDIR header variable.  Direction of the current UCS X axis (in WCS).
        /// </summary>
        public DxfVector UCSXAxis { get; set; }

        /// <summary>
        /// The $UCSYDIR header variable.  Direction of the current UCS Y axis (in WCS).
        /// </summary>
        public DxfVector UCSYAxis { get; set; }

        /// <summary>
        /// The $UCSORTHOREF header variable.  If model space UCS is orthographic (UCSORTHOVIEW not equal to 0), this is the name of the UCS that the orthographic UCS is relative to. If blank, UCS is relative to WORLD.  Minimum AutoCAD version: R2000.
        /// </summary>
        public string OrthoUCSReference { get; set; }

        /// <summary>
        /// The $UCSORTHOVIEW header variable.  Orthographic view type of model space UCS.  Minimum AutoCAD version: R2000.
        /// </summary>
        public DxfOrthographicViewType OrthgraphicViewType { get; set; }

        /// <summary>
        /// The $UCSORGTOP header variable.  Point which becomes the new UCS origin after changing model space UCS to TOP when UCSBASE is set to WORLD.  Minimum AutoCAD version: R2000.
        /// </summary>
        public DxfPoint UCSOriginTop { get; set; }

        /// <summary>
        /// The $UCSORGBOTTOM header variable.  Point which becomes the new UCS origin after changing model space UCS to BOTTOM when UCSBASE is set to WORLD.  Minimum AutoCAD version: R2000.
        /// </summary>
        public DxfPoint UCSOriginBottom { get; set; }

        /// <summary>
        /// The $UCSORGLEFT header variable.  Point which becomes the new UCS origin after changing model space UCS to LEFT when UCSBASE is set to WORLD.  Minimum AutoCAD version: R2000.
        /// </summary>
        public DxfPoint UCSOriginLeft { get; set; }

        /// <summary>
        /// The $UCSORGRIGHT header variable.  Point which becomes the new UCS origin after changing model space UCS to RIGHT when UCSBASE is set to WORLD.  Minimum AutoCAD version: R2000.
        /// </summary>
        public DxfPoint UCSOriginRight { get; set; }

        /// <summary>
        /// The $UCSORGFRONT header variable.  Point which becomes the new UCS origin after changing model space UCS to FRONT when UCSBASE is set to WORLD.  Minimum AutoCAD version: R2000.
        /// </summary>
        public DxfPoint UCSOriginFront { get; set; }

        /// <summary>
        /// The $UCSORGBACK header variable.  Point which becomes the new UCS origin after changing model space UCS to BACK when UCSBASE is set to WORLD.  Minimum AutoCAD version: R2000.
        /// </summary>
        public DxfPoint UCSOriginBack { get; set; }

        /// <summary>
        /// The $PUCSBASE header variable.  Name of the UCS that defines the origin and orientation of orthographics UCS settings (paper space only).  Minimum AutoCAD version: R2000.
        /// </summary>
        public string PaperspaceUCSDefinitionName { get; set; }

        /// <summary>
        /// The $PUCSNAME header variable.  Current paper space UCS name.  Minimum AutoCAD version: R11.
        /// </summary>
        public string PaperspaceUCSName { get; set; }

        /// <summary>
        /// The $PUCSORG header variable.  Current paper space UCS origin.  Minimum AutoCAD version: R11.
        /// </summary>
        public DxfPoint PaperspaceUCSOrigin { get; set; }

        /// <summary>
        /// The $PUCSXDIR header variable.  Current paper space UCS X axis.  Minimum AutoCAD version: R11.
        /// </summary>
        public DxfVector PaperspaceXAxis { get; set; }

        /// <summary>
        /// The $PUCSYDIR header variable.  Current paper space UCS Y axis.  Minimum AutoCAD version: R11.
        /// </summary>
        public DxfVector PaperspaceYAxis { get; set; }

        /// <summary>
        /// The $PUCSORTHOREF header variable.  If paper space UCS is orthographic (PUCSORTHOVIEW not equal to 0), this is the name of the UCS that the orthographic UCS is relative to. If blank, UCS is relative to WORLD.  Minimum AutoCAD version: R2000.
        /// </summary>
        public string PaperspaceOrthoUCSReference { get; set; }

        /// <summary>
        /// The $PUCSORTHOVIEW header variable.  Orthographic view type of paper space UCS.  Minimum AutoCAD version: R2000.
        /// </summary>
        public DxfOrthographicViewType PaperspaceOrthographicViewType { get; set; }

        /// <summary>
        /// The $PUCSORGTOP header variable.  Point which becomes the new UCS origin after changing paper space UCS to TOP when PUCSBASE is set to WORLD.  Minimum AutoCAD version: R2000.
        /// </summary>
        public DxfPoint PaperspaceUCSOriginTop { get; set; }

        /// <summary>
        /// The $PUCSORGBOTTOM header variable.  Point which becomes the new UCS origin after changing paper space UCS to BOTTOM when PUCSBASE is set to WORLD.  Minimum AutoCAD version: R2000.
        /// </summary>
        public DxfPoint PaperspaceUCSOriginBottom { get; set; }

        /// <summary>
        /// The $PUCSORGLEFT header variable.  Point which becomes the new UCS origin after changing paper space UCS to LEFT when PUCSBASE is set to WORLD.  Minimum AutoCAD version: R2000.
        /// </summary>
        public DxfPoint PaperspaceUCSOriginLeft { get; set; }

        /// <summary>
        /// The $PUCSORGRIGHT header variable.  Point which becomes the new UCS origin after changing paper space UCS to RIGHT when PUCSBASE is set to WORLD.  Minimum AutoCAD version: R2000.
        /// </summary>
        public DxfPoint PaperspaceUCSOriginRight { get; set; }

        /// <summary>
        /// The $PUCSORGFRONT header variable.  Point which becomes the new UCS origin after changing paper space UCS to FRONT when PUCSBASE is set to WORLD.  Minimum AutoCAD version: R2000.
        /// </summary>
        public DxfPoint PaperspaceUCSOriginFront { get; set; }

        /// <summary>
        /// The $PUCSORGBACK header variable.  Point which becomes the new UCS origin after changing paper space UCS to BACK when PUCSBASE is set to WORLD.  Minimum AutoCAD version: R2000.
        /// </summary>
        public DxfPoint PaperspaceUCSOriginBack { get; set; }

        /// <summary>
        /// The $USERI1 header variable.  Integer variable intended for use by third-party developers.
        /// </summary>
        public short UserInt1 { get; set; }

        /// <summary>
        /// The $USERI2 header variable.  Integer variable intended for use by third-party developers.
        /// </summary>
        public short UserInt2 { get; set; }

        /// <summary>
        /// The $USERI3 header variable.  Integer variable intended for use by third-party developers.
        /// </summary>
        public short UserInt3 { get; set; }

        /// <summary>
        /// The $USERI4 header variable.  Integer variable intended for use by third-party developers.
        /// </summary>
        public short UserInt4 { get; set; }

        /// <summary>
        /// The $USERI5 header variable.  Integer variable intended for use by third-party developers.
        /// </summary>
        public short UserInt5 { get; set; }

        /// <summary>
        /// The $USERR1 header variable.  Real variable indented for use by third-party developers.
        /// </summary>
        public double UserReal1 { get; set; }

        /// <summary>
        /// The $USERR2 header variable.  Real variable indented for use by third-party developers.
        /// </summary>
        public double UserReal2 { get; set; }

        /// <summary>
        /// The $USERR3 header variable.  Real variable indented for use by third-party developers.
        /// </summary>
        public double UserReal3 { get; set; }

        /// <summary>
        /// The $USERR4 header variable.  Real variable indented for use by third-party developers.
        /// </summary>
        public double UserReal4 { get; set; }

        /// <summary>
        /// The $USERR5 header variable.  Real variable indented for use by third-party developers.
        /// </summary>
        public double UserReal5 { get; set; }

        /// <summary>
        /// The $WORLDVIEW header variable.  Set UCS to WCS during DVIEW/VPOINT.
        /// </summary>
        public bool SetUCSToWCSInDViewOrVPoint { get; set; }

        /// <summary>
        /// The $SHADEDGE header variable.  Controls shading of faces.  Minimum AutoCAD version: R11.
        /// </summary>
        public DxfShadeEdgeMode EdgeShading { get; set; }

        /// <summary>
        /// The $SHADEDIF header variable.  Percent ambient/diffuse light; range 1-100.  Minimum AutoCAD version: R11.
        /// </summary>
        public short PercentAmbientToDiffuse { get; set; }

        /// <summary>
        /// The $TILEMODE header variable.  Use previous release compatibility mode.  Minimum AutoCAD version: R11.
        /// </summary>
        public bool PreviousReleaseTileCompatability { get; set; }

        /// <summary>
        /// The $MAXACTVP header variable.  Sets the maximum number of viewports to be regenerated.  Minimum AutoCAD version: R11.
        /// </summary>
        public short MaximumActiveViewports { get; set; }

        /// <summary>
        /// The $PINSBASE header variable.  Paper space insertion base point.  Minimum AutoCAD version: R14.
        /// </summary>
        public DxfPoint PaperspaceInsertionBase { get; set; }

        /// <summary>
        /// The $PLIMCHECK header variable.  Limits checking in paper space.  Minimum AutoCAD version: R11.
        /// </summary>
        public bool LimitCheckingInPaperspace { get; set; }

        /// <summary>
        /// The $PEXTMIN header variable.  Minimum X, Y, and Z extents for paper space.  Minimum AutoCAD version: R11.
        /// </summary>
        public DxfPoint PaperspaceMinimumDrawingExtents { get; set; }

        /// <summary>
        /// The $PEXTMAX header variable.  Maximum X, Y, and Z extents for paper space.  Minimum AutoCAD version: R11.
        /// </summary>
        public DxfPoint PaperspaceMaximumDrawingExtents { get; set; }

        /// <summary>
        /// The $PLIMMIN header variable.  Minimum X and Y limits in paper space.  Minimum AutoCAD version: R11.
        /// </summary>
        public DxfPoint PaperspaceMinimumDrawingLimits { get; set; }

        /// <summary>
        /// The $PLIMMAX header variable.  Maximum X and Y limits in paper space.  Minimum AutoCAD version: R11.
        /// </summary>
        public DxfPoint PaperspaceMaximumDrawingLimits { get; set; }

        /// <summary>
        /// The $UNITMODE header variable.  Display fractions, feet-and-inches, and surveyor's angles in input format.  Minimum AutoCAD version: R11.
        /// </summary>
        public bool DisplayFractionsInInput { get; set; }

        /// <summary>
        /// The $VISRETAIN header variable.  Retain xref-dependent visibility settings.  Minimum AutoCAD version: R12.
        /// </summary>
        public bool RetainXRefDependentVisibilitySettings { get; set; }

        /// <summary>
        /// The $PLINEGEN header variable.  Governs the generation of line type patterns around the vertices of a 2D polyline.  Minimum AutoCAD version: R11.
        /// </summary>
        public bool IsPolylineContinuousAroundVerticies { get; set; }

        /// <summary>
        /// The $PSLTSCALE header variable.  Controls paper space line type scaling.  Minimum AutoCAD version: R11.
        /// </summary>
        public bool ScaleLineTypesInPaperspace { get; set; }

        /// <summary>
        /// The $TREEDEPTH header variable.  Specifies the maximum depth of the spatial index.  Minimum AutoCAD version: R14.
        /// </summary>
        public short SpacialIndexMaxDepth { get; set; }

        /// <summary>
        /// The $PICKSTYLE header variable.  Controls the group selection and associative hatch selection.  Minimum AutoCAD version: R13.  Maximum AutoCAD version: R14.
        /// </summary>
        public DxfPickStyle PickStyle { get; set; }

        /// <summary>
        /// The $CMLSTYLE header variable.  Current multiline style name.  Minimum AutoCAD version: R13.  Maximum AutoCAD version: R13.
        /// </summary>
        public string CurrentMultilineStyle { get; set; }

        /// <summary>
        /// The $CMLJUST header variable.  Current multiline justification.  Minimum AutoCAD version: R13.
        /// </summary>
        public DxfJustification CurrentMultilineJustification { get; set; }

        /// <summary>
        /// The $CMLSCALE header variable.  Current multiline scale.  Minimum AutoCAD version: R13.
        /// </summary>
        public double CurrentMultilineScale { get; set; }

        /// <summary>
        /// The $PROXYGRAPHICS header variable.  Controls the saving of proxy object images.  Minimum AutoCAD version: R14.
        /// </summary>
        public bool SaveProxyGraphics { get; set; }

        /// <summary>
        /// The $MEASUREMENT header variable.  Sets drawing units.  Minimum AutoCAD version: R14.
        /// </summary>
        public DxfDrawingUnits DrawingUnits { get; set; }

        /// <summary>
        /// The $CELWEIGHT header variable.  Lineweight of new objects.  Minimum AutoCAD version: R2000.
        /// </summary>
        public DxfLineWeight NewObjectLineWeight { get; set; }

        /// <summary>
        /// The $ENDCAPS header variable.  Lineweight endcaps setting for new objects.  Minimum AutoCAD version: R2000.
        /// </summary>
        public DxfEndCapSetting EndCapSetting { get; set; }

        /// <summary>
        /// The $JOINSTYLE header variable.  Lineweight join setting for new objects.  Minimum AutoCAD version: R2000.
        /// </summary>
        public DxfJoinStyle LineweightJointSetting { get; set; }

        /// <summary>
        /// The $LWDISPLAY header variable.  Controls the display of lineweights on the Model or Layout tab.  Minimum AutoCAD version: R2000.
        /// </summary>
        public bool DisplayLinewieghtInModelAndLayoutTab { get; set; }

        /// <summary>
        /// The $INSUNITS header variable.  Default drawing units for AutoCAD DesignCenter blocks.  Minimum AutoCAD version: R2000.
        /// </summary>
        public DxfUnits DefaultDrawingUnits { get; set; }

        /// <summary>
        /// The $HYPERLINKBASE header variable.  Path for all relative hyperlinks in the drawing.  If null, the drawing path is used.  Minimum AutoCAD version: R2000.
        /// </summary>
        public string HyperlinkBase { get; set; }

        /// <summary>
        /// The $STYLESHEET header variable.  Path to the stylesheet for the drawing.  Minimum AutoCAD version: R2000.
        /// </summary>
        public string Stylesheet { get; set; }

        /// <summary>
        /// The $XEDIT header variable.  Controls whether the current drawing can be edited in-place when being referenced by another drawing.  Minimum AutoCAD version: R2000.
        /// </summary>
        public bool CanUseInPlaceReferenceEditing { get; set; }

        /// <summary>
        /// The $CEPSNID header variable.  PlotStyle handle of new objects.  Minimum AutoCAD version: R2000.
        /// </summary>
        public uint NewObjectPlotStyleHandle { get; set; }

        /// <summary>
        /// The $CEPSNTYPE header variable.  Plot style of new objects.  Minimum AutoCAD version: R2000.
        /// </summary>
        public DxfPlotStyle NewObjectPlotStyle { get; set; }

        /// <summary>
        /// The $PSTYLEMODE header variable.  Indicates whether the current drawing is in a Color-Dependent or Named Plot Style mode.  Minimum AutoCAD version: R2000.
        /// </summary>
        public bool UsesColorDependentPlotStyleTables { get; set; }

        /// <summary>
        /// The $FINGERPRINTGUID header variable.  Set at creation time, uniquely identifies a particular drawing.  Minimum AutoCAD version: R2000.
        /// </summary>
        public Guid FingerprintGuid { get; set; }

        /// <summary>
        /// The $VERSIONGUID header variable.  Uniquely identifies a particular version of a drawing.  Updated when the drawing is modified.  Minimum AutoCAD version: R2000.
        /// </summary>
        public Guid VersionGuid { get; set; }

        /// <summary>
        /// The $EXTNAMES header variable.  Controls symbol table naming.  Minimum AutoCAD version: R2000.
        /// </summary>
        public bool UseACad2000SymbolTableNaming { get; set; }

        /// <summary>
        /// The $PSVPSCALE header variable.  View scale factor for new viewports.  Minimum AutoCAD version: R2000.
        /// </summary>
        public double ViewportViewScaleFactor { get; set; }

        /// <summary>
        /// The $OLESTARTUP header variable.  Controls whether the source application of an embedded OLE object loads when plotting.  Minimum AutoCAD version: R2000.
        /// </summary>
        public bool OleStartup { get; set; }

        /// <summary>
        /// The $SORTENTS header variable.  Controls the object sorting methods; accessible from the Options dialog box User Preferences tab.  Minimum AutoCAD version: R2004.
        /// </summary>
        public int ObjectSortingMethodsFlags { get; set; }

        /// <summary>
        /// The $INDEXCTL header variable.  Controls whether layer and spatial indexes are created and saved in drawing files.  Minimum AutoCAD version: R2004.
        /// </summary>
        public DxfLayerAndSpatialIndexSaveMode LayerAndSpatialIndexSaveMode { get; set; }

        /// <summary>
        /// The $HIDETEXT header variable.  Ignore text objects.  Minimum AutoCAD version: R2004.
        /// </summary>
        public bool HideTextObjectsWhenProducintHiddenView { get; set; }

        /// <summary>
        /// The $XCLIPFRAME header variable.  Controls the visibility of xref clipping boundaries.  Minimum AutoCAD version: R2004.  Maximum AutoCAD version: R2007.
        /// </summary>
        public DxfXrefClippingBoundaryVisibility IsXRefClippingBoundaryVisible { get; set; }

        /// <summary>
        /// The $HALOGAP header variable.  Specifies a gap to be displayed where an object is hidden by another object; the value is specified as a percent of one unit and is independent of the zoom level.  A haloed line is shortened at the point where it is hidden when HIDE or the Hidden option of SHADEMODE is used.  Minimum AutoCAD version: R2004.
        /// </summary>
        public double HaloGapPercent { get; set; }

        /// <summary>
        /// The $OBSCOLOR header variable.  Specifies the color of obscured lines.  An obscured line is a hidden line made visible by changing its color and line type and is visible only when the HIDE or SHADEMODE command is used.  The OBSCUREDCOLOR setting is visible only if the OBSCUREDLTYPE is turned ON by setting it to a value other than 0.  Minimum AutoCAD version: R2004.
        /// </summary>
        public DxfColor ObscuredLineColor { get; set; }

        /// <summary>
        /// The $OBSLTYPE header variable.  Specifies the line type of obscured lines.  Obscured line types are independent of zoom level, unlike regular AutoCAD line types.  Value 0 turns off display of obscured lines and is the default.  Minimum AutoCAD version: R2004.
        /// </summary>
        public DxfLineTypeStyle ObscuredLineTypeStyle { get; set; }

        /// <summary>
        /// The $INTERSECTIONDISPLAY header variable.  Specifies the display of intersection polylines.  Minimum AutoCAD version: R2004.
        /// </summary>
        public bool DisplayIntersectionPolylines { get; set; }

        /// <summary>
        /// The $INTERSECTIONCOLOR header variable.  Specifies the entity color of intersection polylines.  Minimum AutoCAD version: R2004.
        /// </summary>
        public DxfColor IntersectionPolylineColor { get; set; }

        /// <summary>
        /// The $DIMASSOC header variable.  Controls the associativity of dimension objects.  Minimum AutoCAD version: R2004.
        /// </summary>
        public DxfDimensionAssociativity DimensionObjectAssociativity { get; set; }

        /// <summary>
        /// The $PROJECTNAME header variable.  Assigns a project name to the current drawing.  Used when an external reference or image is not found on its original path.  The project name points to a section in the registry that can contain one or more search paths for each project name defined.  Project names and their search directories are created from the Files tab of the Options dialog box.  Minimum AutoCAD version: R2004.
        /// </summary>
        public string ProjectName { get; set; }

        /// <summary>
        /// The $CAMERADISPLAY header variable.  Turns the display of camera objects on or off.  Minimum AutoCAD version: R2007.
        /// </summary>
        public bool UseCameraDisplay { get; set; }

        /// <summary>
        /// The $LENSLENGTH header variable.  Stores the length of the lens in millimeters used in perspective viewing.  Minimum AutoCAD version: R2007.
        /// </summary>
        public double LensLength { get; set; }

        /// <summary>
        /// The $CAMERAHEIGHT header variable.  Specifies the default height for new camera objects.  Minimum AutoCAD version: R2007.
        /// </summary>
        public double CameraHeight { get; set; }

        /// <summary>
        /// The $STEPSPERSEC header variable.  Specifies the number of steps taken per second when you are in walk or fly mode.  Minimum AutoCAD version: R2007.
        /// </summary>
        public double StepsPerSecondInWalkOrFlyMode { get; set; }

        /// <summary>
        /// The $STEPSIZE header variable.  Specifies the size of each step when in walk or fly mode, in drawing units.  Minimum AutoCAD version: R2007.
        /// </summary>
        public double StepSizeInWalkOrFlyMode { get; set; }

        /// <summary>
        /// The $3DDWFPREC header variable.  Controls the precision of 3D DWF or 3D DWFx publishing.  Minimum AutoCAD version: R2007.
        /// </summary>
        public Dxf3DDwfPrecision Dwf3DPrecision { get; set; }

        /// <summary>
        /// The $PSOLWIDTH header variable.  Controls the default width for a swept solid object created with the POLYSOLID command.  Minimum AutoCAD version: R2007.
        /// </summary>
        public double LastPolySolidWidth { get; set; }

        /// <summary>
        /// The $PSOLHEIGHT header variable.  Controls the default height for a swept solid object created with the POLYSOLID command.  Minimum AutoCAD version: R2007.
        /// </summary>
        public double LastPolySolidHeight { get; set; }

        /// <summary>
        /// The $LOFTANG1 header variable.  Sets the draft angle through the first cross section in a loft operation.  Minimum AutoCAD version: R2007.
        /// </summary>
        public double LoftOperationFirstDraftAngle { get; set; }

        /// <summary>
        /// The $LOFTANG2 header variable.  Sets the draft angle through the second cross section in a loft operation.  Minimum AutoCAD version: R2007.
        /// </summary>
        public double LoftOperationSecondDraftAngle { get; set; }

        /// <summary>
        /// The $LOFTMAG1 header variable.  Sets the magnitude of the draft angle through the first cross section in a loft operation.  Minimum AutoCAD version: R2007.
        /// </summary>
        public double LoftOperationFirstMagnitude { get; set; }

        /// <summary>
        /// The $LOFTMAG2 header variable.  Sets the magnitude of the draft angle through the second cross section in a loft operation.  Minimum AutoCAD version: R2007.
        /// </summary>
        public double LoftOperationSecondMagnitude { get; set; }

        /// <summary>
        /// The $LOFTPARAM header variable.  Controls the shape of lofted solids and surfaces.  Minimum AutoCAD version: R2007.
        /// </summary>
        public int LoftFlags { get; set; }

        /// <summary>
        /// The $LOFTNORMALS header variable.  Controls the normals of a lofted object where it passes through cross sections.  Minimum AutoCAD version: R2007.
        /// </summary>
        public DxfLoftedObjectNormalMode LoftedObjectNormalMode { get; set; }

        /// <summary>
        /// The $LATITUDE header variable.  The latitude of the geographic location assigned to the drawing.  Minimum AutoCAD version: R2007.
        /// </summary>
        public double Latitude { get; set; }

        /// <summary>
        /// The $LONGITUDE header variable.  The longitude of the geographic location assigned to the drawing.  Minimum AutoCAD version: R2007.
        /// </summary>
        public double Longitude { get; set; }

        /// <summary>
        /// The $NORTHDIRECTION header variable.  Specifies the angle between the Y axis of WCS and the grid north.  Minimum AutoCAD version: R2007.
        /// </summary>
        public double AngleBetweenYAxisAndNorth { get; set; }

        /// <summary>
        /// The $TIMEZONE header variable.  Sets the time zone for the sun in the drawing.  Minimum AutoCAD version: R2007.
        /// </summary>
        public DxfTimeZone TimeZone { get; set; }

        /// <summary>
        /// The $LIGHTGLYPHDISPLAY header variable.  Turns on and off the display of light glyphs.  Minimum AutoCAD version: R2007.
        /// </summary>
        public bool UseLightGlyphDisplay { get; set; }

        /// <summary>
        /// The $TILEMODELIGHTSYNCH header variable.  Unknown.  Minimum AutoCAD version: R2007.
        /// </summary>
        public bool UseTileModeLightSync { get; set; }

        /// <summary>
        /// The $CMATERIAL header variable.  Sets the material of new objects.  Minimum AutoCAD version: R2007.
        /// </summary>
        public uint CurrentMaterialHandle { get; set; }

        /// <summary>
        /// The $SOLIDHIST header variable.  Controls whether new composite solids retain a history of their original components.  Minimum AutoCAD version: R2007.
        /// </summary>
        public bool NewSolidsContainHistory { get; set; }

        /// <summary>
        /// The $SHOWHIST header variable.  Controls the Show History property for solids in a drawing.  Minimum AutoCAD version: R2007.
        /// </summary>
        public DxfSolidHistoryMode SolidHistoryMode { get; set; }

        /// <summary>
        /// The $DWFFRAME header variable.  Determines whether DWF or DWFx underlay frames are visible or plotted in the current drawing.  Minimum AutoCAD version: R2007.
        /// </summary>
        public DxfUnderlayFrameMode DwfUnderlayFrameMode { get; set; }

        /// <summary>
        /// The $DGNFRAME header variable.  Determines whether DGN underlay frames are visible or plotted in the current drawing.  Minimum AutoCAD version: R2007.
        /// </summary>
        public DxfUnderlayFrameMode DgnUnderlayFrameMode { get; set; }

        /// <summary>
        /// The $REALWORLDSCALE header variable.  Drawing is scaled to the real world.  Minimum AutoCAD version: R2007.
        /// </summary>
        public bool UseRealWorldScale { get; set; }

        /// <summary>
        /// The $INTERFERECOLOR header variable.  Represents the ACI color index of the "interference objects" created during the interfere command.  Minimum AutoCAD version: R2007.
        /// </summary>
        public DxfColor InterferenceObjectColor { get; set; }

        /// <summary>
        /// The $INTERFEREOBJVS header variable.  Hard-pointer ID to the visual stype for interference objects.  Minimum AutoCAD version: R2007.
        /// </summary>
        public uint InterferenceObjectVisualStylePointer { get; set; }

        /// <summary>
        /// The $INTERFEREVPVS header variable.  Hard-pointer ID to the visual styoe for the viewport during interference checking.  Minimum AutoCAD version: R2007.
        /// </summary>
        public uint InterferenceViewPortVisualStylePointer { get; set; }

        /// <summary>
        /// The $CSHADOW header variable.  Shadow mode for a 3D object.  Minimum AutoCAD version: R2007.
        /// </summary>
        public DxfShadowMode ShadowMode { get; set; }

        /// <summary>
        /// The $SHADOWPLANELOCATION header variable.  Location of the ground shadow plane.  This is a Z axis ordinate.  Minimum AutoCAD version: R2007.
        /// </summary>
        public double ShadowPlaneZOffset { get; set; }

        /// <summary>
        /// The $AXISMODE header variable.  Axis on.  Maximum AutoCAD version: R10.
        /// </summary>
        public bool AxisOn { get; set; }

        /// <summary>
        /// The $AXISUNIT header variable.  Axis X and Y tick spacing.  Maximum AutoCAD version: R10.
        /// </summary>
        public DxfVector AxisTickSpacing { get; set; }

        /// <summary>
        /// The $FASTZOOM header variable.  Fast zoom enabled.  Maximum AutoCAD version: R10.
        /// </summary>
        public bool FastZoom { get; set; }

        /// <summary>
        /// The $GRIDMODE header variable.  Grid mode on.  Maximum AutoCAD version: R10.
        /// </summary>
        public bool GridOn { get; set; }

        /// <summary>
        /// The $GRIDUNIT header variable.  Grid X and Y spacing.  Maximum AutoCAD version: R10.
        /// </summary>
        public DxfVector GridSpacing { get; set; }

        /// <summary>
        /// The $SNAPANG header variable.  Snap grid rotation angle.  Maximum AutoCAD version: R10.
        /// </summary>
        public double SnapRotationAngle { get; set; }

        /// <summary>
        /// The $SNAPBASE header variable.  Snap/grid/base point (in UCS).  Maximum AutoCAD version: R10.
        /// </summary>
        public DxfPoint SnapBasePoint { get; set; }

        /// <summary>
        /// The $SNAPISOPAIR header variable.  Isometric plane.  Maximum AutoCAD version: R10.
        /// </summary>
        public DxfSnapIsometricPlane SnapIsometricPlane { get; set; }

        /// <summary>
        /// The $SNAPMODE header variable.  Snap mode on.  Maximum AutoCAD version: R10.
        /// </summary>
        public bool SnapOn { get; set; }

        /// <summary>
        /// The $SNAPSTYLE header variable.  Snap style.  Maximum AutoCAD version: R10.
        /// </summary>
        public DxfSnapStyle SnapStyle { get; set; }

        /// <summary>
        /// The $SNAPUNIT header variable.  Snap grid X and Y spacing.  Maximum AutoCAD version: R10.
        /// </summary>
        public DxfVector SnapSpacing { get; set; }

        /// <summary>
        /// The $VIEWCTR header variable.  XY center of current view on screen.  Maximum AutoCAD version: R10.
        /// </summary>
        public DxfPoint ViewCenter { get; set; }

        /// <summary>
        /// The $VIEWDIR header variable.  Viewing direction (direction from target in WCS).  Maximum AutoCAD version: R10.
        /// </summary>
        public DxfVector ViewDirection { get; set; }

        /// <summary>
        /// The $VIEWSIZE header variable.  Height of view.  Maximum AutoCAD version: R10.
        /// </summary>
        public double ViewHeight { get; set; }

        public void SetDefaults()
        {
            SetManualDefaults();
            this.Version = DxfAcadVersion.R12; // ACADVER
            this.MaintenenceVersion = 0; // ACADMAINTVER
            this.DrawingCodePage = "ANSI_1252"; // DWGCODEPAGE
            this.LastSavedBy = null; // LASTSAVEDBY
            this.RequiredVersions = 0; // REQUIREDVERSIONS
            this.InsertionBase = DxfPoint.Origin; // INSBASE
            this.MinimumDrawingExtents = DxfPoint.Origin; // EXTMIN
            this.MaximumDrawingExtents = DxfPoint.Origin; // EXTMAX
            this.MinimumDrawingLimits = DxfPoint.Origin; // LIMMIN
            this.MaximumDrawingLimits = new DxfPoint(12.0, 9.0, 0.0); // LIMMAX
            this.DrawOrthoganalLines = false; // ORTHOMODE
            this.UseRegenMode = true; // REGENMODE
            this.FillModeOn = true; // FILLMODE
            this.UseQuickTextMode = false; // QTEXTMODE
            this.MirrorText = false; // MIRRTEXT
            this.DragMode = DxfDragMode.Auto; // DRAGMODE
            this.LineTypeScale = 1.0; // LTSCALE
            this.ObjectSnapFlags = 37; // OSMODE
            this.AttributeVisibility = DxfAttributeVisibility.Normal; // ATTMODE
            this.DefaultTextHeight = 0.2; // TEXTSIZE
            this.TraceWidth = 0.05; // TRACEWID
            this.TextStyle = "STANDARD"; // TEXTSTYLE
            this.CurrentLayer = "0"; // CLAYER
            this.CurrentEntityLineType = "BYLAYER"; // CELTYPE
            this.CurrentEntityColor = DxfColor.ByLayer; // CECOLOR
            this.CurrentEntityLineTypeScale = 1.0; // CELTSCALE
            this.RetainDeletedObjects = true; // DELOBJ
            this.DisplaySilhouetteCurvesInWireframeMode = false; // DISPSILH
            this.SolidVisualStylePointer = 0; // DRAGVS
            this.DimensioningScaleFactor = 1.0; // DIMSCALE
            this.DimensioningArrowSize = 0.18; // DIMASZ
            this.DimensionExtensionLineOffset = 0.0625; // DIMEXO
            this.DimensionLineIncrement = 0.38; // DIMDLI
            this.DimensionDistanceRoundingValue = 0.0; // DIMRND
            this.DimensionLineExtension = 0.0; // DIMDLE
            this.DimensionExtensionLineExtension = 0.18; // DIMEXE
            this.DimensionPlusTolerance = 0.0; // DIMTP
            this.DimensionMinusTolerance = 0.0; // DIMTM
            this.DimensioningTextHeight = 0.18; // DIMTXT
            this.CenterMarkSize = 0.09; // DIMCEN
            this.DimensioningTickSize = 0.0; // DIMTSZ
            this.GenerateDimensionTolerances = false; // DIMTOL
            this.GenerateDimensionLimits = false; // DIMLIM
            this.DimensionTextInsideHorizontal = true; // DIMTIH
            this.DimensionTextOutsideHorizontal = true; // DIMTOH
            this.SuppressFirstDimensionExtensionLine = false; // DIMSE1
            this.SuppressSecondDimensionExtensionLine = false; // DIMSE2
            this.TextAboveDimensionLine = false; // DIMTAD
            this.DimensionUnitZeroSuppression = DxfUnitZeroSuppression.SuppressZeroFeetAndZeroInches; // DIMZIN
            this.ArrowBlockName = null; // DIMBLK
            this.CreateAssociativeDimensioning = true; // DIMASO
            this.RecomputeDimensionsWhileDragging = true; // DIMSHO
            this.DimensioningSuffix = null; // DIMPOST
            this.AlternateDimensioningSuffix = null; // DIMAPOST
            this.UseAlternateDimensioning = false; // DIMALT
            this.AlternateDimensioningDecimalPlaces = 2; // DIMALTD
            this.AlternateDimensioningScaleFactor = 25.4; // DIMALTF
            this.DimensionLinearMeasurementsScaleFactor = 1.0; // DIMLFAC
            this.ForceDimensionLineExtensionsOutsideIfTextIs = false; // DIMTOFL
            this.DimensionVerticalTextPosition = 0.0; // DIMTVP
            this.ForceDimensionTextInsideExtensions = false; // DIMTIX
            this.SuppressOutsideExtensionDimensionLines = false; // DIMSOXD
            this.UseSeparateArrowBlocksForDimensions = false; // DIMSAH
            this.FirstArrowBlockName = null; // DIMBLK1
            this.SecondArrowBlockName = null; // DIMBLK2
            this.DimensionStyleName = "STANDARD"; // DIMSTYLE
            this.DimensionLineColor = DxfColor.ByBlock; // DIMCLRD
            this.DimensionExtensionLineColor = DxfColor.ByBlock; // DIMCLRE
            this.DimensionTextColor = DxfColor.ByBlock; // DIMCLRT
            this.DimensionToleranceDisplayScaleFactor = 1.0; // DIMTFAC
            this.DimensionLineGap = 0.09; // DIMGAP
            this.DimensionTextJustification = DxfDimensionTextJustification.AboveLineCenter; // DIMJUST
            this.DimensionToleranceVerticalJustification = DxfJustification.Middle; // DIMTOLJ
            this.DimensionToleranceZeroSuppression = DxfUnitZeroSuppression.SuppressZeroFeetAndZeroInches; // DIMTZIN
            this.AlternateDimensioningZeroSupression = DxfUnitZeroSuppression.SuppressZeroFeetAndZeroInches; // DIMALTZ
            this.AlternateDimensioningToleranceZeroSupression = DxfUnitZeroSuppression.SuppressZeroFeetAndZeroInches; // DIMALTTZ
            this.DimensionTextAndArrowPlacement = DxfDimensionFit.TextAndArrowsOutsideLines; // DIMFIT
            this.DimensionCursorControlsTextPosition = false; // DIMUPT
            this.DimensionUnitFormat = DxfUnitFormat.Decimal; // DIMUNIT
            this.DimensionUnitToleranceDecimalPlaces = 4; // DIMDEC
            this.DimensionToleranceDecimalPlaces = 4; // DIMTDEC
            this.AlternateDimensioningUnits = DxfUnitFormat.Decimal; // DIMALTU
            this.AlternateDimensioningToleranceDecimalPlaces = 2; // DIMALTTD
            this.DimensionTextStyle = "STANDARD"; // DIMTXSTY
            this.DimensioningAngleFormat = DxfAngleFormat.DecimalDegrees; // DIMAUNIT
            this.AngularDimensionPrecision = 0; // DIMADEC
            this.AlternateDimensioningUnitRounding = 0.0; // DIMALTRND
            this.DimensionAngleZeroSuppression = DxfUnitZeroSuppression.SuppressZeroFeetAndZeroInches; // DIMAZIN
            this.DimensionDecimalSeparatorChar = '.'; // DIMDSEP
            this.DimensionTextHeightScaleFactor = DxfDimensionFractionFormat.HorizontalStacking; // DIMFRAC
            this.DimensionLeaderBlockName = null; // DIMLDRBLK
            this.DimensionNonAngularUnits = DxfNonAngularUnits.Decimal; // DIMLUNIT
            this.DimensionLineWeight = DxfLineWeight.ByLayer; // DIMLWD
            this.DimensionExtensionLineWeight = DxfLineWeight.ByLayer; // DIMLWE
            this.DimensionTextMovementRule = DxfDimensionTextMovementRule.MoveLineWithText; // DIMTMOVE
            this.DimensionLineFixedLength = 1.0; // DIMFXL
            this.DimensionLineFixedLengthOn = false; // DIMFXLON
            this.DimensionTransverseSegmentAngleInJoggedRadius = Math.PI / 4.0; // DIMJOGANG
            this.DimensionTextBackgroundColorMode = DxfDimensionTextBackgroundColorMode.None; // DIMTFILL
            this.DxfDimensionTextBackgroundCustomColor = DxfColor.ByBlock; // DIMTFILLCLR
            this.DimensionArcSymbolDisplayMode = DxfDimensionArcSymbolDisplayMode.SymbolBeforeText; // DIMARCSYM
            this.DimensionLineType = null; // DIMLTYPE
            this.DimensionFirstExtensionLineType = null; // DIMLTEX1
            this.DimensionSecondExtensionLineType = null; // DIMLTEX2
            this.DimensionTextDirection = DxfTextDirection.LeftToRight; // DIMTXTDIRECTION
            this.UnitFormat = DxfUnitFormat.Decimal; // LUNITS
            this.UnitPrecision = 4; // LUPREC
            this.SketchRecordIncrement = 0.1; // SKETCHINC
            this.FilletRadius = 0.0; // FILLETRAD
            this.AngleUnitFormat = DxfAngleFormat.DecimalDegrees; // AUNITS
            this.AngleUnitPrecision = 0; // AUPREC
            this.FileName = "."; // MENU
            this.Elevation = 0.0; // ELEVATION
            this.PaperspaceElevation = 0.0; // PELEVATION
            this.Thickness = 0.0; // THICKNESS
            this.UseLimitsChecking = false; // LIMCHECK
            this.BlipMode = false; // BLIPMODE
            this.FirstChamferDistance = 0.0; // CHAMFERA
            this.SecondChamferDistance = 0.0; // CHAMFERB
            this.ChamferLength = 0.0; // CHAMFERC
            this.ChamferAngle = 0.0; // CHAMFERD
            this.PolylineSketchMode = DxfPolySketchMode.SketchLines; // SKPOLY
            this.CreationDate = DateTime.Now; // TDCREATE
            this.CreationDateUniversal = DateTime.UtcNow; // TDUCREATE
            this.UpdateDate = DateTime.Now; // TDUPDATE
            this.UpdateDateUniversal = DateTime.UtcNow; // TDUUPDATE
            this.TimeInDrawing = TimeSpan.Zero; // TDINDWG
            this.UserElapsedTimer = TimeSpan.Zero; // TDUSRTIMER
            this.UserTimerOn = true; // USRTIMER
            this.AngleZeroDirection = 0.0; // ANGBASE
            this.AngleDirection = DxfAngleDirection.CounterClockwise; // ANGDIR
            this.PointDisplayMode = 0; // PDMODE
            this.PointDisplaySize = 0.0; // PDSIZE
            this.DefaultPolylineWidth = 0.0; // PLINEWID
            this.CoordinateDisplay = DxfCoordinateDisplay.ContinuousUpdate; // COORDS
            this.DisplaySplinePolygonControl = false; // SPLFRAME
            this.PEditSplineCurveType = DxfPolylineCurvedAndSmoothSurfaceType.CubicBSpline; // SPLINETYPE
            this.LineSegmentsPerSplinePatch = 8; // SPLINESEGS
            this.ShowAttributeEntryDialogs = true; // ATTDIA
            this.PromptForAttributeOnInsert = true; // ATTREQ
            this.HandlesEnabled = true; // HANDLING
            this.NextAvailableHandle = 0; // HANDSEED
            this.MeshTabulationsInFirstDirection = 6; // SURFTAB1
            this.MeshTabulationsInSecondDirection = 6; // SURFTAB2
            this.PEditSmoothSurfaceType = DxfPolylineCurvedAndSmoothSurfaceType.CubicBSpline; // SURFTYPE
            this.PEditSmoothMDensith = 6; // SURFU
            this.PEditSmoothNDensith = 6; // SURFV
            this.UCSDefinitionName = null; // UCSBASE
            this.UCSName = null; // UCSNAME
            this.UCSOrigin = DxfPoint.Origin; // UCSORG
            this.UCSXAxis = DxfVector.XAxis; // UCSXDIR
            this.UCSYAxis = DxfVector.YAxis; // UCSYDIR
            this.OrthoUCSReference = null; // UCSORTHOREF
            this.OrthgraphicViewType = DxfOrthographicViewType.None; // UCSORTHOVIEW
            this.UCSOriginTop = DxfPoint.Origin; // UCSORGTOP
            this.UCSOriginBottom = DxfPoint.Origin; // UCSORGBOTTOM
            this.UCSOriginLeft = DxfPoint.Origin; // UCSORGLEFT
            this.UCSOriginRight = DxfPoint.Origin; // UCSORGRIGHT
            this.UCSOriginFront = DxfPoint.Origin; // UCSORGFRONT
            this.UCSOriginBack = DxfPoint.Origin; // UCSORGBACK
            this.PaperspaceUCSDefinitionName = null; // PUCSBASE
            this.PaperspaceUCSName = null; // PUCSNAME
            this.PaperspaceUCSOrigin = DxfPoint.Origin; // PUCSORG
            this.PaperspaceXAxis = DxfVector.XAxis; // PUCSXDIR
            this.PaperspaceYAxis = DxfVector.YAxis; // PUCSYDIR
            this.PaperspaceOrthoUCSReference = null; // PUCSORTHOREF
            this.PaperspaceOrthographicViewType = DxfOrthographicViewType.None; // PUCSORTHOVIEW
            this.PaperspaceUCSOriginTop = DxfPoint.Origin; // PUCSORGTOP
            this.PaperspaceUCSOriginBottom = DxfPoint.Origin; // PUCSORGBOTTOM
            this.PaperspaceUCSOriginLeft = DxfPoint.Origin; // PUCSORGLEFT
            this.PaperspaceUCSOriginRight = DxfPoint.Origin; // PUCSORGRIGHT
            this.PaperspaceUCSOriginFront = DxfPoint.Origin; // PUCSORGFRONT
            this.PaperspaceUCSOriginBack = DxfPoint.Origin; // PUCSORGBACK
            this.UserInt1 = 0; // USERI1
            this.UserInt2 = 0; // USERI2
            this.UserInt3 = 0; // USERI3
            this.UserInt4 = 0; // USERI4
            this.UserInt5 = 0; // USERI5
            this.UserReal1 = 0.0; // USERR1
            this.UserReal2 = 0.0; // USERR2
            this.UserReal3 = 0.0; // USERR3
            this.UserReal4 = 0.0; // USERR4
            this.UserReal5 = 0.0; // USERR5
            this.SetUCSToWCSInDViewOrVPoint = true; // WORLDVIEW
            this.EdgeShading = DxfShadeEdgeMode.FacesInEntityColorEdgesInBlack; // SHADEDGE
            this.PercentAmbientToDiffuse = 70; // SHADEDIF
            this.PreviousReleaseTileCompatability = true; // TILEMODE
            this.MaximumActiveViewports = 64; // MAXACTVP
            this.PaperspaceInsertionBase = DxfPoint.Origin; // PINSBASE
            this.LimitCheckingInPaperspace = false; // PLIMCHECK
            this.PaperspaceMinimumDrawingExtents = new DxfPoint(1.0e20, 1.0e20, 1.0e20); // PEXTMIN
            this.PaperspaceMaximumDrawingExtents = new DxfPoint(-1.0e20, -1.0e20, -1.0e20); // PEXTMAX
            this.PaperspaceMinimumDrawingLimits = DxfPoint.Origin; // PLIMMIN
            this.PaperspaceMaximumDrawingLimits = new DxfPoint(12.0, 9.0, 0.0); // PLIMMAX
            this.DisplayFractionsInInput = false; // UNITMODE
            this.RetainXRefDependentVisibilitySettings = true; // VISRETAIN
            this.IsPolylineContinuousAroundVerticies = false; // PLINEGEN
            this.ScaleLineTypesInPaperspace = true; // PSLTSCALE
            this.SpacialIndexMaxDepth = 3020; // TREEDEPTH
            this.PickStyle = DxfPickStyle.Group; // PICKSTYLE
            this.CurrentMultilineStyle = "STANDARD"; // CMLSTYLE
            this.CurrentMultilineJustification = DxfJustification.Top; // CMLJUST
            this.CurrentMultilineScale = 1.0; // CMLSCALE
            this.SaveProxyGraphics = true; // PROXYGRAPHICS
            this.DrawingUnits = DxfDrawingUnits.English; // MEASUREMENT
            this.NewObjectLineWeight = DxfLineWeight.ByBlock; // CELWEIGHT
            this.EndCapSetting = DxfEndCapSetting.None; // ENDCAPS
            this.LineweightJointSetting = DxfJoinStyle.None; // JOINSTYLE
            this.DisplayLinewieghtInModelAndLayoutTab = false; // LWDISPLAY
            this.DefaultDrawingUnits = DxfUnits.Unitless; // INSUNITS
            this.HyperlinkBase = null; // HYPERLINKBASE
            this.Stylesheet = null; // STYLESHEET
            this.CanUseInPlaceReferenceEditing = true; // XEDIT
            this.NewObjectPlotStyleHandle = 0; // CEPSNID
            this.NewObjectPlotStyle = DxfPlotStyle.ByLayer; // CEPSNTYPE
            this.UsesColorDependentPlotStyleTables = true; // PSTYLEMODE
            this.FingerprintGuid = Guid.NewGuid(); // FINGERPRINTGUID
            this.VersionGuid = Guid.NewGuid(); // VERSIONGUID
            this.UseACad2000SymbolTableNaming = true; // EXTNAMES
            this.ViewportViewScaleFactor = 0.0; // PSVPSCALE
            this.OleStartup = false; // OLESTARTUP
            this.ObjectSortingMethodsFlags = 127; // SORTENTS
            this.LayerAndSpatialIndexSaveMode = DxfLayerAndSpatialIndexSaveMode.None; // INDEXCTL
            this.HideTextObjectsWhenProducintHiddenView = false; // HIDETEXT
            this.IsXRefClippingBoundaryVisible = DxfXrefClippingBoundaryVisibility.DisplayedNotPlotted; // XCLIPFRAME
            this.HaloGapPercent = 0.0; // HALOGAP
            this.ObscuredLineColor = DxfColor.ByEntity; // OBSCOLOR
            this.ObscuredLineTypeStyle = DxfLineTypeStyle.Off; // OBSLTYPE
            this.DisplayIntersectionPolylines = false; // INTERSECTIONDISPLAY
            this.IntersectionPolylineColor = DxfColor.ByEntity; // INTERSECTIONCOLOR
            this.DimensionObjectAssociativity = DxfDimensionAssociativity.NonAssociativeObjects; // DIMASSOC
            this.ProjectName = null; // PROJECTNAME
            this.UseCameraDisplay = false; // CAMERADISPLAY
            this.LensLength = 50.0; // LENSLENGTH
            this.CameraHeight = 0.0; // CAMERAHEIGHT
            this.StepsPerSecondInWalkOrFlyMode = 2.0; // STEPSPERSEC
            this.StepSizeInWalkOrFlyMode = 6.0; // STEPSIZE
            this.Dwf3DPrecision = Dxf3DDwfPrecision.Deviation_0_5; // 3DDWFPREC
            this.LastPolySolidWidth = 0.25; // PSOLWIDTH
            this.LastPolySolidHeight = 4.0; // PSOLHEIGHT
            this.LoftOperationFirstDraftAngle = Math.PI / 2.0; // LOFTANG1
            this.LoftOperationSecondDraftAngle = Math.PI / 2.0; // LOFTANG2
            this.LoftOperationFirstMagnitude = 0.0; // LOFTMAG1
            this.LoftOperationSecondMagnitude = 0.0; // LOFTMAG2
            this.LoftFlags = 7; // LOFTPARAM
            this.LoftedObjectNormalMode = DxfLoftedObjectNormalMode.SmoothFit; // LOFTNORMALS
            this.Latitude = 37.7950; // LATITUDE
            this.Longitude = -122.3940; // LONGITUDE
            this.AngleBetweenYAxisAndNorth = 0.0; // NORTHDIRECTION
            this.TimeZone = DxfTimeZone.PacificTime_US_Canada_SanFrancisco_Vancouver; // TIMEZONE
            this.UseLightGlyphDisplay = true; // LIGHTGLYPHDISPLAY
            this.UseTileModeLightSync = true; // TILEMODELIGHTSYNCH
            this.CurrentMaterialHandle = 0u; // CMATERIAL
            this.NewSolidsContainHistory = false; // SOLIDHIST
            this.SolidHistoryMode = DxfSolidHistoryMode.DoesNotOverride; // SHOWHIST
            this.DwfUnderlayFrameMode = DxfUnderlayFrameMode.DisplayNoPlot; // DWFFRAME
            this.DgnUnderlayFrameMode = DxfUnderlayFrameMode.None; // DGNFRAME
            this.UseRealWorldScale = true; // REALWORLDSCALE
            this.InterferenceObjectColor = DxfColor.FromIndex(1); // INTERFERECOLOR
            this.InterferenceObjectVisualStylePointer = 0u; // INTERFEREOBJVS
            this.InterferenceViewPortVisualStylePointer = 0u; // INTERFEREVPVS
            this.ShadowMode = DxfShadowMode.CastsAndReceivesShadows; // CSHADOW
            this.ShadowPlaneZOffset = 0.0; // SHADOWPLANELOCATION
            this.AxisOn = false; // AXISMODE
            this.AxisTickSpacing = DxfVector.Zero; // AXISUNIT
            this.FastZoom = true; // FASTZOOM
            this.GridOn = false; // GRIDMODE
            this.GridSpacing = new DxfVector(1.0, 1.0, 0.0); // GRIDUNIT
            this.SnapRotationAngle = 0.0; // SNAPANG
            this.SnapBasePoint = DxfPoint.Origin; // SNAPBASE
            this.SnapIsometricPlane = DxfSnapIsometricPlane.Left; // SNAPISOPAIR
            this.SnapOn = false; // SNAPMODE
            this.SnapStyle = DxfSnapStyle.Standard; // SNAPSTYLE
            this.SnapSpacing = new DxfVector(1.0, 1.0, 0.0); // SNAPUNIT
            this.ViewCenter = DxfPoint.Origin; // VIEWCTR
            this.ViewDirection = DxfVector.ZAxis; // VIEWDIR
            this.ViewHeight = 1.0; // VIEWSIZE
        }

        internal void AddValueToList(List<DxfCodePair> list)
        {

            // ACADVER
            list.Add(new DxfCodePair(9, ACADVER));
            list.Add(new DxfCodePair(1, VersionConverter(this.Version)));

            // ACADMAINTVER
            if (Version >= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, ACADMAINTVER));
                list.Add(new DxfCodePair(70, (this.MaintenenceVersion)));
            }

            // DWGCODEPAGE
            if (Version >= DxfAcadVersion.R13)
            {
                list.Add(new DxfCodePair(9, DWGCODEPAGE));
                list.Add(new DxfCodePair(3, (this.DrawingCodePage)));
            }

            // LASTSAVEDBY
            if (Version >= DxfAcadVersion.R2004)
            {
                list.Add(new DxfCodePair(9, LASTSAVEDBY));
                list.Add(new DxfCodePair(1, (this.LastSavedBy)));
            }

            // REQUIREDVERSIONS
            if (Version >= DxfAcadVersion.R2013)
            {
                list.Add(new DxfCodePair(9, REQUIREDVERSIONS));
                list.Add(new DxfCodePair(160, (this.RequiredVersions)));
            }

            // INSBASE
            list.Add(new DxfCodePair(9, INSBASE));
            list.Add(new DxfCodePair(10, this.InsertionBase?.X ?? default(double)));
            list.Add(new DxfCodePair(20, this.InsertionBase?.Y ?? default(double)));
            list.Add(new DxfCodePair(30, this.InsertionBase?.Z ?? default(double)));

            // EXTMIN
            list.Add(new DxfCodePair(9, EXTMIN));
            list.Add(new DxfCodePair(10, this.MinimumDrawingExtents?.X ?? default(double)));
            list.Add(new DxfCodePair(20, this.MinimumDrawingExtents?.Y ?? default(double)));
            list.Add(new DxfCodePair(30, this.MinimumDrawingExtents?.Z ?? default(double)));

            // EXTMAX
            list.Add(new DxfCodePair(9, EXTMAX));
            list.Add(new DxfCodePair(10, this.MaximumDrawingExtents?.X ?? default(double)));
            list.Add(new DxfCodePair(20, this.MaximumDrawingExtents?.Y ?? default(double)));
            list.Add(new DxfCodePair(30, this.MaximumDrawingExtents?.Z ?? default(double)));

            // LIMMIN
            list.Add(new DxfCodePair(9, LIMMIN));
            list.Add(new DxfCodePair(10, this.MinimumDrawingLimits?.X ?? default(double)));
            list.Add(new DxfCodePair(20, this.MinimumDrawingLimits?.Y ?? default(double)));

            // LIMMAX
            list.Add(new DxfCodePair(9, LIMMAX));
            list.Add(new DxfCodePair(10, this.MaximumDrawingLimits?.X ?? default(double)));
            list.Add(new DxfCodePair(20, this.MaximumDrawingLimits?.Y ?? default(double)));

            // ORTHOMODE
            list.Add(new DxfCodePair(9, ORTHOMODE));
            list.Add(new DxfCodePair(70, BoolShort(this.DrawOrthoganalLines)));

            // REGENMODE
            list.Add(new DxfCodePair(9, REGENMODE));
            list.Add(new DxfCodePair(70, BoolShort(this.UseRegenMode)));

            // FILLMODE
            list.Add(new DxfCodePair(9, FILLMODE));
            list.Add(new DxfCodePair(70, BoolShort(this.FillModeOn)));

            // QTEXTMODE
            list.Add(new DxfCodePair(9, QTEXTMODE));
            list.Add(new DxfCodePair(70, BoolShort(this.UseQuickTextMode)));

            // MIRRTEXT
            list.Add(new DxfCodePair(9, MIRRTEXT));
            list.Add(new DxfCodePair(70, BoolShort(this.MirrorText)));

            // DRAGMODE
            if (Version <= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, DRAGMODE));
                list.Add(new DxfCodePair(70, (short)(this.DragMode)));
            }

            // LTSCALE
            list.Add(new DxfCodePair(9, LTSCALE));
            list.Add(new DxfCodePair(40, (this.LineTypeScale)));

            // OSMODE
            if (Version <= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, OSMODE));
                list.Add(new DxfCodePair(70, (short)(this.ObjectSnapFlags)));
            }

            // ATTMODE
            list.Add(new DxfCodePair(9, ATTMODE));
            list.Add(new DxfCodePair(70, (short)(this.AttributeVisibility)));

            // TEXTSIZE
            list.Add(new DxfCodePair(9, TEXTSIZE));
            list.Add(new DxfCodePair(40, EnsurePositiveOrDefault(0.2)(this.DefaultTextHeight)));

            // TRACEWID
            list.Add(new DxfCodePair(9, TRACEWID));
            list.Add(new DxfCodePair(40, EnsurePositiveOrDefault(0.05)(this.TraceWidth)));

            // TEXTSTYLE
            list.Add(new DxfCodePair(9, TEXTSTYLE));
            list.Add(new DxfCodePair(7, DefaultIfNullOrEmpty("STANDARD")(this.TextStyle)));

            // CLAYER
            list.Add(new DxfCodePair(9, CLAYER));
            list.Add(new DxfCodePair(8, DefaultIfNullOrEmpty("0")(this.CurrentLayer)));

            // CELTYPE
            list.Add(new DxfCodePair(9, CELTYPE));
            list.Add(new DxfCodePair(6, DefaultIfNullOrEmpty("BYLAYER")(this.CurrentEntityLineType)));

            // CECOLOR
            list.Add(new DxfCodePair(9, CECOLOR));
            list.Add(new DxfCodePair(62, DxfColor.GetRawValue(this.CurrentEntityColor)));

            // CELTSCALE
            if (Version >= DxfAcadVersion.R13)
            {
                list.Add(new DxfCodePair(9, CELTSCALE));
                list.Add(new DxfCodePair(40, (this.CurrentEntityLineTypeScale)));
            }

            // DELOBJ
            if (Version >= DxfAcadVersion.R13 && Version <= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, DELOBJ));
                list.Add(new DxfCodePair(70, BoolShort(this.RetainDeletedObjects)));
            }

            // DISPSILH
            if (Version >= DxfAcadVersion.R13)
            {
                list.Add(new DxfCodePair(9, DISPSILH));
                list.Add(new DxfCodePair(70, BoolShort(this.DisplaySilhouetteCurvesInWireframeMode)));
            }

            // DRAGVS
            if (Version >= DxfAcadVersion.R2007 && this.SolidVisualStylePointer != 0)
            {
                list.Add(new DxfCodePair(9, DRAGVS));
                list.Add(new DxfCodePair(349, UIntHandle(this.SolidVisualStylePointer)));
            }

            // DIMSCALE
            list.Add(new DxfCodePair(9, DIMSCALE));
            list.Add(new DxfCodePair(40, (this.DimensioningScaleFactor)));

            // DIMASZ
            list.Add(new DxfCodePair(9, DIMASZ));
            list.Add(new DxfCodePair(40, (this.DimensioningArrowSize)));

            // DIMEXO
            list.Add(new DxfCodePair(9, DIMEXO));
            list.Add(new DxfCodePair(40, (this.DimensionExtensionLineOffset)));

            // DIMDLI
            list.Add(new DxfCodePair(9, DIMDLI));
            list.Add(new DxfCodePair(40, (this.DimensionLineIncrement)));

            // DIMRND
            list.Add(new DxfCodePair(9, DIMRND));
            list.Add(new DxfCodePair(40, (this.DimensionDistanceRoundingValue)));

            // DIMDLE
            list.Add(new DxfCodePair(9, DIMDLE));
            list.Add(new DxfCodePair(40, (this.DimensionLineExtension)));

            // DIMEXE
            list.Add(new DxfCodePair(9, DIMEXE));
            list.Add(new DxfCodePair(40, (this.DimensionExtensionLineExtension)));

            // DIMTP
            list.Add(new DxfCodePair(9, DIMTP));
            list.Add(new DxfCodePair(40, (this.DimensionPlusTolerance)));

            // DIMTM
            list.Add(new DxfCodePair(9, DIMTM));
            list.Add(new DxfCodePair(40, (this.DimensionMinusTolerance)));

            // DIMTXT
            list.Add(new DxfCodePair(9, DIMTXT));
            list.Add(new DxfCodePair(40, (this.DimensioningTextHeight)));

            // DIMCEN
            list.Add(new DxfCodePair(9, DIMCEN));
            list.Add(new DxfCodePair(40, (this.CenterMarkSize)));

            // DIMTSZ
            list.Add(new DxfCodePair(9, DIMTSZ));
            list.Add(new DxfCodePair(40, (this.DimensioningTickSize)));

            // DIMTOL
            list.Add(new DxfCodePair(9, DIMTOL));
            list.Add(new DxfCodePair(70, BoolShort(this.GenerateDimensionTolerances)));

            // DIMLIM
            list.Add(new DxfCodePair(9, DIMLIM));
            list.Add(new DxfCodePair(70, BoolShort(this.GenerateDimensionLimits)));

            // DIMTIH
            list.Add(new DxfCodePair(9, DIMTIH));
            list.Add(new DxfCodePair(70, BoolShort(this.DimensionTextInsideHorizontal)));

            // DIMTOH
            list.Add(new DxfCodePair(9, DIMTOH));
            list.Add(new DxfCodePair(70, BoolShort(this.DimensionTextOutsideHorizontal)));

            // DIMSE1
            if (Version >= DxfAcadVersion.R12)
            {
                list.Add(new DxfCodePair(9, DIMSE1));
                list.Add(new DxfCodePair(70, BoolShort(this.SuppressFirstDimensionExtensionLine)));
            }

            // DIMSE2
            if (Version >= DxfAcadVersion.R12)
            {
                list.Add(new DxfCodePair(9, DIMSE2));
                list.Add(new DxfCodePair(70, BoolShort(this.SuppressSecondDimensionExtensionLine)));
            }

            // DIMTAD
            list.Add(new DxfCodePair(9, DIMTAD));
            list.Add(new DxfCodePair(70, BoolShort(this.TextAboveDimensionLine)));

            // DIMZIN
            list.Add(new DxfCodePair(9, DIMZIN));
            list.Add(new DxfCodePair(70, (short)(this.DimensionUnitZeroSuppression)));

            // DIMBLK
            list.Add(new DxfCodePair(9, DIMBLK));
            list.Add(new DxfCodePair(1, (this.ArrowBlockName)));

            // DIMASO
            list.Add(new DxfCodePair(9, DIMASO));
            list.Add(new DxfCodePair(70, BoolShort(this.CreateAssociativeDimensioning)));

            // DIMSHO
            list.Add(new DxfCodePair(9, DIMSHO));
            list.Add(new DxfCodePair(70, BoolShort(this.RecomputeDimensionsWhileDragging)));

            // DIMPOST
            list.Add(new DxfCodePair(9, DIMPOST));
            list.Add(new DxfCodePair(1, (this.DimensioningSuffix)));

            // DIMAPOST
            list.Add(new DxfCodePair(9, DIMAPOST));
            list.Add(new DxfCodePair(1, (this.AlternateDimensioningSuffix)));

            // DIMALT
            list.Add(new DxfCodePair(9, DIMALT));
            list.Add(new DxfCodePair(70, BoolShort(this.UseAlternateDimensioning)));

            // DIMALTD
            list.Add(new DxfCodePair(9, DIMALTD));
            list.Add(new DxfCodePair(70, (this.AlternateDimensioningDecimalPlaces)));

            // DIMALTF
            list.Add(new DxfCodePair(9, DIMALTF));
            list.Add(new DxfCodePair(40, (this.AlternateDimensioningScaleFactor)));

            // DIMLFAC
            list.Add(new DxfCodePair(9, DIMLFAC));
            list.Add(new DxfCodePair(40, (this.DimensionLinearMeasurementsScaleFactor)));

            // DIMTOFL
            list.Add(new DxfCodePair(9, DIMTOFL));
            list.Add(new DxfCodePair(70, BoolShort(this.ForceDimensionLineExtensionsOutsideIfTextIs)));

            // DIMTVP
            list.Add(new DxfCodePair(9, DIMTVP));
            list.Add(new DxfCodePair(40, (this.DimensionVerticalTextPosition)));

            // DIMTIX
            list.Add(new DxfCodePair(9, DIMTIX));
            list.Add(new DxfCodePair(70, BoolShort(this.ForceDimensionTextInsideExtensions)));

            // DIMSOXD
            list.Add(new DxfCodePair(9, DIMSOXD));
            list.Add(new DxfCodePair(70, BoolShort(this.SuppressOutsideExtensionDimensionLines)));

            // DIMSAH
            list.Add(new DxfCodePair(9, DIMSAH));
            list.Add(new DxfCodePair(70, BoolShort(this.UseSeparateArrowBlocksForDimensions)));

            // DIMBLK1
            list.Add(new DxfCodePair(9, DIMBLK1));
            list.Add(new DxfCodePair(1, (this.FirstArrowBlockName)));

            // DIMBLK2
            list.Add(new DxfCodePair(9, DIMBLK2));
            list.Add(new DxfCodePair(1, (this.SecondArrowBlockName)));

            // DIMSTYLE
            list.Add(new DxfCodePair(9, DIMSTYLE));
            list.Add(new DxfCodePair(2, DefaultIfNullOrEmpty("STANDARD")(this.DimensionStyleName)));

            // DIMCLRD
            if (Version >= DxfAcadVersion.R11)
            {
                list.Add(new DxfCodePair(9, DIMCLRD));
                list.Add(new DxfCodePair(70, DxfColor.GetRawValue(this.DimensionLineColor)));
            }

            // DIMCLRE
            if (Version >= DxfAcadVersion.R11)
            {
                list.Add(new DxfCodePair(9, DIMCLRE));
                list.Add(new DxfCodePair(70, DxfColor.GetRawValue(this.DimensionExtensionLineColor)));
            }

            // DIMCLRT
            if (Version >= DxfAcadVersion.R11)
            {
                list.Add(new DxfCodePair(9, DIMCLRT));
                list.Add(new DxfCodePair(70, DxfColor.GetRawValue(this.DimensionTextColor)));
            }

            // DIMTFAC
            if (Version >= DxfAcadVersion.R12)
            {
                list.Add(new DxfCodePair(9, DIMTFAC));
                list.Add(new DxfCodePair(40, (this.DimensionToleranceDisplayScaleFactor)));
            }

            // DIMGAP
            if (Version >= DxfAcadVersion.R11)
            {
                list.Add(new DxfCodePair(9, DIMGAP));
                list.Add(new DxfCodePair(40, (this.DimensionLineGap)));
            }

            // DIMJUST
            if (Version >= DxfAcadVersion.R13)
            {
                list.Add(new DxfCodePair(9, DIMJUST));
                list.Add(new DxfCodePair(70, (short)(this.DimensionTextJustification)));
            }

            // DIMSD1
            if (Version >= DxfAcadVersion.R13)
            {
                list.Add(new DxfCodePair(9, DIMSD1));
                list.Add(new DxfCodePair(70, BoolShort(this.SuppressFirstDimensionExtensionLine)));
            }

            // DIMSD2
            if (Version >= DxfAcadVersion.R13)
            {
                list.Add(new DxfCodePair(9, DIMSD2));
                list.Add(new DxfCodePair(70, BoolShort(this.SuppressSecondDimensionExtensionLine)));
            }

            // DIMTOLJ
            if (Version >= DxfAcadVersion.R13)
            {
                list.Add(new DxfCodePair(9, DIMTOLJ));
                list.Add(new DxfCodePair(70, (short)(this.DimensionToleranceVerticalJustification)));
            }

            // DIMTZIN
            if (Version >= DxfAcadVersion.R13)
            {
                list.Add(new DxfCodePair(9, DIMTZIN));
                list.Add(new DxfCodePair(70, (short)(this.DimensionToleranceZeroSuppression)));
            }

            // DIMALTZ
            if (Version >= DxfAcadVersion.R13)
            {
                list.Add(new DxfCodePair(9, DIMALTZ));
                list.Add(new DxfCodePair(70, (short)(this.AlternateDimensioningZeroSupression)));
            }

            // DIMALTTZ
            if (Version >= DxfAcadVersion.R13)
            {
                list.Add(new DxfCodePair(9, DIMALTTZ));
                list.Add(new DxfCodePair(70, (short)(this.AlternateDimensioningToleranceZeroSupression)));
            }

            // DIMFIT
            if (Version >= DxfAcadVersion.R13 && Version <= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, DIMFIT));
                list.Add(new DxfCodePair(70, (short)(this.DimensionTextAndArrowPlacement)));
            }

            // DIMUPT
            if (Version >= DxfAcadVersion.R13)
            {
                list.Add(new DxfCodePair(9, DIMUPT));
                list.Add(new DxfCodePair(70, BoolShort(this.DimensionCursorControlsTextPosition)));
            }

            // DIMUNIT
            if (Version >= DxfAcadVersion.R13 && Version <= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, DIMUNIT));
                list.Add(new DxfCodePair(70, (short)(this.DimensionUnitFormat)));
            }

            // DIMDEC
            if (Version >= DxfAcadVersion.R13)
            {
                list.Add(new DxfCodePair(9, DIMDEC));
                list.Add(new DxfCodePair(70, (this.DimensionUnitToleranceDecimalPlaces)));
            }

            // DIMTDEC
            if (Version >= DxfAcadVersion.R13)
            {
                list.Add(new DxfCodePair(9, DIMTDEC));
                list.Add(new DxfCodePair(70, (this.DimensionToleranceDecimalPlaces)));
            }

            // DIMALTU
            if (Version >= DxfAcadVersion.R13)
            {
                list.Add(new DxfCodePair(9, DIMALTU));
                list.Add(new DxfCodePair(70, (short)(this.AlternateDimensioningUnits)));
            }

            // DIMALTTD
            if (Version >= DxfAcadVersion.R13)
            {
                list.Add(new DxfCodePair(9, DIMALTTD));
                list.Add(new DxfCodePair(70, (this.AlternateDimensioningToleranceDecimalPlaces)));
            }

            // DIMTXSTY
            if (Version >= DxfAcadVersion.R13)
            {
                list.Add(new DxfCodePair(9, DIMTXSTY));
                list.Add(new DxfCodePair(7, (this.DimensionTextStyle)));
            }

            // DIMAUNIT
            if (Version >= DxfAcadVersion.R13)
            {
                list.Add(new DxfCodePair(9, DIMAUNIT));
                list.Add(new DxfCodePair(70, (short)(this.DimensioningAngleFormat)));
            }

            // DIMADEC
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, DIMADEC));
                list.Add(new DxfCodePair(70, (this.AngularDimensionPrecision)));
            }

            // DIMALTRND
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, DIMALTRND));
                list.Add(new DxfCodePair(40, (this.AlternateDimensioningUnitRounding)));
            }

            // DIMAZIN
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, DIMAZIN));
                list.Add(new DxfCodePair(70, (short)(this.DimensionAngleZeroSuppression)));
            }

            // DIMDSEP
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, DIMDSEP));
                list.Add(new DxfCodePair(70, (short)(this.DimensionDecimalSeparatorChar)));
            }

            // DIMATFIT
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, DIMATFIT));
                list.Add(new DxfCodePair(70, (short)(this.DimensionTextAndArrowPlacement)));
            }

            // DIMFRAC
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, DIMFRAC));
                list.Add(new DxfCodePair(70, (short)(this.DimensionTextHeightScaleFactor)));
            }

            // DIMLDRBLK
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, DIMLDRBLK));
                list.Add(new DxfCodePair(1, (this.DimensionLeaderBlockName)));
            }

            // DIMLUNIT
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, DIMLUNIT));
                list.Add(new DxfCodePair(70, (short)(this.DimensionNonAngularUnits)));
            }

            // DIMLWD
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, DIMLWD));
                list.Add(new DxfCodePair(70, DxfLineWeight.GetRawValue(this.DimensionLineWeight)));
            }

            // DIMLWE
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, DIMLWE));
                list.Add(new DxfCodePair(70, DxfLineWeight.GetRawValue(this.DimensionExtensionLineWeight)));
            }

            // DIMTMOVE
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, DIMTMOVE));
                list.Add(new DxfCodePair(70, (short)(this.DimensionTextMovementRule)));
            }

            // DIMFXL
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, DIMFXL));
                list.Add(new DxfCodePair(40, (this.DimensionLineFixedLength)));
            }

            // DIMFXLON
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, DIMFXLON));
                list.Add(new DxfCodePair(70, BoolShort(this.DimensionLineFixedLengthOn)));
            }

            // DIMJOGANG
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, DIMJOGANG));
                list.Add(new DxfCodePair(40, (this.DimensionTransverseSegmentAngleInJoggedRadius)));
            }

            // DIMTFILL
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, DIMTFILL));
                list.Add(new DxfCodePair(70, (short)(this.DimensionTextBackgroundColorMode)));
            }

            // DIMTFILLCLR
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, DIMTFILLCLR));
                list.Add(new DxfCodePair(70, DxfColor.GetRawValue(this.DxfDimensionTextBackgroundCustomColor)));
            }

            // DIMARCSYM
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, DIMARCSYM));
                list.Add(new DxfCodePair(70, (short)(this.DimensionArcSymbolDisplayMode)));
            }

            // DIMLTYPE
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, DIMLTYPE));
                list.Add(new DxfCodePair(6, (this.DimensionLineType)));
            }

            // DIMLTEX1
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, DIMLTEX1));
                list.Add(new DxfCodePair(6, (this.DimensionFirstExtensionLineType)));
            }

            // DIMLTEX2
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, DIMLTEX2));
                list.Add(new DxfCodePair(6, (this.DimensionSecondExtensionLineType)));
            }

            // DIMTXTDIRECTION
            if (Version >= DxfAcadVersion.R2010)
            {
                list.Add(new DxfCodePair(9, DIMTXTDIRECTION));
                list.Add(new DxfCodePair(70, (short)(this.DimensionTextDirection)));
            }

            // LUNITS
            list.Add(new DxfCodePair(9, LUNITS));
            list.Add(new DxfCodePair(70, (short)(this.UnitFormat)));

            // LUPREC
            list.Add(new DxfCodePair(9, LUPREC));
            list.Add(new DxfCodePair(70, (this.UnitPrecision)));

            // SKETCHINC
            list.Add(new DxfCodePair(9, SKETCHINC));
            list.Add(new DxfCodePair(40, (this.SketchRecordIncrement)));

            // FILLETRAD
            list.Add(new DxfCodePair(9, FILLETRAD));
            list.Add(new DxfCodePair(40, (this.FilletRadius)));

            // AUNITS
            list.Add(new DxfCodePair(9, AUNITS));
            list.Add(new DxfCodePair(70, (short)(this.AngleUnitFormat)));

            // AUPREC
            list.Add(new DxfCodePair(9, AUPREC));
            list.Add(new DxfCodePair(70, (this.AngleUnitPrecision)));

            // MENU
            list.Add(new DxfCodePair(9, MENU));
            list.Add(new DxfCodePair(1, DefaultIfNullOrEmpty(".")(this.FileName)));

            // ELEVATION
            list.Add(new DxfCodePair(9, ELEVATION));
            list.Add(new DxfCodePair(40, (this.Elevation)));

            // PELEVATION
            if (Version >= DxfAcadVersion.R11)
            {
                list.Add(new DxfCodePair(9, PELEVATION));
                list.Add(new DxfCodePair(40, (this.PaperspaceElevation)));
            }

            // THICKNESS
            list.Add(new DxfCodePair(9, THICKNESS));
            list.Add(new DxfCodePair(40, (this.Thickness)));

            // LIMCHECK
            list.Add(new DxfCodePair(9, LIMCHECK));
            list.Add(new DxfCodePair(70, BoolShort(this.UseLimitsChecking)));

            // BLIPMODE
            if (Version <= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, BLIPMODE));
                list.Add(new DxfCodePair(70, BoolShort(this.BlipMode)));
            }

            // CHAMFERA
            list.Add(new DxfCodePair(9, CHAMFERA));
            list.Add(new DxfCodePair(40, (this.FirstChamferDistance)));

            // CHAMFERB
            list.Add(new DxfCodePair(9, CHAMFERB));
            list.Add(new DxfCodePair(40, (this.SecondChamferDistance)));

            // CHAMFERC
            if (Version >= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, CHAMFERC));
                list.Add(new DxfCodePair(40, (this.ChamferLength)));
            }

            // CHAMFERD
            if (Version >= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, CHAMFERD));
                list.Add(new DxfCodePair(40, (this.ChamferAngle)));
            }

            // SKPOLY
            list.Add(new DxfCodePair(9, SKPOLY));
            list.Add(new DxfCodePair(70, (short)(this.PolylineSketchMode)));

            // TDCREATE
            list.Add(new DxfCodePair(9, TDCREATE));
            list.Add(new DxfCodePair(40, DateDouble(this.CreationDate)));

            // TDUCREATE
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, TDUCREATE));
                list.Add(new DxfCodePair(40, DateDouble(this.CreationDateUniversal)));
            }

            // TDUPDATE
            list.Add(new DxfCodePair(9, TDUPDATE));
            list.Add(new DxfCodePair(40, DateDouble(this.UpdateDate)));

            // TDUUPDATE
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, TDUUPDATE));
                list.Add(new DxfCodePair(40, DateDouble(this.UpdateDateUniversal)));
            }

            // TDINDWG
            list.Add(new DxfCodePair(9, TDINDWG));
            list.Add(new DxfCodePair(40, TimeSpanDouble(this.TimeInDrawing)));

            // TDUSRTIMER
            list.Add(new DxfCodePair(9, TDUSRTIMER));
            list.Add(new DxfCodePair(40, TimeSpanDouble(this.UserElapsedTimer)));

            // USRTIMER
            list.Add(new DxfCodePair(9, USRTIMER));
            list.Add(new DxfCodePair(70, BoolShort(this.UserTimerOn)));

            // ANGBASE
            list.Add(new DxfCodePair(9, ANGBASE));
            list.Add(new DxfCodePair(50, (this.AngleZeroDirection)));

            // ANGDIR
            list.Add(new DxfCodePair(9, ANGDIR));
            list.Add(new DxfCodePair(70, (short)(this.AngleDirection)));

            // PDMODE
            list.Add(new DxfCodePair(9, PDMODE));
            list.Add(new DxfCodePair(70, (short)(this.PointDisplayMode)));

            // PDSIZE
            list.Add(new DxfCodePair(9, PDSIZE));
            list.Add(new DxfCodePair(40, (this.PointDisplaySize)));

            // PLINEWID
            list.Add(new DxfCodePair(9, PLINEWID));
            list.Add(new DxfCodePair(40, (this.DefaultPolylineWidth)));

            // COORDS
            if (Version <= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, COORDS));
                list.Add(new DxfCodePair(70, (short)(this.CoordinateDisplay)));
            }

            // SPLFRAME
            if (Version <= DxfAcadVersion.R2013)
            {
                list.Add(new DxfCodePair(9, SPLFRAME));
                list.Add(new DxfCodePair(70, BoolShort(this.DisplaySplinePolygonControl)));
            }

            // SPLINETYPE
            list.Add(new DxfCodePair(9, SPLINETYPE));
            list.Add(new DxfCodePair(70, (short)(this.PEditSplineCurveType)));

            // SPLINESEGS
            list.Add(new DxfCodePair(9, SPLINESEGS));
            list.Add(new DxfCodePair(70, (this.LineSegmentsPerSplinePatch)));

            // ATTDIA
            if (Version <= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, ATTDIA));
                list.Add(new DxfCodePair(70, BoolShort(this.ShowAttributeEntryDialogs)));
            }

            // ATTREQ
            if (Version <= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, ATTREQ));
                list.Add(new DxfCodePair(70, BoolShort(this.PromptForAttributeOnInsert)));
            }

            // HANDLING
            if (Version <= DxfAcadVersion.R12)
            {
                list.Add(new DxfCodePair(9, HANDLING));
                list.Add(new DxfCodePair(70, BoolShort(this.HandlesEnabled)));
            }

            // HANDSEED
            list.Add(new DxfCodePair(9, HANDSEED));
            list.Add(new DxfCodePair(5, UIntHandle(this.NextAvailableHandle)));

            // SURFTAB1
            list.Add(new DxfCodePair(9, SURFTAB1));
            list.Add(new DxfCodePair(70, (this.MeshTabulationsInFirstDirection)));

            // SURFTAB2
            list.Add(new DxfCodePair(9, SURFTAB2));
            list.Add(new DxfCodePair(70, (this.MeshTabulationsInSecondDirection)));

            // SURFTYPE
            list.Add(new DxfCodePair(9, SURFTYPE));
            list.Add(new DxfCodePair(70, (short)(this.PEditSmoothSurfaceType)));

            // SURFU
            list.Add(new DxfCodePair(9, SURFU));
            list.Add(new DxfCodePair(70, (this.PEditSmoothMDensith)));

            // SURFV
            list.Add(new DxfCodePair(9, SURFV));
            list.Add(new DxfCodePair(70, (this.PEditSmoothNDensith)));

            // UCSBASE
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, UCSBASE));
                list.Add(new DxfCodePair(2, (this.UCSDefinitionName)));
            }

            // UCSNAME
            list.Add(new DxfCodePair(9, UCSNAME));
            list.Add(new DxfCodePair(2, (this.UCSName)));

            // UCSORG
            list.Add(new DxfCodePair(9, UCSORG));
            list.Add(new DxfCodePair(10, this.UCSOrigin?.X ?? default(double)));
            list.Add(new DxfCodePair(20, this.UCSOrigin?.Y ?? default(double)));
            list.Add(new DxfCodePair(30, this.UCSOrigin?.Z ?? default(double)));

            // UCSXDIR
            list.Add(new DxfCodePair(9, UCSXDIR));
            list.Add(new DxfCodePair(10, this.UCSXAxis?.X ?? default(double)));
            list.Add(new DxfCodePair(20, this.UCSXAxis?.Y ?? default(double)));
            list.Add(new DxfCodePair(30, this.UCSXAxis?.Z ?? default(double)));

            // UCSYDIR
            list.Add(new DxfCodePair(9, UCSYDIR));
            list.Add(new DxfCodePair(10, this.UCSYAxis?.X ?? default(double)));
            list.Add(new DxfCodePair(20, this.UCSYAxis?.Y ?? default(double)));
            list.Add(new DxfCodePair(30, this.UCSYAxis?.Z ?? default(double)));

            // UCSORTHOREF
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, UCSORTHOREF));
                list.Add(new DxfCodePair(2, (this.OrthoUCSReference)));
            }

            // UCSORTHOVIEW
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, UCSORTHOVIEW));
                list.Add(new DxfCodePair(70, (short)(this.OrthgraphicViewType)));
            }

            // UCSORGTOP
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, UCSORGTOP));
                list.Add(new DxfCodePair(10, this.UCSOriginTop?.X ?? default(double)));
                list.Add(new DxfCodePair(20, this.UCSOriginTop?.Y ?? default(double)));
                list.Add(new DxfCodePair(30, this.UCSOriginTop?.Z ?? default(double)));
            }

            // UCSORGBOTTOM
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, UCSORGBOTTOM));
                list.Add(new DxfCodePair(10, this.UCSOriginBottom?.X ?? default(double)));
                list.Add(new DxfCodePair(20, this.UCSOriginBottom?.Y ?? default(double)));
                list.Add(new DxfCodePair(30, this.UCSOriginBottom?.Z ?? default(double)));
            }

            // UCSORGLEFT
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, UCSORGLEFT));
                list.Add(new DxfCodePair(10, this.UCSOriginLeft?.X ?? default(double)));
                list.Add(new DxfCodePair(20, this.UCSOriginLeft?.Y ?? default(double)));
                list.Add(new DxfCodePair(30, this.UCSOriginLeft?.Z ?? default(double)));
            }

            // UCSORGRIGHT
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, UCSORGRIGHT));
                list.Add(new DxfCodePair(10, this.UCSOriginRight?.X ?? default(double)));
                list.Add(new DxfCodePair(20, this.UCSOriginRight?.Y ?? default(double)));
                list.Add(new DxfCodePair(30, this.UCSOriginRight?.Z ?? default(double)));
            }

            // UCSORGFRONT
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, UCSORGFRONT));
                list.Add(new DxfCodePair(10, this.UCSOriginFront?.X ?? default(double)));
                list.Add(new DxfCodePair(20, this.UCSOriginFront?.Y ?? default(double)));
                list.Add(new DxfCodePair(30, this.UCSOriginFront?.Z ?? default(double)));
            }

            // UCSORGBACK
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, UCSORGBACK));
                list.Add(new DxfCodePair(10, this.UCSOriginBack?.X ?? default(double)));
                list.Add(new DxfCodePair(20, this.UCSOriginBack?.Y ?? default(double)));
                list.Add(new DxfCodePair(30, this.UCSOriginBack?.Z ?? default(double)));
            }

            // PUCSBASE
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, PUCSBASE));
                list.Add(new DxfCodePair(2, (this.PaperspaceUCSDefinitionName)));
            }

            // PUCSNAME
            if (Version >= DxfAcadVersion.R11)
            {
                list.Add(new DxfCodePair(9, PUCSNAME));
                list.Add(new DxfCodePair(2, (this.PaperspaceUCSName)));
            }

            // PUCSORG
            if (Version >= DxfAcadVersion.R11)
            {
                list.Add(new DxfCodePair(9, PUCSORG));
                list.Add(new DxfCodePair(10, this.PaperspaceUCSOrigin?.X ?? default(double)));
                list.Add(new DxfCodePair(20, this.PaperspaceUCSOrigin?.Y ?? default(double)));
                list.Add(new DxfCodePair(30, this.PaperspaceUCSOrigin?.Z ?? default(double)));
            }

            // PUCSXDIR
            if (Version >= DxfAcadVersion.R11)
            {
                list.Add(new DxfCodePair(9, PUCSXDIR));
                list.Add(new DxfCodePair(10, this.PaperspaceXAxis?.X ?? default(double)));
                list.Add(new DxfCodePair(20, this.PaperspaceXAxis?.Y ?? default(double)));
                list.Add(new DxfCodePair(30, this.PaperspaceXAxis?.Z ?? default(double)));
            }

            // PUCSYDIR
            if (Version >= DxfAcadVersion.R11)
            {
                list.Add(new DxfCodePair(9, PUCSYDIR));
                list.Add(new DxfCodePair(10, this.PaperspaceYAxis?.X ?? default(double)));
                list.Add(new DxfCodePair(20, this.PaperspaceYAxis?.Y ?? default(double)));
                list.Add(new DxfCodePair(30, this.PaperspaceYAxis?.Z ?? default(double)));
            }

            // PUCSORTHOREF
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, PUCSORTHOREF));
                list.Add(new DxfCodePair(2, (this.PaperspaceOrthoUCSReference)));
            }

            // PUCSORTHOVIEW
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, PUCSORTHOVIEW));
                list.Add(new DxfCodePair(70, (short)(this.PaperspaceOrthographicViewType)));
            }

            // PUCSORGTOP
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, PUCSORGTOP));
                list.Add(new DxfCodePair(10, this.PaperspaceUCSOriginTop?.X ?? default(double)));
                list.Add(new DxfCodePair(20, this.PaperspaceUCSOriginTop?.Y ?? default(double)));
                list.Add(new DxfCodePair(30, this.PaperspaceUCSOriginTop?.Z ?? default(double)));
            }

            // PUCSORGBOTTOM
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, PUCSORGBOTTOM));
                list.Add(new DxfCodePair(10, this.PaperspaceUCSOriginBottom?.X ?? default(double)));
                list.Add(new DxfCodePair(20, this.PaperspaceUCSOriginBottom?.Y ?? default(double)));
                list.Add(new DxfCodePair(30, this.PaperspaceUCSOriginBottom?.Z ?? default(double)));
            }

            // PUCSORGLEFT
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, PUCSORGLEFT));
                list.Add(new DxfCodePair(10, this.PaperspaceUCSOriginLeft?.X ?? default(double)));
                list.Add(new DxfCodePair(20, this.PaperspaceUCSOriginLeft?.Y ?? default(double)));
                list.Add(new DxfCodePair(30, this.PaperspaceUCSOriginLeft?.Z ?? default(double)));
            }

            // PUCSORGRIGHT
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, PUCSORGRIGHT));
                list.Add(new DxfCodePair(10, this.PaperspaceUCSOriginRight?.X ?? default(double)));
                list.Add(new DxfCodePair(20, this.PaperspaceUCSOriginRight?.Y ?? default(double)));
                list.Add(new DxfCodePair(30, this.PaperspaceUCSOriginRight?.Z ?? default(double)));
            }

            // PUCSORGFRONT
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, PUCSORGFRONT));
                list.Add(new DxfCodePair(10, this.PaperspaceUCSOriginFront?.X ?? default(double)));
                list.Add(new DxfCodePair(20, this.PaperspaceUCSOriginFront?.Y ?? default(double)));
                list.Add(new DxfCodePair(30, this.PaperspaceUCSOriginFront?.Z ?? default(double)));
            }

            // PUCSORGBACK
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, PUCSORGBACK));
                list.Add(new DxfCodePair(10, this.PaperspaceUCSOriginBack?.X ?? default(double)));
                list.Add(new DxfCodePair(20, this.PaperspaceUCSOriginBack?.Y ?? default(double)));
                list.Add(new DxfCodePair(30, this.PaperspaceUCSOriginBack?.Z ?? default(double)));
            }

            // USERI1
            list.Add(new DxfCodePair(9, USERI1));
            list.Add(new DxfCodePair(70, (this.UserInt1)));

            // USERI2
            list.Add(new DxfCodePair(9, USERI2));
            list.Add(new DxfCodePair(70, (this.UserInt2)));

            // USERI3
            list.Add(new DxfCodePair(9, USERI3));
            list.Add(new DxfCodePair(70, (this.UserInt3)));

            // USERI4
            list.Add(new DxfCodePair(9, USERI4));
            list.Add(new DxfCodePair(70, (this.UserInt4)));

            // USERI5
            list.Add(new DxfCodePair(9, USERI5));
            list.Add(new DxfCodePair(70, (this.UserInt5)));

            // USERR1
            list.Add(new DxfCodePair(9, USERR1));
            list.Add(new DxfCodePair(40, (this.UserReal1)));

            // USERR2
            list.Add(new DxfCodePair(9, USERR2));
            list.Add(new DxfCodePair(40, (this.UserReal2)));

            // USERR3
            list.Add(new DxfCodePair(9, USERR3));
            list.Add(new DxfCodePair(40, (this.UserReal3)));

            // USERR4
            list.Add(new DxfCodePair(9, USERR4));
            list.Add(new DxfCodePair(40, (this.UserReal4)));

            // USERR5
            list.Add(new DxfCodePair(9, USERR5));
            list.Add(new DxfCodePair(40, (this.UserReal5)));

            // WORLDVIEW
            list.Add(new DxfCodePair(9, WORLDVIEW));
            list.Add(new DxfCodePair(70, BoolShort(this.SetUCSToWCSInDViewOrVPoint)));

            // SHADEDGE
            if (Version >= DxfAcadVersion.R11)
            {
                list.Add(new DxfCodePair(9, SHADEDGE));
                list.Add(new DxfCodePair(70, (short)(this.EdgeShading)));
            }

            // SHADEDIF
            if (Version >= DxfAcadVersion.R11)
            {
                list.Add(new DxfCodePair(9, SHADEDIF));
                list.Add(new DxfCodePair(70, (this.PercentAmbientToDiffuse)));
            }

            // TILEMODE
            if (Version >= DxfAcadVersion.R11)
            {
                list.Add(new DxfCodePair(9, TILEMODE));
                list.Add(new DxfCodePair(70, BoolShort(this.PreviousReleaseTileCompatability)));
            }

            // MAXACTVP
            if (Version >= DxfAcadVersion.R11)
            {
                list.Add(new DxfCodePair(9, MAXACTVP));
                list.Add(new DxfCodePair(70, (this.MaximumActiveViewports)));
            }

            // PINSBASE
            if (Version >= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, PINSBASE));
                list.Add(new DxfCodePair(10, this.PaperspaceInsertionBase?.X ?? default(double)));
                list.Add(new DxfCodePair(20, this.PaperspaceInsertionBase?.Y ?? default(double)));
                list.Add(new DxfCodePair(30, this.PaperspaceInsertionBase?.Z ?? default(double)));
            }

            // PLIMCHECK
            if (Version >= DxfAcadVersion.R11)
            {
                list.Add(new DxfCodePair(9, PLIMCHECK));
                list.Add(new DxfCodePair(70, BoolShort(this.LimitCheckingInPaperspace)));
            }

            // PEXTMIN
            if (Version >= DxfAcadVersion.R11)
            {
                list.Add(new DxfCodePair(9, PEXTMIN));
                list.Add(new DxfCodePair(10, this.PaperspaceMinimumDrawingExtents?.X ?? default(double)));
                list.Add(new DxfCodePair(20, this.PaperspaceMinimumDrawingExtents?.Y ?? default(double)));
                list.Add(new DxfCodePair(30, this.PaperspaceMinimumDrawingExtents?.Z ?? default(double)));
            }

            // PEXTMAX
            if (Version >= DxfAcadVersion.R11)
            {
                list.Add(new DxfCodePair(9, PEXTMAX));
                list.Add(new DxfCodePair(10, this.PaperspaceMaximumDrawingExtents?.X ?? default(double)));
                list.Add(new DxfCodePair(20, this.PaperspaceMaximumDrawingExtents?.Y ?? default(double)));
                list.Add(new DxfCodePair(30, this.PaperspaceMaximumDrawingExtents?.Z ?? default(double)));
            }

            // PLIMMIN
            if (Version >= DxfAcadVersion.R11)
            {
                list.Add(new DxfCodePair(9, PLIMMIN));
                list.Add(new DxfCodePair(10, this.PaperspaceMinimumDrawingLimits?.X ?? default(double)));
                list.Add(new DxfCodePair(20, this.PaperspaceMinimumDrawingLimits?.Y ?? default(double)));
            }

            // PLIMMAX
            if (Version >= DxfAcadVersion.R11)
            {
                list.Add(new DxfCodePair(9, PLIMMAX));
                list.Add(new DxfCodePair(10, this.PaperspaceMaximumDrawingLimits?.X ?? default(double)));
                list.Add(new DxfCodePair(20, this.PaperspaceMaximumDrawingLimits?.Y ?? default(double)));
            }

            // UNITMODE
            if (Version >= DxfAcadVersion.R11)
            {
                list.Add(new DxfCodePair(9, UNITMODE));
                list.Add(new DxfCodePair(70, BoolShort(this.DisplayFractionsInInput)));
            }

            // VISRETAIN
            if (Version >= DxfAcadVersion.R12)
            {
                list.Add(new DxfCodePair(9, VISRETAIN));
                list.Add(new DxfCodePair(70, BoolShort(this.RetainXRefDependentVisibilitySettings)));
            }

            // PLINEGEN
            if (Version >= DxfAcadVersion.R11)
            {
                list.Add(new DxfCodePair(9, PLINEGEN));
                list.Add(new DxfCodePair(70, BoolShort(this.IsPolylineContinuousAroundVerticies)));
            }

            // PSLTSCALE
            if (Version >= DxfAcadVersion.R11)
            {
                list.Add(new DxfCodePair(9, PSLTSCALE));
                list.Add(new DxfCodePair(70, BoolShort(this.ScaleLineTypesInPaperspace)));
            }

            // TREEDEPTH
            if (Version >= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, TREEDEPTH));
                list.Add(new DxfCodePair(70, (this.SpacialIndexMaxDepth)));
            }

            // PICKSTYLE
            if (Version >= DxfAcadVersion.R13 && Version <= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, PICKSTYLE));
                list.Add(new DxfCodePair(70, (short)(this.PickStyle)));
            }

            // CMLSTYLE
            if (Version == DxfAcadVersion.R13)
            {
                list.Add(new DxfCodePair(9, CMLSTYLE));
                list.Add(new DxfCodePair(7, (this.CurrentMultilineStyle)));
            }

            // CMLSTYLE
            if (Version >= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, CMLSTYLE));
                list.Add(new DxfCodePair(2, (this.CurrentMultilineStyle)));
            }

            // CMLJUST
            if (Version >= DxfAcadVersion.R13)
            {
                list.Add(new DxfCodePair(9, CMLJUST));
                list.Add(new DxfCodePair(70, (short)(this.CurrentMultilineJustification)));
            }

            // CMLSCALE
            if (Version >= DxfAcadVersion.R13)
            {
                list.Add(new DxfCodePair(9, CMLSCALE));
                list.Add(new DxfCodePair(40, (this.CurrentMultilineScale)));
            }

            // PROXYGRAPHICS
            if (Version >= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, PROXYGRAPHICS));
                list.Add(new DxfCodePair(70, BoolShort(this.SaveProxyGraphics)));
            }

            // MEASUREMENT
            if (Version >= DxfAcadVersion.R14)
            {
                list.Add(new DxfCodePair(9, MEASUREMENT));
                list.Add(new DxfCodePair(70, (short)(this.DrawingUnits)));
            }

            // CELWEIGHT
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, CELWEIGHT));
                list.Add(new DxfCodePair(370, DxfLineWeight.GetRawValue(this.NewObjectLineWeight)));
            }

            // ENDCAPS
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, ENDCAPS));
                list.Add(new DxfCodePair(280, (short)(this.EndCapSetting)));
            }

            // JOINSTYLE
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, JOINSTYLE));
                list.Add(new DxfCodePair(280, (short)(this.LineweightJointSetting)));
            }

            // LWDISPLAY
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, LWDISPLAY));
                list.Add(new DxfCodePair(290, (this.DisplayLinewieghtInModelAndLayoutTab)));
            }

            // INSUNITS
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, INSUNITS));
                list.Add(new DxfCodePair(70, (short)(this.DefaultDrawingUnits)));
            }

            // HYPERLINKBASE
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, HYPERLINKBASE));
                list.Add(new DxfCodePair(1, (this.HyperlinkBase)));
            }

            // STYLESHEET
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, STYLESHEET));
                list.Add(new DxfCodePair(1, (this.Stylesheet)));
            }

            // XEDIT
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, XEDIT));
                list.Add(new DxfCodePair(290, (this.CanUseInPlaceReferenceEditing)));
            }

            // CEPSNID
            if (Version >= DxfAcadVersion.R2000 && this.NewObjectPlotStyleHandle != 0)
            {
                list.Add(new DxfCodePair(9, CEPSNID));
                list.Add(new DxfCodePair(390, UIntHandle(this.NewObjectPlotStyleHandle)));
            }

            // CEPSNTYPE
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, CEPSNTYPE));
                list.Add(new DxfCodePair(380, (short)(this.NewObjectPlotStyle)));
            }

            // PSTYLEMODE
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, PSTYLEMODE));
                list.Add(new DxfCodePair(290, (this.UsesColorDependentPlotStyleTables)));
            }

            // FINGERPRINTGUID
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, FINGERPRINTGUID));
                list.Add(new DxfCodePair(2, GuidString(this.FingerprintGuid)));
            }

            // VERSIONGUID
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, VERSIONGUID));
                list.Add(new DxfCodePair(2, GuidString(this.VersionGuid)));
            }

            // EXTNAMES
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, EXTNAMES));
                list.Add(new DxfCodePair(290, (this.UseACad2000SymbolTableNaming)));
            }

            // PSVPSCALE
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, PSVPSCALE));
                list.Add(new DxfCodePair(40, (this.ViewportViewScaleFactor)));
            }

            // OLESTARTUP
            if (Version >= DxfAcadVersion.R2000)
            {
                list.Add(new DxfCodePair(9, OLESTARTUP));
                list.Add(new DxfCodePair(290, (this.OleStartup)));
            }

            // SORTENTS
            if (Version >= DxfAcadVersion.R2004)
            {
                list.Add(new DxfCodePair(9, SORTENTS));
                list.Add(new DxfCodePair(280, (short)(this.ObjectSortingMethodsFlags)));
            }

            // INDEXCTL
            if (Version >= DxfAcadVersion.R2004)
            {
                list.Add(new DxfCodePair(9, INDEXCTL));
                list.Add(new DxfCodePair(280, (short)(this.LayerAndSpatialIndexSaveMode)));
            }

            // HIDETEXT
            if (Version >= DxfAcadVersion.R2004)
            {
                list.Add(new DxfCodePair(9, HIDETEXT));
                list.Add(new DxfCodePair(280, BoolShort(this.HideTextObjectsWhenProducintHiddenView)));
            }

            // XCLIPFRAME
            if (Version >= DxfAcadVersion.R2004 && Version <= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, XCLIPFRAME));
                list.Add(new DxfCodePair(290, EnumBool<DxfXrefClippingBoundaryVisibility>(this.IsXRefClippingBoundaryVisible)));
            }

            // XCLIPFRAME
            if (Version >= DxfAcadVersion.R2010)
            {
                list.Add(new DxfCodePair(9, XCLIPFRAME));
                list.Add(new DxfCodePair(280, (short)(this.IsXRefClippingBoundaryVisible)));
            }

            // HALOGAP
            if (Version >= DxfAcadVersion.R2004)
            {
                list.Add(new DxfCodePair(9, HALOGAP));
                list.Add(new DxfCodePair(280, (short)(this.HaloGapPercent)));
            }

            // OBSCOLOR
            if (Version >= DxfAcadVersion.R2004)
            {
                list.Add(new DxfCodePair(9, OBSCOLOR));
                list.Add(new DxfCodePair(70, DxfColor.GetRawValue(this.ObscuredLineColor)));
            }

            // OBSLTYPE
            if (Version >= DxfAcadVersion.R2004)
            {
                list.Add(new DxfCodePair(9, OBSLTYPE));
                list.Add(new DxfCodePair(280, (short)(this.ObscuredLineTypeStyle)));
            }

            // INTERSECTIONDISPLAY
            if (Version >= DxfAcadVersion.R2004)
            {
                list.Add(new DxfCodePair(9, INTERSECTIONDISPLAY));
                list.Add(new DxfCodePair(280, BoolShort(this.DisplayIntersectionPolylines)));
            }

            // INTERSECTIONCOLOR
            if (Version >= DxfAcadVersion.R2004)
            {
                list.Add(new DxfCodePair(9, INTERSECTIONCOLOR));
                list.Add(new DxfCodePair(70, DxfColor.GetRawValue(this.IntersectionPolylineColor)));
            }

            // DIMASSOC
            if (Version >= DxfAcadVersion.R2004)
            {
                list.Add(new DxfCodePair(9, DIMASSOC));
                list.Add(new DxfCodePair(280, (short)(this.DimensionObjectAssociativity)));
            }

            // PROJECTNAME
            if (Version >= DxfAcadVersion.R2004)
            {
                list.Add(new DxfCodePair(9, PROJECTNAME));
                list.Add(new DxfCodePair(1, (this.ProjectName)));
            }

            // CAMERADISPLAY
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, CAMERADISPLAY));
                list.Add(new DxfCodePair(290, (this.UseCameraDisplay)));
            }

            // LENSLENGTH
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, LENSLENGTH));
                list.Add(new DxfCodePair(40, (this.LensLength)));
            }

            // CAMERAHEIGHT
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, CAMERAHEIGHT));
                list.Add(new DxfCodePair(40, (this.CameraHeight)));
            }

            // STEPSPERSEC
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, STEPSPERSEC));
                list.Add(new DxfCodePair(40, (this.StepsPerSecondInWalkOrFlyMode)));
            }

            // STEPSIZE
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, STEPSIZE));
                list.Add(new DxfCodePair(40, (this.StepSizeInWalkOrFlyMode)));
            }

            // 3DDWFPREC
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, _3DDWFPREC));
                list.Add(new DxfCodePair(40, (double)(this.Dwf3DPrecision)));
            }

            // PSOLWIDTH
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, PSOLWIDTH));
                list.Add(new DxfCodePair(40, (this.LastPolySolidWidth)));
            }

            // PSOLHEIGHT
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, PSOLHEIGHT));
                list.Add(new DxfCodePair(40, (this.LastPolySolidHeight)));
            }

            // LOFTANG1
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, LOFTANG1));
                list.Add(new DxfCodePair(40, (this.LoftOperationFirstDraftAngle)));
            }

            // LOFTANG2
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, LOFTANG2));
                list.Add(new DxfCodePair(40, (this.LoftOperationSecondDraftAngle)));
            }

            // LOFTMAG1
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, LOFTMAG1));
                list.Add(new DxfCodePair(40, (this.LoftOperationFirstMagnitude)));
            }

            // LOFTMAG2
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, LOFTMAG2));
                list.Add(new DxfCodePair(40, (this.LoftOperationSecondMagnitude)));
            }

            // LOFTPARAM
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, LOFTPARAM));
                list.Add(new DxfCodePair(70, (short)(this.LoftFlags)));
            }

            // LOFTNORMALS
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, LOFTNORMALS));
                list.Add(new DxfCodePair(280, (short)(this.LoftedObjectNormalMode)));
            }

            // LATITUDE
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, LATITUDE));
                list.Add(new DxfCodePair(40, (this.Latitude)));
            }

            // LONGITUDE
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, LONGITUDE));
                list.Add(new DxfCodePair(40, (this.Longitude)));
            }

            // NORTHDIRECTION
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, NORTHDIRECTION));
                list.Add(new DxfCodePair(40, (this.AngleBetweenYAxisAndNorth)));
            }

            // TIMEZONE
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, TIMEZONE));
                list.Add(new DxfCodePair(70, (short)(this.TimeZone)));
            }

            // LIGHTGLYPHDISPLAY
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, LIGHTGLYPHDISPLAY));
                list.Add(new DxfCodePair(280, BoolShort(this.UseLightGlyphDisplay)));
            }

            // TILEMODELIGHTSYNCH
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, TILEMODELIGHTSYNCH));
                list.Add(new DxfCodePair(280, BoolShort(this.UseTileModeLightSync)));
            }

            // CMATERIAL
            if (Version >= DxfAcadVersion.R2007 && this.CurrentMaterialHandle != 0u)
            {
                list.Add(new DxfCodePair(9, CMATERIAL));
                list.Add(new DxfCodePair(347, UIntHandle(this.CurrentMaterialHandle)));
            }

            // SOLIDHIST
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, SOLIDHIST));
                list.Add(new DxfCodePair(280, BoolShort(this.NewSolidsContainHistory)));
            }

            // SHOWHIST
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, SHOWHIST));
                list.Add(new DxfCodePair(280, (short)(this.SolidHistoryMode)));
            }

            // DWFFRAME
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, DWFFRAME));
                list.Add(new DxfCodePair(280, (short)(this.DwfUnderlayFrameMode)));
            }

            // DGNFRAME
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, DGNFRAME));
                list.Add(new DxfCodePair(280, (short)(this.DgnUnderlayFrameMode)));
            }

            // REALWORLDSCALE
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, REALWORLDSCALE));
                list.Add(new DxfCodePair(290, (this.UseRealWorldScale)));
            }

            // INTERFERECOLOR
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, INTERFERECOLOR));
                list.Add(new DxfCodePair(62, DxfColor.GetRawValue(this.InterferenceObjectColor)));
            }

            // INTERFEREOBJVS
            if (Version >= DxfAcadVersion.R2007 && this.InterferenceObjectVisualStylePointer != 0u)
            {
                list.Add(new DxfCodePair(9, INTERFEREOBJVS));
                list.Add(new DxfCodePair(345, UIntHandle(this.InterferenceObjectVisualStylePointer)));
            }

            // INTERFEREVPVS
            if (Version >= DxfAcadVersion.R2007 && this.InterferenceViewPortVisualStylePointer != 0u)
            {
                list.Add(new DxfCodePair(9, INTERFEREVPVS));
                list.Add(new DxfCodePair(346, UIntHandle(this.InterferenceViewPortVisualStylePointer)));
            }

            // CSHADOW
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, CSHADOW));
                list.Add(new DxfCodePair(280, (short)(this.ShadowMode)));
            }

            // SHADOWPLANELOCATION
            if (Version >= DxfAcadVersion.R2007)
            {
                list.Add(new DxfCodePair(9, SHADOWPLANELOCATION));
                list.Add(new DxfCodePair(40, (this.ShadowPlaneZOffset)));
            }

            // AXISMODE
            if (Version <= DxfAcadVersion.R10)
            {
                list.Add(new DxfCodePair(9, AXISMODE));
                list.Add(new DxfCodePair(70, BoolShort(this.AxisOn)));
            }

            // AXISUNIT
            if (Version <= DxfAcadVersion.R10)
            {
                list.Add(new DxfCodePair(9, AXISUNIT));
                list.Add(new DxfCodePair(10, this.AxisTickSpacing?.X ?? default(double)));
                list.Add(new DxfCodePair(20, this.AxisTickSpacing?.Y ?? default(double)));
            }

            // FASTZOOM
            if (Version <= DxfAcadVersion.R10)
            {
                list.Add(new DxfCodePair(9, FASTZOOM));
                list.Add(new DxfCodePair(70, BoolShort(this.FastZoom)));
            }

            // GRIDMODE
            if (Version <= DxfAcadVersion.R10)
            {
                list.Add(new DxfCodePair(9, GRIDMODE));
                list.Add(new DxfCodePair(70, BoolShort(this.GridOn)));
            }

            // GRIDUNIT
            if (Version <= DxfAcadVersion.R10)
            {
                list.Add(new DxfCodePair(9, GRIDUNIT));
                list.Add(new DxfCodePair(10, this.GridSpacing?.X ?? default(double)));
                list.Add(new DxfCodePair(20, this.GridSpacing?.Y ?? default(double)));
            }

            // SNAPANG
            if (Version <= DxfAcadVersion.R10)
            {
                list.Add(new DxfCodePair(9, SNAPANG));
                list.Add(new DxfCodePair(50, (this.SnapRotationAngle)));
            }

            // SNAPBASE
            if (Version <= DxfAcadVersion.R10)
            {
                list.Add(new DxfCodePair(9, SNAPBASE));
                list.Add(new DxfCodePair(10, this.SnapBasePoint?.X ?? default(double)));
                list.Add(new DxfCodePair(20, this.SnapBasePoint?.Y ?? default(double)));
            }

            // SNAPISOPAIR
            if (Version <= DxfAcadVersion.R10)
            {
                list.Add(new DxfCodePair(9, SNAPISOPAIR));
                list.Add(new DxfCodePair(70, (short)(this.SnapIsometricPlane)));
            }

            // SNAPMODE
            if (Version <= DxfAcadVersion.R10)
            {
                list.Add(new DxfCodePair(9, SNAPMODE));
                list.Add(new DxfCodePair(70, BoolShort(this.SnapOn)));
            }

            // SNAPSTYLE
            if (Version <= DxfAcadVersion.R10)
            {
                list.Add(new DxfCodePair(9, SNAPSTYLE));
                list.Add(new DxfCodePair(70, (short)(this.SnapStyle)));
            }

            // SNAPUNIT
            if (Version <= DxfAcadVersion.R10)
            {
                list.Add(new DxfCodePair(9, SNAPUNIT));
                list.Add(new DxfCodePair(10, this.SnapSpacing?.X ?? default(double)));
                list.Add(new DxfCodePair(20, this.SnapSpacing?.Y ?? default(double)));
            }

            // VIEWCTR
            if (Version <= DxfAcadVersion.R10)
            {
                list.Add(new DxfCodePair(9, VIEWCTR));
                list.Add(new DxfCodePair(10, this.ViewCenter?.X ?? default(double)));
                list.Add(new DxfCodePair(20, this.ViewCenter?.Y ?? default(double)));
            }

            // VIEWDIR
            if (Version <= DxfAcadVersion.R10)
            {
                list.Add(new DxfCodePair(9, VIEWDIR));
                list.Add(new DxfCodePair(10, this.ViewDirection?.X ?? default(double)));
                list.Add(new DxfCodePair(20, this.ViewDirection?.Y ?? default(double)));
                list.Add(new DxfCodePair(30, this.ViewDirection?.Z ?? default(double)));
            }

            // VIEWSIZE
            if (Version <= DxfAcadVersion.R10)
            {
                list.Add(new DxfCodePair(9, VIEWSIZE));
                list.Add(new DxfCodePair(40, (this.ViewHeight)));
            }
        }

        internal void SetHeaderVariable(string keyName, DxfCodePair pair)
        {
            switch (keyName)
            {
                case ACADVER:
                    EnsureCode(pair, 1);
                    this.Version = VersionConverter(pair.StringValue);
                    break;
                case ACADMAINTVER:
                    EnsureCode(pair, 70);
                    this.MaintenenceVersion = (pair.ShortValue);
                    break;
                case DWGCODEPAGE:
                    EnsureCode(pair, 3);
                    this.DrawingCodePage = (pair.StringValue);
                    break;
                case LASTSAVEDBY:
                    EnsureCode(pair, 1);
                    this.LastSavedBy = (pair.StringValue);
                    break;
                case REQUIREDVERSIONS:
                    EnsureCode(pair, 160);
                    this.RequiredVersions = (pair.LongValue);
                    break;
                case INSBASE:
                    SetPoint(pair, this.InsertionBase);
                    break;
                case EXTMIN:
                    SetPoint(pair, this.MinimumDrawingExtents);
                    break;
                case EXTMAX:
                    SetPoint(pair, this.MaximumDrawingExtents);
                    break;
                case LIMMIN:
                    SetPoint(pair, this.MinimumDrawingLimits);
                    break;
                case LIMMAX:
                    SetPoint(pair, this.MaximumDrawingLimits);
                    break;
                case ORTHOMODE:
                    EnsureCode(pair, 70);
                    this.DrawOrthoganalLines = BoolShort(pair.ShortValue);
                    break;
                case REGENMODE:
                    EnsureCode(pair, 70);
                    this.UseRegenMode = BoolShort(pair.ShortValue);
                    break;
                case FILLMODE:
                    EnsureCode(pair, 70);
                    this.FillModeOn = BoolShort(pair.ShortValue);
                    break;
                case QTEXTMODE:
                    EnsureCode(pair, 70);
                    this.UseQuickTextMode = BoolShort(pair.ShortValue);
                    break;
                case MIRRTEXT:
                    EnsureCode(pair, 70);
                    this.MirrorText = BoolShort(pair.ShortValue);
                    break;
                case DRAGMODE:
                    EnsureCode(pair, 70);
                    this.DragMode = (DxfDragMode)(pair.ShortValue);
                    break;
                case LTSCALE:
                    EnsureCode(pair, 40);
                    this.LineTypeScale = (pair.DoubleValue);
                    break;
                case OSMODE:
                    EnsureCode(pair, 70);
                    this.ObjectSnapFlags = (int)(pair.ShortValue);
                    break;
                case ATTMODE:
                    EnsureCode(pair, 70);
                    this.AttributeVisibility = (DxfAttributeVisibility)(pair.ShortValue);
                    break;
                case TEXTSIZE:
                    EnsureCode(pair, 40);
                    this.DefaultTextHeight = (pair.DoubleValue);
                    break;
                case TRACEWID:
                    EnsureCode(pair, 40);
                    this.TraceWidth = (pair.DoubleValue);
                    break;
                case TEXTSTYLE:
                    EnsureCode(pair, 7);
                    this.TextStyle = (pair.StringValue);
                    break;
                case CLAYER:
                    EnsureCode(pair, 8);
                    this.CurrentLayer = (pair.StringValue);
                    break;
                case CELTYPE:
                    EnsureCode(pair, 6);
                    this.CurrentEntityLineType = (pair.StringValue);
                    break;
                case CECOLOR:
                    EnsureCode(pair, 62);
                    this.CurrentEntityColor = DxfColor.FromRawValue(pair.ShortValue);
                    break;
                case CELTSCALE:
                    EnsureCode(pair, 40);
                    this.CurrentEntityLineTypeScale = (pair.DoubleValue);
                    break;
                case DELOBJ:
                    EnsureCode(pair, 70);
                    this.RetainDeletedObjects = BoolShort(pair.ShortValue);
                    break;
                case DISPSILH:
                    EnsureCode(pair, 70);
                    this.DisplaySilhouetteCurvesInWireframeMode = BoolShort(pair.ShortValue);
                    break;
                case DRAGVS:
                    EnsureCode(pair, 349);
                    this.SolidVisualStylePointer = UIntHandle(pair.StringValue);
                    break;
                case DIMSCALE:
                    EnsureCode(pair, 40);
                    this.DimensioningScaleFactor = (pair.DoubleValue);
                    break;
                case DIMASZ:
                    EnsureCode(pair, 40);
                    this.DimensioningArrowSize = (pair.DoubleValue);
                    break;
                case DIMEXO:
                    EnsureCode(pair, 40);
                    this.DimensionExtensionLineOffset = (pair.DoubleValue);
                    break;
                case DIMDLI:
                    EnsureCode(pair, 40);
                    this.DimensionLineIncrement = (pair.DoubleValue);
                    break;
                case DIMRND:
                    EnsureCode(pair, 40);
                    this.DimensionDistanceRoundingValue = (pair.DoubleValue);
                    break;
                case DIMDLE:
                    EnsureCode(pair, 40);
                    this.DimensionLineExtension = (pair.DoubleValue);
                    break;
                case DIMEXE:
                    EnsureCode(pair, 40);
                    this.DimensionExtensionLineExtension = (pair.DoubleValue);
                    break;
                case DIMTP:
                    EnsureCode(pair, 40);
                    this.DimensionPlusTolerance = (pair.DoubleValue);
                    break;
                case DIMTM:
                    EnsureCode(pair, 40);
                    this.DimensionMinusTolerance = (pair.DoubleValue);
                    break;
                case DIMTXT:
                    EnsureCode(pair, 40);
                    this.DimensioningTextHeight = (pair.DoubleValue);
                    break;
                case DIMCEN:
                    EnsureCode(pair, 40);
                    this.CenterMarkSize = (pair.DoubleValue);
                    break;
                case DIMTSZ:
                    EnsureCode(pair, 40);
                    this.DimensioningTickSize = (pair.DoubleValue);
                    break;
                case DIMTOL:
                    EnsureCode(pair, 70);
                    this.GenerateDimensionTolerances = BoolShort(pair.ShortValue);
                    break;
                case DIMLIM:
                    EnsureCode(pair, 70);
                    this.GenerateDimensionLimits = BoolShort(pair.ShortValue);
                    break;
                case DIMTIH:
                    EnsureCode(pair, 70);
                    this.DimensionTextInsideHorizontal = BoolShort(pair.ShortValue);
                    break;
                case DIMTOH:
                    EnsureCode(pair, 70);
                    this.DimensionTextOutsideHorizontal = BoolShort(pair.ShortValue);
                    break;
                case DIMSE1:
                    EnsureCode(pair, 70);
                    this.SuppressFirstDimensionExtensionLine = BoolShort(pair.ShortValue);
                    break;
                case DIMSE2:
                    EnsureCode(pair, 70);
                    this.SuppressSecondDimensionExtensionLine = BoolShort(pair.ShortValue);
                    break;
                case DIMTAD:
                    EnsureCode(pair, 70);
                    this.TextAboveDimensionLine = BoolShort(pair.ShortValue);
                    break;
                case DIMZIN:
                    EnsureCode(pair, 70);
                    this.DimensionUnitZeroSuppression = (DxfUnitZeroSuppression)(pair.ShortValue);
                    break;
                case DIMBLK:
                    EnsureCode(pair, 1);
                    this.ArrowBlockName = (pair.StringValue);
                    break;
                case DIMASO:
                    EnsureCode(pair, 70);
                    this.CreateAssociativeDimensioning = BoolShort(pair.ShortValue);
                    break;
                case DIMSHO:
                    EnsureCode(pair, 70);
                    this.RecomputeDimensionsWhileDragging = BoolShort(pair.ShortValue);
                    break;
                case DIMPOST:
                    EnsureCode(pair, 1);
                    this.DimensioningSuffix = (pair.StringValue);
                    break;
                case DIMAPOST:
                    EnsureCode(pair, 1);
                    this.AlternateDimensioningSuffix = (pair.StringValue);
                    break;
                case DIMALT:
                    EnsureCode(pair, 70);
                    this.UseAlternateDimensioning = BoolShort(pair.ShortValue);
                    break;
                case DIMALTD:
                    EnsureCode(pair, 70);
                    this.AlternateDimensioningDecimalPlaces = (pair.ShortValue);
                    break;
                case DIMALTF:
                    EnsureCode(pair, 40);
                    this.AlternateDimensioningScaleFactor = (pair.DoubleValue);
                    break;
                case DIMLFAC:
                    EnsureCode(pair, 40);
                    this.DimensionLinearMeasurementsScaleFactor = (pair.DoubleValue);
                    break;
                case DIMTOFL:
                    EnsureCode(pair, 70);
                    this.ForceDimensionLineExtensionsOutsideIfTextIs = BoolShort(pair.ShortValue);
                    break;
                case DIMTVP:
                    EnsureCode(pair, 40);
                    this.DimensionVerticalTextPosition = (pair.DoubleValue);
                    break;
                case DIMTIX:
                    EnsureCode(pair, 70);
                    this.ForceDimensionTextInsideExtensions = BoolShort(pair.ShortValue);
                    break;
                case DIMSOXD:
                    EnsureCode(pair, 70);
                    this.SuppressOutsideExtensionDimensionLines = BoolShort(pair.ShortValue);
                    break;
                case DIMSAH:
                    EnsureCode(pair, 70);
                    this.UseSeparateArrowBlocksForDimensions = BoolShort(pair.ShortValue);
                    break;
                case DIMBLK1:
                    EnsureCode(pair, 1);
                    this.FirstArrowBlockName = (pair.StringValue);
                    break;
                case DIMBLK2:
                    EnsureCode(pair, 1);
                    this.SecondArrowBlockName = (pair.StringValue);
                    break;
                case DIMSTYLE:
                    EnsureCode(pair, 2);
                    this.DimensionStyleName = (pair.StringValue);
                    break;
                case DIMCLRD:
                    EnsureCode(pair, 70);
                    this.DimensionLineColor = DxfColor.FromRawValue(pair.ShortValue);
                    break;
                case DIMCLRE:
                    EnsureCode(pair, 70);
                    this.DimensionExtensionLineColor = DxfColor.FromRawValue(pair.ShortValue);
                    break;
                case DIMCLRT:
                    EnsureCode(pair, 70);
                    this.DimensionTextColor = DxfColor.FromRawValue(pair.ShortValue);
                    break;
                case DIMTFAC:
                    EnsureCode(pair, 40);
                    this.DimensionToleranceDisplayScaleFactor = (pair.DoubleValue);
                    break;
                case DIMGAP:
                    EnsureCode(pair, 40);
                    this.DimensionLineGap = (pair.DoubleValue);
                    break;
                case DIMJUST:
                    EnsureCode(pair, 70);
                    this.DimensionTextJustification = (DxfDimensionTextJustification)(pair.ShortValue);
                    break;
                case DIMSD1:
                    EnsureCode(pair, 70);
                    this.SuppressFirstDimensionExtensionLine = BoolShort(pair.ShortValue);
                    break;
                case DIMSD2:
                    EnsureCode(pair, 70);
                    this.SuppressSecondDimensionExtensionLine = BoolShort(pair.ShortValue);
                    break;
                case DIMTOLJ:
                    EnsureCode(pair, 70);
                    this.DimensionToleranceVerticalJustification = (DxfJustification)(pair.ShortValue);
                    break;
                case DIMTZIN:
                    EnsureCode(pair, 70);
                    this.DimensionToleranceZeroSuppression = (DxfUnitZeroSuppression)(pair.ShortValue);
                    break;
                case DIMALTZ:
                    EnsureCode(pair, 70);
                    this.AlternateDimensioningZeroSupression = (DxfUnitZeroSuppression)(pair.ShortValue);
                    break;
                case DIMALTTZ:
                    EnsureCode(pair, 70);
                    this.AlternateDimensioningToleranceZeroSupression = (DxfUnitZeroSuppression)(pair.ShortValue);
                    break;
                case DIMFIT:
                    EnsureCode(pair, 70);
                    this.DimensionTextAndArrowPlacement = (DxfDimensionFit)(pair.ShortValue);
                    break;
                case DIMUPT:
                    EnsureCode(pair, 70);
                    this.DimensionCursorControlsTextPosition = BoolShort(pair.ShortValue);
                    break;
                case DIMUNIT:
                    EnsureCode(pair, 70);
                    this.DimensionUnitFormat = (DxfUnitFormat)(pair.ShortValue);
                    break;
                case DIMDEC:
                    EnsureCode(pair, 70);
                    this.DimensionUnitToleranceDecimalPlaces = (pair.ShortValue);
                    break;
                case DIMTDEC:
                    EnsureCode(pair, 70);
                    this.DimensionToleranceDecimalPlaces = (pair.ShortValue);
                    break;
                case DIMALTU:
                    EnsureCode(pair, 70);
                    this.AlternateDimensioningUnits = (DxfUnitFormat)(pair.ShortValue);
                    break;
                case DIMALTTD:
                    EnsureCode(pair, 70);
                    this.AlternateDimensioningToleranceDecimalPlaces = (pair.ShortValue);
                    break;
                case DIMTXSTY:
                    EnsureCode(pair, 7);
                    this.DimensionTextStyle = (pair.StringValue);
                    break;
                case DIMAUNIT:
                    EnsureCode(pair, 70);
                    this.DimensioningAngleFormat = (DxfAngleFormat)(pair.ShortValue);
                    break;
                case DIMADEC:
                    EnsureCode(pair, 70);
                    this.AngularDimensionPrecision = (pair.ShortValue);
                    break;
                case DIMALTRND:
                    EnsureCode(pair, 40);
                    this.AlternateDimensioningUnitRounding = (pair.DoubleValue);
                    break;
                case DIMAZIN:
                    EnsureCode(pair, 70);
                    this.DimensionAngleZeroSuppression = (DxfUnitZeroSuppression)(pair.ShortValue);
                    break;
                case DIMDSEP:
                    EnsureCode(pair, 70);
                    this.DimensionDecimalSeparatorChar = (char)(pair.ShortValue);
                    break;
                case DIMATFIT:
                    EnsureCode(pair, 70);
                    this.DimensionTextAndArrowPlacement = (DxfDimensionFit)(pair.ShortValue);
                    break;
                case DIMFRAC:
                    EnsureCode(pair, 70);
                    this.DimensionTextHeightScaleFactor = (DxfDimensionFractionFormat)(pair.ShortValue);
                    break;
                case DIMLDRBLK:
                    EnsureCode(pair, 1);
                    this.DimensionLeaderBlockName = (pair.StringValue);
                    break;
                case DIMLUNIT:
                    EnsureCode(pair, 70);
                    this.DimensionNonAngularUnits = (DxfNonAngularUnits)(pair.ShortValue);
                    break;
                case DIMLWD:
                    EnsureCode(pair, 70);
                    this.DimensionLineWeight = DxfLineWeight.FromRawValue(pair.ShortValue);
                    break;
                case DIMLWE:
                    EnsureCode(pair, 70);
                    this.DimensionExtensionLineWeight = DxfLineWeight.FromRawValue(pair.ShortValue);
                    break;
                case DIMTMOVE:
                    EnsureCode(pair, 70);
                    this.DimensionTextMovementRule = (DxfDimensionTextMovementRule)(pair.ShortValue);
                    break;
                case DIMFXL:
                    EnsureCode(pair, 40);
                    this.DimensionLineFixedLength = (pair.DoubleValue);
                    break;
                case DIMFXLON:
                    EnsureCode(pair, 70);
                    this.DimensionLineFixedLengthOn = BoolShort(pair.ShortValue);
                    break;
                case DIMJOGANG:
                    EnsureCode(pair, 40);
                    this.DimensionTransverseSegmentAngleInJoggedRadius = (pair.DoubleValue);
                    break;
                case DIMTFILL:
                    EnsureCode(pair, 70);
                    this.DimensionTextBackgroundColorMode = (DxfDimensionTextBackgroundColorMode)(pair.ShortValue);
                    break;
                case DIMTFILLCLR:
                    EnsureCode(pair, 70);
                    this.DxfDimensionTextBackgroundCustomColor = DxfColor.FromRawValue(pair.ShortValue);
                    break;
                case DIMARCSYM:
                    EnsureCode(pair, 70);
                    this.DimensionArcSymbolDisplayMode = (DxfDimensionArcSymbolDisplayMode)(pair.ShortValue);
                    break;
                case DIMLTYPE:
                    EnsureCode(pair, 6);
                    this.DimensionLineType = (pair.StringValue);
                    break;
                case DIMLTEX1:
                    EnsureCode(pair, 6);
                    this.DimensionFirstExtensionLineType = (pair.StringValue);
                    break;
                case DIMLTEX2:
                    EnsureCode(pair, 6);
                    this.DimensionSecondExtensionLineType = (pair.StringValue);
                    break;
                case DIMTXTDIRECTION:
                    EnsureCode(pair, 70);
                    this.DimensionTextDirection = (DxfTextDirection)(pair.ShortValue);
                    break;
                case LUNITS:
                    EnsureCode(pair, 70);
                    this.UnitFormat = (DxfUnitFormat)(pair.ShortValue);
                    break;
                case LUPREC:
                    EnsureCode(pair, 70);
                    this.UnitPrecision = (pair.ShortValue);
                    break;
                case SKETCHINC:
                    EnsureCode(pair, 40);
                    this.SketchRecordIncrement = (pair.DoubleValue);
                    break;
                case FILLETRAD:
                    EnsureCode(pair, 40);
                    this.FilletRadius = (pair.DoubleValue);
                    break;
                case AUNITS:
                    EnsureCode(pair, 70);
                    this.AngleUnitFormat = (DxfAngleFormat)(pair.ShortValue);
                    break;
                case AUPREC:
                    EnsureCode(pair, 70);
                    this.AngleUnitPrecision = (pair.ShortValue);
                    break;
                case MENU:
                    EnsureCode(pair, 1);
                    this.FileName = (pair.StringValue);
                    break;
                case ELEVATION:
                    EnsureCode(pair, 40);
                    this.Elevation = (pair.DoubleValue);
                    break;
                case PELEVATION:
                    EnsureCode(pair, 40);
                    this.PaperspaceElevation = (pair.DoubleValue);
                    break;
                case THICKNESS:
                    EnsureCode(pair, 40);
                    this.Thickness = (pair.DoubleValue);
                    break;
                case LIMCHECK:
                    EnsureCode(pair, 70);
                    this.UseLimitsChecking = BoolShort(pair.ShortValue);
                    break;
                case BLIPMODE:
                    EnsureCode(pair, 70);
                    this.BlipMode = BoolShort(pair.ShortValue);
                    break;
                case CHAMFERA:
                    EnsureCode(pair, 40);
                    this.FirstChamferDistance = (pair.DoubleValue);
                    break;
                case CHAMFERB:
                    EnsureCode(pair, 40);
                    this.SecondChamferDistance = (pair.DoubleValue);
                    break;
                case CHAMFERC:
                    EnsureCode(pair, 40);
                    this.ChamferLength = (pair.DoubleValue);
                    break;
                case CHAMFERD:
                    EnsureCode(pair, 40);
                    this.ChamferAngle = (pair.DoubleValue);
                    break;
                case SKPOLY:
                    EnsureCode(pair, 70);
                    this.PolylineSketchMode = (DxfPolySketchMode)(pair.ShortValue);
                    break;
                case TDCREATE:
                    EnsureCode(pair, 40);
                    this.CreationDate = DateDouble(pair.DoubleValue);
                    break;
                case TDUCREATE:
                    EnsureCode(pair, 40);
                    this.CreationDateUniversal = DateDouble(pair.DoubleValue);
                    break;
                case TDUPDATE:
                    EnsureCode(pair, 40);
                    this.UpdateDate = DateDouble(pair.DoubleValue);
                    break;
                case TDUUPDATE:
                    EnsureCode(pair, 40);
                    this.UpdateDateUniversal = DateDouble(pair.DoubleValue);
                    break;
                case TDINDWG:
                    EnsureCode(pair, 40);
                    this.TimeInDrawing = TimeSpanDouble(pair.DoubleValue);
                    break;
                case TDUSRTIMER:
                    EnsureCode(pair, 40);
                    this.UserElapsedTimer = TimeSpanDouble(pair.DoubleValue);
                    break;
                case USRTIMER:
                    EnsureCode(pair, 70);
                    this.UserTimerOn = BoolShort(pair.ShortValue);
                    break;
                case ANGBASE:
                    EnsureCode(pair, 50);
                    this.AngleZeroDirection = (pair.DoubleValue);
                    break;
                case ANGDIR:
                    EnsureCode(pair, 70);
                    this.AngleDirection = (DxfAngleDirection)(pair.ShortValue);
                    break;
                case PDMODE:
                    EnsureCode(pair, 70);
                    this.PointDisplayMode = (int)(pair.ShortValue);
                    break;
                case PDSIZE:
                    EnsureCode(pair, 40);
                    this.PointDisplaySize = (pair.DoubleValue);
                    break;
                case PLINEWID:
                    EnsureCode(pair, 40);
                    this.DefaultPolylineWidth = (pair.DoubleValue);
                    break;
                case COORDS:
                    EnsureCode(pair, 70);
                    this.CoordinateDisplay = (DxfCoordinateDisplay)(pair.ShortValue);
                    break;
                case SPLFRAME:
                    EnsureCode(pair, 70);
                    this.DisplaySplinePolygonControl = BoolShort(pair.ShortValue);
                    break;
                case SPLINETYPE:
                    EnsureCode(pair, 70);
                    this.PEditSplineCurveType = (DxfPolylineCurvedAndSmoothSurfaceType)(pair.ShortValue);
                    break;
                case SPLINESEGS:
                    EnsureCode(pair, 70);
                    this.LineSegmentsPerSplinePatch = (pair.ShortValue);
                    break;
                case ATTDIA:
                    EnsureCode(pair, 70);
                    this.ShowAttributeEntryDialogs = BoolShort(pair.ShortValue);
                    break;
                case ATTREQ:
                    EnsureCode(pair, 70);
                    this.PromptForAttributeOnInsert = BoolShort(pair.ShortValue);
                    break;
                case HANDLING:
                    EnsureCode(pair, 70);
                    this.HandlesEnabled = BoolShort(pair.ShortValue);
                    break;
                case HANDSEED:
                    EnsureCode(pair, 5);
                    this.NextAvailableHandle = UIntHandle(pair.StringValue);
                    break;
                case SURFTAB1:
                    EnsureCode(pair, 70);
                    this.MeshTabulationsInFirstDirection = (pair.ShortValue);
                    break;
                case SURFTAB2:
                    EnsureCode(pair, 70);
                    this.MeshTabulationsInSecondDirection = (pair.ShortValue);
                    break;
                case SURFTYPE:
                    EnsureCode(pair, 70);
                    this.PEditSmoothSurfaceType = (DxfPolylineCurvedAndSmoothSurfaceType)(pair.ShortValue);
                    break;
                case SURFU:
                    EnsureCode(pair, 70);
                    this.PEditSmoothMDensith = (pair.ShortValue);
                    break;
                case SURFV:
                    EnsureCode(pair, 70);
                    this.PEditSmoothNDensith = (pair.ShortValue);
                    break;
                case UCSBASE:
                    EnsureCode(pair, 2);
                    this.UCSDefinitionName = (pair.StringValue);
                    break;
                case UCSNAME:
                    EnsureCode(pair, 2);
                    this.UCSName = (pair.StringValue);
                    break;
                case UCSORG:
                    SetPoint(pair, this.UCSOrigin);
                    break;
                case UCSXDIR:
                    SetPoint(pair, this.UCSXAxis);
                    break;
                case UCSYDIR:
                    SetPoint(pair, this.UCSYAxis);
                    break;
                case UCSORTHOREF:
                    EnsureCode(pair, 2);
                    this.OrthoUCSReference = (pair.StringValue);
                    break;
                case UCSORTHOVIEW:
                    EnsureCode(pair, 70);
                    this.OrthgraphicViewType = (DxfOrthographicViewType)(pair.ShortValue);
                    break;
                case UCSORGTOP:
                    SetPoint(pair, this.UCSOriginTop);
                    break;
                case UCSORGBOTTOM:
                    SetPoint(pair, this.UCSOriginBottom);
                    break;
                case UCSORGLEFT:
                    SetPoint(pair, this.UCSOriginLeft);
                    break;
                case UCSORGRIGHT:
                    SetPoint(pair, this.UCSOriginRight);
                    break;
                case UCSORGFRONT:
                    SetPoint(pair, this.UCSOriginFront);
                    break;
                case UCSORGBACK:
                    SetPoint(pair, this.UCSOriginBack);
                    break;
                case PUCSBASE:
                    EnsureCode(pair, 2);
                    this.PaperspaceUCSDefinitionName = (pair.StringValue);
                    break;
                case PUCSNAME:
                    EnsureCode(pair, 2);
                    this.PaperspaceUCSName = (pair.StringValue);
                    break;
                case PUCSORG:
                    SetPoint(pair, this.PaperspaceUCSOrigin);
                    break;
                case PUCSXDIR:
                    SetPoint(pair, this.PaperspaceXAxis);
                    break;
                case PUCSYDIR:
                    SetPoint(pair, this.PaperspaceYAxis);
                    break;
                case PUCSORTHOREF:
                    EnsureCode(pair, 2);
                    this.PaperspaceOrthoUCSReference = (pair.StringValue);
                    break;
                case PUCSORTHOVIEW:
                    EnsureCode(pair, 70);
                    this.PaperspaceOrthographicViewType = (DxfOrthographicViewType)(pair.ShortValue);
                    break;
                case PUCSORGTOP:
                    SetPoint(pair, this.PaperspaceUCSOriginTop);
                    break;
                case PUCSORGBOTTOM:
                    SetPoint(pair, this.PaperspaceUCSOriginBottom);
                    break;
                case PUCSORGLEFT:
                    SetPoint(pair, this.PaperspaceUCSOriginLeft);
                    break;
                case PUCSORGRIGHT:
                    SetPoint(pair, this.PaperspaceUCSOriginRight);
                    break;
                case PUCSORGFRONT:
                    SetPoint(pair, this.PaperspaceUCSOriginFront);
                    break;
                case PUCSORGBACK:
                    SetPoint(pair, this.PaperspaceUCSOriginBack);
                    break;
                case USERI1:
                    EnsureCode(pair, 70);
                    this.UserInt1 = (pair.ShortValue);
                    break;
                case USERI2:
                    EnsureCode(pair, 70);
                    this.UserInt2 = (pair.ShortValue);
                    break;
                case USERI3:
                    EnsureCode(pair, 70);
                    this.UserInt3 = (pair.ShortValue);
                    break;
                case USERI4:
                    EnsureCode(pair, 70);
                    this.UserInt4 = (pair.ShortValue);
                    break;
                case USERI5:
                    EnsureCode(pair, 70);
                    this.UserInt5 = (pair.ShortValue);
                    break;
                case USERR1:
                    EnsureCode(pair, 40);
                    this.UserReal1 = (pair.DoubleValue);
                    break;
                case USERR2:
                    EnsureCode(pair, 40);
                    this.UserReal2 = (pair.DoubleValue);
                    break;
                case USERR3:
                    EnsureCode(pair, 40);
                    this.UserReal3 = (pair.DoubleValue);
                    break;
                case USERR4:
                    EnsureCode(pair, 40);
                    this.UserReal4 = (pair.DoubleValue);
                    break;
                case USERR5:
                    EnsureCode(pair, 40);
                    this.UserReal5 = (pair.DoubleValue);
                    break;
                case WORLDVIEW:
                    EnsureCode(pair, 70);
                    this.SetUCSToWCSInDViewOrVPoint = BoolShort(pair.ShortValue);
                    break;
                case SHADEDGE:
                    EnsureCode(pair, 70);
                    this.EdgeShading = (DxfShadeEdgeMode)(pair.ShortValue);
                    break;
                case SHADEDIF:
                    EnsureCode(pair, 70);
                    this.PercentAmbientToDiffuse = (pair.ShortValue);
                    break;
                case TILEMODE:
                    EnsureCode(pair, 70);
                    this.PreviousReleaseTileCompatability = BoolShort(pair.ShortValue);
                    break;
                case MAXACTVP:
                    EnsureCode(pair, 70);
                    this.MaximumActiveViewports = (pair.ShortValue);
                    break;
                case PINSBASE:
                    SetPoint(pair, this.PaperspaceInsertionBase);
                    break;
                case PLIMCHECK:
                    EnsureCode(pair, 70);
                    this.LimitCheckingInPaperspace = BoolShort(pair.ShortValue);
                    break;
                case PEXTMIN:
                    SetPoint(pair, this.PaperspaceMinimumDrawingExtents);
                    break;
                case PEXTMAX:
                    SetPoint(pair, this.PaperspaceMaximumDrawingExtents);
                    break;
                case PLIMMIN:
                    SetPoint(pair, this.PaperspaceMinimumDrawingLimits);
                    break;
                case PLIMMAX:
                    SetPoint(pair, this.PaperspaceMaximumDrawingLimits);
                    break;
                case UNITMODE:
                    EnsureCode(pair, 70);
                    this.DisplayFractionsInInput = BoolShort(pair.ShortValue);
                    break;
                case VISRETAIN:
                    EnsureCode(pair, 70);
                    this.RetainXRefDependentVisibilitySettings = BoolShort(pair.ShortValue);
                    break;
                case PLINEGEN:
                    EnsureCode(pair, 70);
                    this.IsPolylineContinuousAroundVerticies = BoolShort(pair.ShortValue);
                    break;
                case PSLTSCALE:
                    EnsureCode(pair, 70);
                    this.ScaleLineTypesInPaperspace = BoolShort(pair.ShortValue);
                    break;
                case TREEDEPTH:
                    EnsureCode(pair, 70);
                    this.SpacialIndexMaxDepth = (pair.ShortValue);
                    break;
                case PICKSTYLE:
                    EnsureCode(pair, 70);
                    this.PickStyle = (DxfPickStyle)(pair.ShortValue);
                    break;
                case CMLSTYLE:
                    switch (pair.Code)
                    {
                        case 7:
                            this.CurrentMultilineStyle = (pair.StringValue);
                            break;
                        case 2:
                            this.CurrentMultilineStyle = (pair.StringValue);
                            break;
                        default:
                            Debug.Assert(false, $"Expected code [7, 2], got {pair.Code}");
                            break;
                    }
                    break;
                case CMLJUST:
                    EnsureCode(pair, 70);
                    this.CurrentMultilineJustification = (DxfJustification)(pair.ShortValue);
                    break;
                case CMLSCALE:
                    EnsureCode(pair, 40);
                    this.CurrentMultilineScale = (pair.DoubleValue);
                    break;
                case PROXYGRAPHICS:
                    EnsureCode(pair, 70);
                    this.SaveProxyGraphics = BoolShort(pair.ShortValue);
                    break;
                case MEASUREMENT:
                    EnsureCode(pair, 70);
                    this.DrawingUnits = (DxfDrawingUnits)(pair.ShortValue);
                    break;
                case CELWEIGHT:
                    EnsureCode(pair, 370);
                    this.NewObjectLineWeight = DxfLineWeight.FromRawValue(pair.ShortValue);
                    break;
                case ENDCAPS:
                    EnsureCode(pair, 280);
                    this.EndCapSetting = (DxfEndCapSetting)(pair.ShortValue);
                    break;
                case JOINSTYLE:
                    EnsureCode(pair, 280);
                    this.LineweightJointSetting = (DxfJoinStyle)(pair.ShortValue);
                    break;
                case LWDISPLAY:
                    EnsureCode(pair, 290);
                    this.DisplayLinewieghtInModelAndLayoutTab = (pair.BoolValue);
                    break;
                case INSUNITS:
                    EnsureCode(pair, 70);
                    this.DefaultDrawingUnits = (DxfUnits)(pair.ShortValue);
                    break;
                case HYPERLINKBASE:
                    EnsureCode(pair, 1);
                    this.HyperlinkBase = (pair.StringValue);
                    break;
                case STYLESHEET:
                    EnsureCode(pair, 1);
                    this.Stylesheet = (pair.StringValue);
                    break;
                case XEDIT:
                    EnsureCode(pair, 290);
                    this.CanUseInPlaceReferenceEditing = (pair.BoolValue);
                    break;
                case CEPSNID:
                    EnsureCode(pair, 390);
                    this.NewObjectPlotStyleHandle = UIntHandle(pair.StringValue);
                    break;
                case CEPSNTYPE:
                    EnsureCode(pair, 380);
                    this.NewObjectPlotStyle = (DxfPlotStyle)(pair.ShortValue);
                    break;
                case PSTYLEMODE:
                    EnsureCode(pair, 290);
                    this.UsesColorDependentPlotStyleTables = (pair.BoolValue);
                    break;
                case FINGERPRINTGUID:
                    EnsureCode(pair, 2);
                    this.FingerprintGuid = GuidString(pair.StringValue);
                    break;
                case VERSIONGUID:
                    EnsureCode(pair, 2);
                    this.VersionGuid = GuidString(pair.StringValue);
                    break;
                case EXTNAMES:
                    EnsureCode(pair, 290);
                    this.UseACad2000SymbolTableNaming = (pair.BoolValue);
                    break;
                case PSVPSCALE:
                    EnsureCode(pair, 40);
                    this.ViewportViewScaleFactor = (pair.DoubleValue);
                    break;
                case OLESTARTUP:
                    EnsureCode(pair, 290);
                    this.OleStartup = (pair.BoolValue);
                    break;
                case SORTENTS:
                    EnsureCode(pair, 280);
                    this.ObjectSortingMethodsFlags = (int)(pair.ShortValue);
                    break;
                case INDEXCTL:
                    EnsureCode(pair, 280);
                    this.LayerAndSpatialIndexSaveMode = (DxfLayerAndSpatialIndexSaveMode)(pair.ShortValue);
                    break;
                case HIDETEXT:
                    switch (pair.Code)
                    {
                        case 280:
                            this.HideTextObjectsWhenProducintHiddenView = BoolShort(pair.ShortValue);
                            break;
                        case 290:
                            this.HideTextObjectsWhenProducintHiddenView = (pair.BoolValue);
                            break;
                        default:
                            Debug.Assert(false, $"Expected code [280, 290], got {pair.Code}");
                            break;
                    }
                    break;
                case XCLIPFRAME:
                    switch (pair.Code)
                    {
                        case 290:
                            this.IsXRefClippingBoundaryVisible = EnumBool<DxfXrefClippingBoundaryVisibility>(pair.BoolValue);
                            break;
                        case 280:
                            this.IsXRefClippingBoundaryVisible = (DxfXrefClippingBoundaryVisibility)(pair.ShortValue);
                            break;
                        default:
                            Debug.Assert(false, $"Expected code [290, 280], got {pair.Code}");
                            break;
                    }
                    break;
                case HALOGAP:
                    EnsureCode(pair, 280);
                    this.HaloGapPercent = (double)(pair.ShortValue);
                    break;
                case OBSCOLOR:
                    EnsureCode(pair, 70);
                    this.ObscuredLineColor = DxfColor.FromRawValue(pair.ShortValue);
                    break;
                case OBSLTYPE:
                    EnsureCode(pair, 280);
                    this.ObscuredLineTypeStyle = (DxfLineTypeStyle)(pair.ShortValue);
                    break;
                case INTERSECTIONDISPLAY:
                    switch (pair.Code)
                    {
                        case 280:
                            this.DisplayIntersectionPolylines = BoolShort(pair.ShortValue);
                            break;
                        case 290:
                            this.DisplayIntersectionPolylines = (pair.BoolValue);
                            break;
                        default:
                            Debug.Assert(false, $"Expected code [280, 290], got {pair.Code}");
                            break;
                    }
                    break;
                case INTERSECTIONCOLOR:
                    EnsureCode(pair, 70);
                    this.IntersectionPolylineColor = DxfColor.FromRawValue(pair.ShortValue);
                    break;
                case DIMASSOC:
                    EnsureCode(pair, 280);
                    this.DimensionObjectAssociativity = (DxfDimensionAssociativity)(pair.ShortValue);
                    break;
                case PROJECTNAME:
                    EnsureCode(pair, 1);
                    this.ProjectName = (pair.StringValue);
                    break;
                case CAMERADISPLAY:
                    EnsureCode(pair, 290);
                    this.UseCameraDisplay = (pair.BoolValue);
                    break;
                case LENSLENGTH:
                    EnsureCode(pair, 40);
                    this.LensLength = (pair.DoubleValue);
                    break;
                case CAMERAHEIGHT:
                    EnsureCode(pair, 40);
                    this.CameraHeight = (pair.DoubleValue);
                    break;
                case STEPSPERSEC:
                    EnsureCode(pair, 40);
                    this.StepsPerSecondInWalkOrFlyMode = (pair.DoubleValue);
                    break;
                case STEPSIZE:
                    EnsureCode(pair, 40);
                    this.StepSizeInWalkOrFlyMode = (pair.DoubleValue);
                    break;
                case _3DDWFPREC:
                    EnsureCode(pair, 40);
                    this.Dwf3DPrecision = (Dxf3DDwfPrecision)(int)(pair.DoubleValue);
                    break;
                case PSOLWIDTH:
                    EnsureCode(pair, 40);
                    this.LastPolySolidWidth = (pair.DoubleValue);
                    break;
                case PSOLHEIGHT:
                    EnsureCode(pair, 40);
                    this.LastPolySolidHeight = (pair.DoubleValue);
                    break;
                case LOFTANG1:
                    EnsureCode(pair, 40);
                    this.LoftOperationFirstDraftAngle = (pair.DoubleValue);
                    break;
                case LOFTANG2:
                    EnsureCode(pair, 40);
                    this.LoftOperationSecondDraftAngle = (pair.DoubleValue);
                    break;
                case LOFTMAG1:
                    EnsureCode(pair, 40);
                    this.LoftOperationFirstMagnitude = (pair.DoubleValue);
                    break;
                case LOFTMAG2:
                    EnsureCode(pair, 40);
                    this.LoftOperationSecondMagnitude = (pair.DoubleValue);
                    break;
                case LOFTPARAM:
                    EnsureCode(pair, 70);
                    this.LoftFlags = (pair.ShortValue);
                    break;
                case LOFTNORMALS:
                    EnsureCode(pair, 280);
                    this.LoftedObjectNormalMode = (DxfLoftedObjectNormalMode)(pair.ShortValue);
                    break;
                case LATITUDE:
                    EnsureCode(pair, 40);
                    this.Latitude = (pair.DoubleValue);
                    break;
                case LONGITUDE:
                    EnsureCode(pair, 40);
                    this.Longitude = (pair.DoubleValue);
                    break;
                case NORTHDIRECTION:
                    EnsureCode(pair, 40);
                    this.AngleBetweenYAxisAndNorth = (pair.DoubleValue);
                    break;
                case TIMEZONE:
                    EnsureCode(pair, 70);
                    this.TimeZone = (DxfTimeZone)(pair.ShortValue);
                    break;
                case LIGHTGLYPHDISPLAY:
                    EnsureCode(pair, 280);
                    this.UseLightGlyphDisplay = BoolShort(pair.ShortValue);
                    break;
                case TILEMODELIGHTSYNCH:
                    EnsureCode(pair, 280);
                    this.UseTileModeLightSync = BoolShort(pair.ShortValue);
                    break;
                case CMATERIAL:
                    EnsureCode(pair, 347);
                    this.CurrentMaterialHandle = UIntHandle(pair.StringValue);
                    break;
                case SOLIDHIST:
                    EnsureCode(pair, 280);
                    this.NewSolidsContainHistory = BoolShort(pair.ShortValue);
                    break;
                case SHOWHIST:
                    EnsureCode(pair, 280);
                    this.SolidHistoryMode = (DxfSolidHistoryMode)(pair.ShortValue);
                    break;
                case DWFFRAME:
                    EnsureCode(pair, 280);
                    this.DwfUnderlayFrameMode = (DxfUnderlayFrameMode)(pair.ShortValue);
                    break;
                case DGNFRAME:
                    EnsureCode(pair, 280);
                    this.DgnUnderlayFrameMode = (DxfUnderlayFrameMode)(pair.ShortValue);
                    break;
                case REALWORLDSCALE:
                    EnsureCode(pair, 290);
                    this.UseRealWorldScale = (pair.BoolValue);
                    break;
                case INTERFERECOLOR:
                    EnsureCode(pair, 62);
                    this.InterferenceObjectColor = DxfColor.FromRawValue(pair.ShortValue);
                    break;
                case INTERFEREOBJVS:
                    EnsureCode(pair, 345);
                    this.InterferenceObjectVisualStylePointer = UIntHandle(pair.StringValue);
                    break;
                case INTERFEREVPVS:
                    EnsureCode(pair, 346);
                    this.InterferenceViewPortVisualStylePointer = UIntHandle(pair.StringValue);
                    break;
                case CSHADOW:
                    EnsureCode(pair, 280);
                    this.ShadowMode = (DxfShadowMode)(pair.ShortValue);
                    break;
                case SHADOWPLANELOCATION:
                    EnsureCode(pair, 40);
                    this.ShadowPlaneZOffset = (pair.DoubleValue);
                    break;
                case AXISMODE:
                    EnsureCode(pair, 70);
                    this.AxisOn = BoolShort(pair.ShortValue);
                    break;
                case AXISUNIT:
                    SetPoint(pair, this.AxisTickSpacing);
                    break;
                case FASTZOOM:
                    EnsureCode(pair, 70);
                    this.FastZoom = BoolShort(pair.ShortValue);
                    break;
                case GRIDMODE:
                    EnsureCode(pair, 70);
                    this.GridOn = BoolShort(pair.ShortValue);
                    break;
                case GRIDUNIT:
                    SetPoint(pair, this.GridSpacing);
                    break;
                case SNAPANG:
                    EnsureCode(pair, 50);
                    this.SnapRotationAngle = (pair.DoubleValue);
                    break;
                case SNAPBASE:
                    SetPoint(pair, this.SnapBasePoint);
                    break;
                case SNAPISOPAIR:
                    EnsureCode(pair, 70);
                    this.SnapIsometricPlane = (DxfSnapIsometricPlane)(pair.ShortValue);
                    break;
                case SNAPMODE:
                    EnsureCode(pair, 70);
                    this.SnapOn = BoolShort(pair.ShortValue);
                    break;
                case SNAPSTYLE:
                    EnsureCode(pair, 70);
                    this.SnapStyle = (DxfSnapStyle)(pair.ShortValue);
                    break;
                case SNAPUNIT:
                    SetPoint(pair, this.SnapSpacing);
                    break;
                case VIEWCTR:
                    SetPoint(pair, this.ViewCenter);
                    break;
                case VIEWDIR:
                    SetPoint(pair, this.ViewDirection);
                    break;
                case VIEWSIZE:
                    EnsureCode(pair, 40);
                    this.ViewHeight = (pair.DoubleValue);
                    break;
                default:
                    // unsupported variable
                    break;
            }
        }

        // OSMODE flags

        /// <summary>
        /// Snap to line segment endpoints.  Maximum AutoCAD version: R14.
        /// </summary>
        public bool EndPointSnap
        {
            get { return DxfHelpers.GetFlag(ObjectSnapFlags, 1); }
            set
            {
                var flags = ObjectSnapFlags;
                DxfHelpers.SetFlag(value, ref flags, 1);
                ObjectSnapFlags = flags;
            }
        }

        /// <summary>
        /// Snap to line segment midpoints.  Maximum AutoCAD version: R14.
        /// </summary>
        public bool MidPointSnap
        {
            get { return DxfHelpers.GetFlag(ObjectSnapFlags, 2); }
            set
            {
                var flags = ObjectSnapFlags;
                DxfHelpers.SetFlag(value, ref flags, 2);
                ObjectSnapFlags = flags;
            }
        }

        /// <summary>
        /// Snap to circle and arc center points.  Maximum AutoCAD version: R14.
        /// </summary>
        public bool CenterSnap
        {
            get { return DxfHelpers.GetFlag(ObjectSnapFlags, 4); }
            set
            {
                var flags = ObjectSnapFlags;
                DxfHelpers.SetFlag(value, ref flags, 4);
                ObjectSnapFlags = flags;
            }
        }

        /// <summary>
        /// Snap to nodes.  Maximum AutoCAD version: R14.
        /// </summary>
        public bool NodeSnap
        {
            get { return DxfHelpers.GetFlag(ObjectSnapFlags, 8); }
            set
            {
                var flags = ObjectSnapFlags;
                DxfHelpers.SetFlag(value, ref flags, 8);
                ObjectSnapFlags = flags;
            }
        }

        /// <summary>
        /// Snap to circle quadrants.  Maximum AutoCAD version: R14.
        /// </summary>
        public bool QuadrantSnap
        {
            get { return DxfHelpers.GetFlag(ObjectSnapFlags, 16); }
            set
            {
                var flags = ObjectSnapFlags;
                DxfHelpers.SetFlag(value, ref flags, 16);
                ObjectSnapFlags = flags;
            }
        }

        /// <summary>
        /// Snap to segment intersections.  Maximum AutoCAD version: R14.
        /// </summary>
        public bool IntersectionSnap
        {
            get { return DxfHelpers.GetFlag(ObjectSnapFlags, 32); }
            set
            {
                var flags = ObjectSnapFlags;
                DxfHelpers.SetFlag(value, ref flags, 32);
                ObjectSnapFlags = flags;
            }
        }

        /// <summary>
        /// Snap to block insertion points.  Maximum AutoCAD version: R14.
        /// </summary>
        public bool InsertionSnap
        {
            get { return DxfHelpers.GetFlag(ObjectSnapFlags, 64); }
            set
            {
                var flags = ObjectSnapFlags;
                DxfHelpers.SetFlag(value, ref flags, 64);
                ObjectSnapFlags = flags;
            }
        }

        /// <summary>
        /// Snap to perpendicular points.  Maximum AutoCAD version: R14.
        /// </summary>
        public bool PerpendicularSnap
        {
            get { return DxfHelpers.GetFlag(ObjectSnapFlags, 128); }
            set
            {
                var flags = ObjectSnapFlags;
                DxfHelpers.SetFlag(value, ref flags, 128);
                ObjectSnapFlags = flags;
            }
        }

        /// <summary>
        /// Snap to tangent points.  Maximum AutoCAD version: R14.
        /// </summary>
        public bool TangentSnap
        {
            get { return DxfHelpers.GetFlag(ObjectSnapFlags, 256); }
            set
            {
                var flags = ObjectSnapFlags;
                DxfHelpers.SetFlag(value, ref flags, 256);
                ObjectSnapFlags = flags;
            }
        }

        /// <summary>
        /// Snap to nearest object points.  Maximum AutoCAD version: R14.
        /// </summary>
        public bool NearestSnap
        {
            get { return DxfHelpers.GetFlag(ObjectSnapFlags, 512); }
            set
            {
                var flags = ObjectSnapFlags;
                DxfHelpers.SetFlag(value, ref flags, 512);
                ObjectSnapFlags = flags;
            }
        }

        /// <summary>
        /// Snap to apparent intersection points.  Maximum AutoCAD version: R14.
        /// </summary>
        public bool ApparentIntersectionSnap
        {
            get { return DxfHelpers.GetFlag(ObjectSnapFlags, 2048); }
            set
            {
                var flags = ObjectSnapFlags;
                DxfHelpers.SetFlag(value, ref flags, 2048);
                ObjectSnapFlags = flags;
            }
        }

        /// <summary>
        /// Snap to extension points.  Maximum AutoCAD version: R14.
        /// </summary>
        public bool ExtensionSnap
        {
            get { return DxfHelpers.GetFlag(ObjectSnapFlags, 4096); }
            set
            {
                var flags = ObjectSnapFlags;
                DxfHelpers.SetFlag(value, ref flags, 4096);
                ObjectSnapFlags = flags;
            }
        }

        /// <summary>
        /// Snap to parallel points.  Maximum AutoCAD version: R14.
        /// </summary>
        public bool ParallelSnap
        {
            get { return DxfHelpers.GetFlag(ObjectSnapFlags, 8192); }
            set
            {
                var flags = ObjectSnapFlags;
                DxfHelpers.SetFlag(value, ref flags, 8192);
                ObjectSnapFlags = flags;
            }
        }

        // SORTENTS flags

        /// <summary>
        /// Sorts for object selection.  Minimum AutoCAD version: R2004.
        /// </summary>
        public bool SortObjectsForObjectSelection
        {
            get { return DxfHelpers.GetFlag(ObjectSortingMethodsFlags, 1); }
            set
            {
                var flags = ObjectSortingMethodsFlags;
                DxfHelpers.SetFlag(value, ref flags, 1);
                ObjectSortingMethodsFlags = flags;
            }
        }

        /// <summary>
        /// Sorts for object snap.  Minimum AutoCAD version: R2004.
        /// </summary>
        public bool SortObjectsForObjectSnap
        {
            get { return DxfHelpers.GetFlag(ObjectSortingMethodsFlags, 2); }
            set
            {
                var flags = ObjectSortingMethodsFlags;
                DxfHelpers.SetFlag(value, ref flags, 2);
                ObjectSortingMethodsFlags = flags;
            }
        }

        /// <summary>
        /// Sorts for redraws.  Minimum AutoCAD version: R2004.
        /// </summary>
        public bool SortObjectsForRedraw
        {
            get { return DxfHelpers.GetFlag(ObjectSortingMethodsFlags, 4); }
            set
            {
                var flags = ObjectSortingMethodsFlags;
                DxfHelpers.SetFlag(value, ref flags, 4);
                ObjectSortingMethodsFlags = flags;
            }
        }

        /// <summary>
        /// Sorts for MSLIDE command slide creation.  Minimum AutoCAD version: R2004.
        /// </summary>
        public bool SortObjectsForMSlide
        {
            get { return DxfHelpers.GetFlag(ObjectSortingMethodsFlags, 8); }
            set
            {
                var flags = ObjectSortingMethodsFlags;
                DxfHelpers.SetFlag(value, ref flags, 8);
                ObjectSortingMethodsFlags = flags;
            }
        }

        /// <summary>
        /// Sorts for REGEN commands.  Minimum AutoCAD version: R2004.
        /// </summary>
        public bool SortObjectsForRegen
        {
            get { return DxfHelpers.GetFlag(ObjectSortingMethodsFlags, 16); }
            set
            {
                var flags = ObjectSortingMethodsFlags;
                DxfHelpers.SetFlag(value, ref flags, 16);
                ObjectSortingMethodsFlags = flags;
            }
        }

        /// <summary>
        /// Sorts for plotting.  Minimum AutoCAD version: R2004.
        /// </summary>
        public bool SortObjectsForPlotting
        {
            get { return DxfHelpers.GetFlag(ObjectSortingMethodsFlags, 32); }
            set
            {
                var flags = ObjectSortingMethodsFlags;
                DxfHelpers.SetFlag(value, ref flags, 32);
                ObjectSortingMethodsFlags = flags;
            }
        }

        /// <summary>
        /// Sorts for PostScript output.  Minimum AutoCAD version: R2004.
        /// </summary>
        public bool SortObjectsForPostScriptOutput
        {
            get { return DxfHelpers.GetFlag(ObjectSortingMethodsFlags, 64); }
            set
            {
                var flags = ObjectSortingMethodsFlags;
                DxfHelpers.SetFlag(value, ref flags, 64);
                ObjectSortingMethodsFlags = flags;
            }
        }

        // LOFTPARAM flags

        /// <summary>
        /// No twist (minimizes the twist between cross sections).  Minimum AutoCAD version: R2007.
        /// </summary>
        public bool NoTwist
        {
            get { return DxfHelpers.GetFlag(LoftFlags, 1); }
            set
            {
                var flags = LoftFlags;
                DxfHelpers.SetFlag(value, ref flags, 1);
                LoftFlags = flags;
            }
        }

        /// <summary>
        /// Align direction (aligns the start to end direction of each cross section curve).  Minimum AutoCAD version: R2007.
        /// </summary>
        public bool AlignDirection
        {
            get { return DxfHelpers.GetFlag(LoftFlags, 2); }
            set
            {
                var flags = LoftFlags;
                DxfHelpers.SetFlag(value, ref flags, 2);
                LoftFlags = flags;
            }
        }

        /// <summary>
        /// Simplify (produces simple solids and surfaces, such as a cylinder or plane, instead of spline solids and surfaces).  Minimum AutoCAD version: R2007.
        /// </summary>
        public bool Simplify
        {
            get { return DxfHelpers.GetFlag(LoftFlags, 4); }
            set
            {
                var flags = LoftFlags;
                DxfHelpers.SetFlag(value, ref flags, 4);
                LoftFlags = flags;
            }
        }

        /// <summary>
        /// Close (closes the surface or solid between the first and the last cross sections).  Minimum AutoCAD version: R2007.
        /// </summary>
        public bool Close
        {
            get { return DxfHelpers.GetFlag(LoftFlags, 8); }
            set
            {
                var flags = LoftFlags;
                DxfHelpers.SetFlag(value, ref flags, 8);
                LoftFlags = flags;
            }
        }

        private object GetValue(string variableName)
        {
            switch (variableName.ToUpper())
            {
                case ACADVER:
                    return this.Version;
                case ACADMAINTVER:
                    return this.MaintenenceVersion;
                case DWGCODEPAGE:
                    return this.DrawingCodePage;
                case LASTSAVEDBY:
                    return this.LastSavedBy;
                case REQUIREDVERSIONS:
                    return this.RequiredVersions;
                case INSBASE:
                    return this.InsertionBase;
                case EXTMIN:
                    return this.MinimumDrawingExtents;
                case EXTMAX:
                    return this.MaximumDrawingExtents;
                case LIMMIN:
                    return this.MinimumDrawingLimits;
                case LIMMAX:
                    return this.MaximumDrawingLimits;
                case ORTHOMODE:
                    return this.DrawOrthoganalLines;
                case REGENMODE:
                    return this.UseRegenMode;
                case FILLMODE:
                    return this.FillModeOn;
                case QTEXTMODE:
                    return this.UseQuickTextMode;
                case MIRRTEXT:
                    return this.MirrorText;
                case DRAGMODE:
                    return this.DragMode;
                case LTSCALE:
                    return this.LineTypeScale;
                case OSMODE:
                    return this.ObjectSnapFlags;
                case ATTMODE:
                    return this.AttributeVisibility;
                case TEXTSIZE:
                    return this.DefaultTextHeight;
                case TRACEWID:
                    return this.TraceWidth;
                case TEXTSTYLE:
                    return this.TextStyle;
                case CLAYER:
                    return this.CurrentLayer;
                case CELTYPE:
                    return this.CurrentEntityLineType;
                case CECOLOR:
                    return this.CurrentEntityColor;
                case CELTSCALE:
                    return this.CurrentEntityLineTypeScale;
                case DELOBJ:
                    return this.RetainDeletedObjects;
                case DISPSILH:
                    return this.DisplaySilhouetteCurvesInWireframeMode;
                case DRAGVS:
                    return this.SolidVisualStylePointer;
                case DIMSCALE:
                    return this.DimensioningScaleFactor;
                case DIMASZ:
                    return this.DimensioningArrowSize;
                case DIMEXO:
                    return this.DimensionExtensionLineOffset;
                case DIMDLI:
                    return this.DimensionLineIncrement;
                case DIMRND:
                    return this.DimensionDistanceRoundingValue;
                case DIMDLE:
                    return this.DimensionLineExtension;
                case DIMEXE:
                    return this.DimensionExtensionLineExtension;
                case DIMTP:
                    return this.DimensionPlusTolerance;
                case DIMTM:
                    return this.DimensionMinusTolerance;
                case DIMTXT:
                    return this.DimensioningTextHeight;
                case DIMCEN:
                    return this.CenterMarkSize;
                case DIMTSZ:
                    return this.DimensioningTickSize;
                case DIMTOL:
                    return this.GenerateDimensionTolerances;
                case DIMLIM:
                    return this.GenerateDimensionLimits;
                case DIMTIH:
                    return this.DimensionTextInsideHorizontal;
                case DIMTOH:
                    return this.DimensionTextOutsideHorizontal;
                case DIMSE1:
                    return this.SuppressFirstDimensionExtensionLine;
                case DIMSE2:
                    return this.SuppressSecondDimensionExtensionLine;
                case DIMTAD:
                    return this.TextAboveDimensionLine;
                case DIMZIN:
                    return this.DimensionUnitZeroSuppression;
                case DIMBLK:
                    return this.ArrowBlockName;
                case DIMASO:
                    return this.CreateAssociativeDimensioning;
                case DIMSHO:
                    return this.RecomputeDimensionsWhileDragging;
                case DIMPOST:
                    return this.DimensioningSuffix;
                case DIMAPOST:
                    return this.AlternateDimensioningSuffix;
                case DIMALT:
                    return this.UseAlternateDimensioning;
                case DIMALTD:
                    return this.AlternateDimensioningDecimalPlaces;
                case DIMALTF:
                    return this.AlternateDimensioningScaleFactor;
                case DIMLFAC:
                    return this.DimensionLinearMeasurementsScaleFactor;
                case DIMTOFL:
                    return this.ForceDimensionLineExtensionsOutsideIfTextIs;
                case DIMTVP:
                    return this.DimensionVerticalTextPosition;
                case DIMTIX:
                    return this.ForceDimensionTextInsideExtensions;
                case DIMSOXD:
                    return this.SuppressOutsideExtensionDimensionLines;
                case DIMSAH:
                    return this.UseSeparateArrowBlocksForDimensions;
                case DIMBLK1:
                    return this.FirstArrowBlockName;
                case DIMBLK2:
                    return this.SecondArrowBlockName;
                case DIMSTYLE:
                    return this.DimensionStyleName;
                case DIMCLRD:
                    return this.DimensionLineColor;
                case DIMCLRE:
                    return this.DimensionExtensionLineColor;
                case DIMCLRT:
                    return this.DimensionTextColor;
                case DIMTFAC:
                    return this.DimensionToleranceDisplayScaleFactor;
                case DIMGAP:
                    return this.DimensionLineGap;
                case DIMJUST:
                    return this.DimensionTextJustification;
                case DIMSD1:
                    return this.SuppressFirstDimensionExtensionLine;
                case DIMSD2:
                    return this.SuppressSecondDimensionExtensionLine;
                case DIMTOLJ:
                    return this.DimensionToleranceVerticalJustification;
                case DIMTZIN:
                    return this.DimensionToleranceZeroSuppression;
                case DIMALTZ:
                    return this.AlternateDimensioningZeroSupression;
                case DIMALTTZ:
                    return this.AlternateDimensioningToleranceZeroSupression;
                case DIMFIT:
                    return this.DimensionTextAndArrowPlacement;
                case DIMUPT:
                    return this.DimensionCursorControlsTextPosition;
                case DIMUNIT:
                    return this.DimensionUnitFormat;
                case DIMDEC:
                    return this.DimensionUnitToleranceDecimalPlaces;
                case DIMTDEC:
                    return this.DimensionToleranceDecimalPlaces;
                case DIMALTU:
                    return this.AlternateDimensioningUnits;
                case DIMALTTD:
                    return this.AlternateDimensioningToleranceDecimalPlaces;
                case DIMTXSTY:
                    return this.DimensionTextStyle;
                case DIMAUNIT:
                    return this.DimensioningAngleFormat;
                case DIMADEC:
                    return this.AngularDimensionPrecision;
                case DIMALTRND:
                    return this.AlternateDimensioningUnitRounding;
                case DIMAZIN:
                    return this.DimensionAngleZeroSuppression;
                case DIMDSEP:
                    return this.DimensionDecimalSeparatorChar;
                case DIMATFIT:
                    return this.DimensionTextAndArrowPlacement;
                case DIMFRAC:
                    return this.DimensionTextHeightScaleFactor;
                case DIMLDRBLK:
                    return this.DimensionLeaderBlockName;
                case DIMLUNIT:
                    return this.DimensionNonAngularUnits;
                case DIMLWD:
                    return this.DimensionLineWeight;
                case DIMLWE:
                    return this.DimensionExtensionLineWeight;
                case DIMTMOVE:
                    return this.DimensionTextMovementRule;
                case DIMFXL:
                    return this.DimensionLineFixedLength;
                case DIMFXLON:
                    return this.DimensionLineFixedLengthOn;
                case DIMJOGANG:
                    return this.DimensionTransverseSegmentAngleInJoggedRadius;
                case DIMTFILL:
                    return this.DimensionTextBackgroundColorMode;
                case DIMTFILLCLR:
                    return this.DxfDimensionTextBackgroundCustomColor;
                case DIMARCSYM:
                    return this.DimensionArcSymbolDisplayMode;
                case DIMLTYPE:
                    return this.DimensionLineType;
                case DIMLTEX1:
                    return this.DimensionFirstExtensionLineType;
                case DIMLTEX2:
                    return this.DimensionSecondExtensionLineType;
                case DIMTXTDIRECTION:
                    return this.DimensionTextDirection;
                case LUNITS:
                    return this.UnitFormat;
                case LUPREC:
                    return this.UnitPrecision;
                case SKETCHINC:
                    return this.SketchRecordIncrement;
                case FILLETRAD:
                    return this.FilletRadius;
                case AUNITS:
                    return this.AngleUnitFormat;
                case AUPREC:
                    return this.AngleUnitPrecision;
                case MENU:
                    return this.FileName;
                case ELEVATION:
                    return this.Elevation;
                case PELEVATION:
                    return this.PaperspaceElevation;
                case THICKNESS:
                    return this.Thickness;
                case LIMCHECK:
                    return this.UseLimitsChecking;
                case BLIPMODE:
                    return this.BlipMode;
                case CHAMFERA:
                    return this.FirstChamferDistance;
                case CHAMFERB:
                    return this.SecondChamferDistance;
                case CHAMFERC:
                    return this.ChamferLength;
                case CHAMFERD:
                    return this.ChamferAngle;
                case SKPOLY:
                    return this.PolylineSketchMode;
                case TDCREATE:
                    return this.CreationDate;
                case TDUCREATE:
                    return this.CreationDateUniversal;
                case TDUPDATE:
                    return this.UpdateDate;
                case TDUUPDATE:
                    return this.UpdateDateUniversal;
                case TDINDWG:
                    return this.TimeInDrawing;
                case TDUSRTIMER:
                    return this.UserElapsedTimer;
                case USRTIMER:
                    return this.UserTimerOn;
                case ANGBASE:
                    return this.AngleZeroDirection;
                case ANGDIR:
                    return this.AngleDirection;
                case PDMODE:
                    return this.PointDisplayMode;
                case PDSIZE:
                    return this.PointDisplaySize;
                case PLINEWID:
                    return this.DefaultPolylineWidth;
                case COORDS:
                    return this.CoordinateDisplay;
                case SPLFRAME:
                    return this.DisplaySplinePolygonControl;
                case SPLINETYPE:
                    return this.PEditSplineCurveType;
                case SPLINESEGS:
                    return this.LineSegmentsPerSplinePatch;
                case ATTDIA:
                    return this.ShowAttributeEntryDialogs;
                case ATTREQ:
                    return this.PromptForAttributeOnInsert;
                case HANDLING:
                    return this.HandlesEnabled;
                case HANDSEED:
                    return this.NextAvailableHandle;
                case SURFTAB1:
                    return this.MeshTabulationsInFirstDirection;
                case SURFTAB2:
                    return this.MeshTabulationsInSecondDirection;
                case SURFTYPE:
                    return this.PEditSmoothSurfaceType;
                case SURFU:
                    return this.PEditSmoothMDensith;
                case SURFV:
                    return this.PEditSmoothNDensith;
                case UCSBASE:
                    return this.UCSDefinitionName;
                case UCSNAME:
                    return this.UCSName;
                case UCSORG:
                    return this.UCSOrigin;
                case UCSXDIR:
                    return this.UCSXAxis;
                case UCSYDIR:
                    return this.UCSYAxis;
                case UCSORTHOREF:
                    return this.OrthoUCSReference;
                case UCSORTHOVIEW:
                    return this.OrthgraphicViewType;
                case UCSORGTOP:
                    return this.UCSOriginTop;
                case UCSORGBOTTOM:
                    return this.UCSOriginBottom;
                case UCSORGLEFT:
                    return this.UCSOriginLeft;
                case UCSORGRIGHT:
                    return this.UCSOriginRight;
                case UCSORGFRONT:
                    return this.UCSOriginFront;
                case UCSORGBACK:
                    return this.UCSOriginBack;
                case PUCSBASE:
                    return this.PaperspaceUCSDefinitionName;
                case PUCSNAME:
                    return this.PaperspaceUCSName;
                case PUCSORG:
                    return this.PaperspaceUCSOrigin;
                case PUCSXDIR:
                    return this.PaperspaceXAxis;
                case PUCSYDIR:
                    return this.PaperspaceYAxis;
                case PUCSORTHOREF:
                    return this.PaperspaceOrthoUCSReference;
                case PUCSORTHOVIEW:
                    return this.PaperspaceOrthographicViewType;
                case PUCSORGTOP:
                    return this.PaperspaceUCSOriginTop;
                case PUCSORGBOTTOM:
                    return this.PaperspaceUCSOriginBottom;
                case PUCSORGLEFT:
                    return this.PaperspaceUCSOriginLeft;
                case PUCSORGRIGHT:
                    return this.PaperspaceUCSOriginRight;
                case PUCSORGFRONT:
                    return this.PaperspaceUCSOriginFront;
                case PUCSORGBACK:
                    return this.PaperspaceUCSOriginBack;
                case USERI1:
                    return this.UserInt1;
                case USERI2:
                    return this.UserInt2;
                case USERI3:
                    return this.UserInt3;
                case USERI4:
                    return this.UserInt4;
                case USERI5:
                    return this.UserInt5;
                case USERR1:
                    return this.UserReal1;
                case USERR2:
                    return this.UserReal2;
                case USERR3:
                    return this.UserReal3;
                case USERR4:
                    return this.UserReal4;
                case USERR5:
                    return this.UserReal5;
                case WORLDVIEW:
                    return this.SetUCSToWCSInDViewOrVPoint;
                case SHADEDGE:
                    return this.EdgeShading;
                case SHADEDIF:
                    return this.PercentAmbientToDiffuse;
                case TILEMODE:
                    return this.PreviousReleaseTileCompatability;
                case MAXACTVP:
                    return this.MaximumActiveViewports;
                case PINSBASE:
                    return this.PaperspaceInsertionBase;
                case PLIMCHECK:
                    return this.LimitCheckingInPaperspace;
                case PEXTMIN:
                    return this.PaperspaceMinimumDrawingExtents;
                case PEXTMAX:
                    return this.PaperspaceMaximumDrawingExtents;
                case PLIMMIN:
                    return this.PaperspaceMinimumDrawingLimits;
                case PLIMMAX:
                    return this.PaperspaceMaximumDrawingLimits;
                case UNITMODE:
                    return this.DisplayFractionsInInput;
                case VISRETAIN:
                    return this.RetainXRefDependentVisibilitySettings;
                case PLINEGEN:
                    return this.IsPolylineContinuousAroundVerticies;
                case PSLTSCALE:
                    return this.ScaleLineTypesInPaperspace;
                case TREEDEPTH:
                    return this.SpacialIndexMaxDepth;
                case PICKSTYLE:
                    return this.PickStyle;
                case CMLSTYLE:
                    return this.CurrentMultilineStyle;
                case CMLJUST:
                    return this.CurrentMultilineJustification;
                case CMLSCALE:
                    return this.CurrentMultilineScale;
                case PROXYGRAPHICS:
                    return this.SaveProxyGraphics;
                case MEASUREMENT:
                    return this.DrawingUnits;
                case CELWEIGHT:
                    return this.NewObjectLineWeight;
                case ENDCAPS:
                    return this.EndCapSetting;
                case JOINSTYLE:
                    return this.LineweightJointSetting;
                case LWDISPLAY:
                    return this.DisplayLinewieghtInModelAndLayoutTab;
                case INSUNITS:
                    return this.DefaultDrawingUnits;
                case HYPERLINKBASE:
                    return this.HyperlinkBase;
                case STYLESHEET:
                    return this.Stylesheet;
                case XEDIT:
                    return this.CanUseInPlaceReferenceEditing;
                case CEPSNID:
                    return this.NewObjectPlotStyleHandle;
                case CEPSNTYPE:
                    return this.NewObjectPlotStyle;
                case PSTYLEMODE:
                    return this.UsesColorDependentPlotStyleTables;
                case FINGERPRINTGUID:
                    return this.FingerprintGuid;
                case VERSIONGUID:
                    return this.VersionGuid;
                case EXTNAMES:
                    return this.UseACad2000SymbolTableNaming;
                case PSVPSCALE:
                    return this.ViewportViewScaleFactor;
                case OLESTARTUP:
                    return this.OleStartup;
                case SORTENTS:
                    return this.ObjectSortingMethodsFlags;
                case INDEXCTL:
                    return this.LayerAndSpatialIndexSaveMode;
                case HIDETEXT:
                    return this.HideTextObjectsWhenProducintHiddenView;
                case XCLIPFRAME:
                    return this.IsXRefClippingBoundaryVisible;
                case HALOGAP:
                    return this.HaloGapPercent;
                case OBSCOLOR:
                    return this.ObscuredLineColor;
                case OBSLTYPE:
                    return this.ObscuredLineTypeStyle;
                case INTERSECTIONDISPLAY:
                    return this.DisplayIntersectionPolylines;
                case INTERSECTIONCOLOR:
                    return this.IntersectionPolylineColor;
                case DIMASSOC:
                    return this.DimensionObjectAssociativity;
                case PROJECTNAME:
                    return this.ProjectName;
                case CAMERADISPLAY:
                    return this.UseCameraDisplay;
                case LENSLENGTH:
                    return this.LensLength;
                case CAMERAHEIGHT:
                    return this.CameraHeight;
                case STEPSPERSEC:
                    return this.StepsPerSecondInWalkOrFlyMode;
                case STEPSIZE:
                    return this.StepSizeInWalkOrFlyMode;
                case _3DDWFPREC:
                    return this.Dwf3DPrecision;
                case PSOLWIDTH:
                    return this.LastPolySolidWidth;
                case PSOLHEIGHT:
                    return this.LastPolySolidHeight;
                case LOFTANG1:
                    return this.LoftOperationFirstDraftAngle;
                case LOFTANG2:
                    return this.LoftOperationSecondDraftAngle;
                case LOFTMAG1:
                    return this.LoftOperationFirstMagnitude;
                case LOFTMAG2:
                    return this.LoftOperationSecondMagnitude;
                case LOFTPARAM:
                    return this.LoftFlags;
                case LOFTNORMALS:
                    return this.LoftedObjectNormalMode;
                case LATITUDE:
                    return this.Latitude;
                case LONGITUDE:
                    return this.Longitude;
                case NORTHDIRECTION:
                    return this.AngleBetweenYAxisAndNorth;
                case TIMEZONE:
                    return this.TimeZone;
                case LIGHTGLYPHDISPLAY:
                    return this.UseLightGlyphDisplay;
                case TILEMODELIGHTSYNCH:
                    return this.UseTileModeLightSync;
                case CMATERIAL:
                    return this.CurrentMaterialHandle;
                case SOLIDHIST:
                    return this.NewSolidsContainHistory;
                case SHOWHIST:
                    return this.SolidHistoryMode;
                case DWFFRAME:
                    return this.DwfUnderlayFrameMode;
                case DGNFRAME:
                    return this.DgnUnderlayFrameMode;
                case REALWORLDSCALE:
                    return this.UseRealWorldScale;
                case INTERFERECOLOR:
                    return this.InterferenceObjectColor;
                case INTERFEREOBJVS:
                    return this.InterferenceObjectVisualStylePointer;
                case INTERFEREVPVS:
                    return this.InterferenceViewPortVisualStylePointer;
                case CSHADOW:
                    return this.ShadowMode;
                case SHADOWPLANELOCATION:
                    return this.ShadowPlaneZOffset;
                case AXISMODE:
                    return this.AxisOn;
                case AXISUNIT:
                    return this.AxisTickSpacing;
                case FASTZOOM:
                    return this.FastZoom;
                case GRIDMODE:
                    return this.GridOn;
                case GRIDUNIT:
                    return this.GridSpacing;
                case SNAPANG:
                    return this.SnapRotationAngle;
                case SNAPBASE:
                    return this.SnapBasePoint;
                case SNAPISOPAIR:
                    return this.SnapIsometricPlane;
                case SNAPMODE:
                    return this.SnapOn;
                case SNAPSTYLE:
                    return this.SnapStyle;
                case SNAPUNIT:
                    return this.SnapSpacing;
                case VIEWCTR:
                    return this.ViewCenter;
                case VIEWDIR:
                    return this.ViewDirection;
                case VIEWSIZE:
                    return this.ViewHeight;
                default:
                    throw new ArgumentException("Unrecognized variable", nameof(variableName));
            }
        }

        private void SetValue(string variableName, object value)
        {
            switch (variableName.ToUpper())
            {
                case ACADVER:
                    this.Version = (DxfAcadVersion)value;
                    break;
                case ACADMAINTVER:
                    this.MaintenenceVersion = (short)value;
                    break;
                case DWGCODEPAGE:
                    this.DrawingCodePage = (string)value;
                    break;
                case LASTSAVEDBY:
                    this.LastSavedBy = (string)value;
                    break;
                case REQUIREDVERSIONS:
                    this.RequiredVersions = (long)value;
                    break;
                case INSBASE:
                    this.InsertionBase = (DxfPoint)value;
                    break;
                case EXTMIN:
                    this.MinimumDrawingExtents = (DxfPoint)value;
                    break;
                case EXTMAX:
                    this.MaximumDrawingExtents = (DxfPoint)value;
                    break;
                case LIMMIN:
                    this.MinimumDrawingLimits = (DxfPoint)value;
                    break;
                case LIMMAX:
                    this.MaximumDrawingLimits = (DxfPoint)value;
                    break;
                case ORTHOMODE:
                    this.DrawOrthoganalLines = (bool)value;
                    break;
                case REGENMODE:
                    this.UseRegenMode = (bool)value;
                    break;
                case FILLMODE:
                    this.FillModeOn = (bool)value;
                    break;
                case QTEXTMODE:
                    this.UseQuickTextMode = (bool)value;
                    break;
                case MIRRTEXT:
                    this.MirrorText = (bool)value;
                    break;
                case DRAGMODE:
                    this.DragMode = (DxfDragMode)value;
                    break;
                case LTSCALE:
                    this.LineTypeScale = (double)value;
                    break;
                case OSMODE:
                    this.ObjectSnapFlags = (int)value;
                    break;
                case ATTMODE:
                    this.AttributeVisibility = (DxfAttributeVisibility)value;
                    break;
                case TEXTSIZE:
                    this.DefaultTextHeight = (double)value;
                    break;
                case TRACEWID:
                    this.TraceWidth = (double)value;
                    break;
                case TEXTSTYLE:
                    this.TextStyle = (string)value;
                    break;
                case CLAYER:
                    this.CurrentLayer = (string)value;
                    break;
                case CELTYPE:
                    this.CurrentEntityLineType = (string)value;
                    break;
                case CECOLOR:
                    this.CurrentEntityColor = (DxfColor)value;
                    break;
                case CELTSCALE:
                    this.CurrentEntityLineTypeScale = (double)value;
                    break;
                case DELOBJ:
                    this.RetainDeletedObjects = (bool)value;
                    break;
                case DISPSILH:
                    this.DisplaySilhouetteCurvesInWireframeMode = (bool)value;
                    break;
                case DRAGVS:
                    this.SolidVisualStylePointer = (uint)value;
                    break;
                case DIMSCALE:
                    this.DimensioningScaleFactor = (double)value;
                    break;
                case DIMASZ:
                    this.DimensioningArrowSize = (double)value;
                    break;
                case DIMEXO:
                    this.DimensionExtensionLineOffset = (double)value;
                    break;
                case DIMDLI:
                    this.DimensionLineIncrement = (double)value;
                    break;
                case DIMRND:
                    this.DimensionDistanceRoundingValue = (double)value;
                    break;
                case DIMDLE:
                    this.DimensionLineExtension = (double)value;
                    break;
                case DIMEXE:
                    this.DimensionExtensionLineExtension = (double)value;
                    break;
                case DIMTP:
                    this.DimensionPlusTolerance = (double)value;
                    break;
                case DIMTM:
                    this.DimensionMinusTolerance = (double)value;
                    break;
                case DIMTXT:
                    this.DimensioningTextHeight = (double)value;
                    break;
                case DIMCEN:
                    this.CenterMarkSize = (double)value;
                    break;
                case DIMTSZ:
                    this.DimensioningTickSize = (double)value;
                    break;
                case DIMTOL:
                    this.GenerateDimensionTolerances = (bool)value;
                    break;
                case DIMLIM:
                    this.GenerateDimensionLimits = (bool)value;
                    break;
                case DIMTIH:
                    this.DimensionTextInsideHorizontal = (bool)value;
                    break;
                case DIMTOH:
                    this.DimensionTextOutsideHorizontal = (bool)value;
                    break;
                case DIMSE1:
                    this.SuppressFirstDimensionExtensionLine = (bool)value;
                    break;
                case DIMSE2:
                    this.SuppressSecondDimensionExtensionLine = (bool)value;
                    break;
                case DIMTAD:
                    this.TextAboveDimensionLine = (bool)value;
                    break;
                case DIMZIN:
                    this.DimensionUnitZeroSuppression = (DxfUnitZeroSuppression)value;
                    break;
                case DIMBLK:
                    this.ArrowBlockName = (string)value;
                    break;
                case DIMASO:
                    this.CreateAssociativeDimensioning = (bool)value;
                    break;
                case DIMSHO:
                    this.RecomputeDimensionsWhileDragging = (bool)value;
                    break;
                case DIMPOST:
                    this.DimensioningSuffix = (string)value;
                    break;
                case DIMAPOST:
                    this.AlternateDimensioningSuffix = (string)value;
                    break;
                case DIMALT:
                    this.UseAlternateDimensioning = (bool)value;
                    break;
                case DIMALTD:
                    this.AlternateDimensioningDecimalPlaces = (short)value;
                    break;
                case DIMALTF:
                    this.AlternateDimensioningScaleFactor = (double)value;
                    break;
                case DIMLFAC:
                    this.DimensionLinearMeasurementsScaleFactor = (double)value;
                    break;
                case DIMTOFL:
                    this.ForceDimensionLineExtensionsOutsideIfTextIs = (bool)value;
                    break;
                case DIMTVP:
                    this.DimensionVerticalTextPosition = (double)value;
                    break;
                case DIMTIX:
                    this.ForceDimensionTextInsideExtensions = (bool)value;
                    break;
                case DIMSOXD:
                    this.SuppressOutsideExtensionDimensionLines = (bool)value;
                    break;
                case DIMSAH:
                    this.UseSeparateArrowBlocksForDimensions = (bool)value;
                    break;
                case DIMBLK1:
                    this.FirstArrowBlockName = (string)value;
                    break;
                case DIMBLK2:
                    this.SecondArrowBlockName = (string)value;
                    break;
                case DIMSTYLE:
                    this.DimensionStyleName = (string)value;
                    break;
                case DIMCLRD:
                    this.DimensionLineColor = (DxfColor)value;
                    break;
                case DIMCLRE:
                    this.DimensionExtensionLineColor = (DxfColor)value;
                    break;
                case DIMCLRT:
                    this.DimensionTextColor = (DxfColor)value;
                    break;
                case DIMTFAC:
                    this.DimensionToleranceDisplayScaleFactor = (double)value;
                    break;
                case DIMGAP:
                    this.DimensionLineGap = (double)value;
                    break;
                case DIMJUST:
                    this.DimensionTextJustification = (DxfDimensionTextJustification)value;
                    break;
                case DIMSD1:
                    this.SuppressFirstDimensionExtensionLine = (bool)value;
                    break;
                case DIMSD2:
                    this.SuppressSecondDimensionExtensionLine = (bool)value;
                    break;
                case DIMTOLJ:
                    this.DimensionToleranceVerticalJustification = (DxfJustification)value;
                    break;
                case DIMTZIN:
                    this.DimensionToleranceZeroSuppression = (DxfUnitZeroSuppression)value;
                    break;
                case DIMALTZ:
                    this.AlternateDimensioningZeroSupression = (DxfUnitZeroSuppression)value;
                    break;
                case DIMALTTZ:
                    this.AlternateDimensioningToleranceZeroSupression = (DxfUnitZeroSuppression)value;
                    break;
                case DIMFIT:
                    this.DimensionTextAndArrowPlacement = (DxfDimensionFit)value;
                    break;
                case DIMUPT:
                    this.DimensionCursorControlsTextPosition = (bool)value;
                    break;
                case DIMUNIT:
                    this.DimensionUnitFormat = (DxfUnitFormat)value;
                    break;
                case DIMDEC:
                    this.DimensionUnitToleranceDecimalPlaces = (short)value;
                    break;
                case DIMTDEC:
                    this.DimensionToleranceDecimalPlaces = (short)value;
                    break;
                case DIMALTU:
                    this.AlternateDimensioningUnits = (DxfUnitFormat)value;
                    break;
                case DIMALTTD:
                    this.AlternateDimensioningToleranceDecimalPlaces = (short)value;
                    break;
                case DIMTXSTY:
                    this.DimensionTextStyle = (string)value;
                    break;
                case DIMAUNIT:
                    this.DimensioningAngleFormat = (DxfAngleFormat)value;
                    break;
                case DIMADEC:
                    this.AngularDimensionPrecision = (short)value;
                    break;
                case DIMALTRND:
                    this.AlternateDimensioningUnitRounding = (double)value;
                    break;
                case DIMAZIN:
                    this.DimensionAngleZeroSuppression = (DxfUnitZeroSuppression)value;
                    break;
                case DIMDSEP:
                    this.DimensionDecimalSeparatorChar = (char)value;
                    break;
                case DIMATFIT:
                    this.DimensionTextAndArrowPlacement = (DxfDimensionFit)value;
                    break;
                case DIMFRAC:
                    this.DimensionTextHeightScaleFactor = (DxfDimensionFractionFormat)value;
                    break;
                case DIMLDRBLK:
                    this.DimensionLeaderBlockName = (string)value;
                    break;
                case DIMLUNIT:
                    this.DimensionNonAngularUnits = (DxfNonAngularUnits)value;
                    break;
                case DIMLWD:
                    this.DimensionLineWeight = (DxfLineWeight)value;
                    break;
                case DIMLWE:
                    this.DimensionExtensionLineWeight = (DxfLineWeight)value;
                    break;
                case DIMTMOVE:
                    this.DimensionTextMovementRule = (DxfDimensionTextMovementRule)value;
                    break;
                case DIMFXL:
                    this.DimensionLineFixedLength = (double)value;
                    break;
                case DIMFXLON:
                    this.DimensionLineFixedLengthOn = (bool)value;
                    break;
                case DIMJOGANG:
                    this.DimensionTransverseSegmentAngleInJoggedRadius = (double)value;
                    break;
                case DIMTFILL:
                    this.DimensionTextBackgroundColorMode = (DxfDimensionTextBackgroundColorMode)value;
                    break;
                case DIMTFILLCLR:
                    this.DxfDimensionTextBackgroundCustomColor = (DxfColor)value;
                    break;
                case DIMARCSYM:
                    this.DimensionArcSymbolDisplayMode = (DxfDimensionArcSymbolDisplayMode)value;
                    break;
                case DIMLTYPE:
                    this.DimensionLineType = (string)value;
                    break;
                case DIMLTEX1:
                    this.DimensionFirstExtensionLineType = (string)value;
                    break;
                case DIMLTEX2:
                    this.DimensionSecondExtensionLineType = (string)value;
                    break;
                case DIMTXTDIRECTION:
                    this.DimensionTextDirection = (DxfTextDirection)value;
                    break;
                case LUNITS:
                    this.UnitFormat = (DxfUnitFormat)value;
                    break;
                case LUPREC:
                    this.UnitPrecision = (short)value;
                    break;
                case SKETCHINC:
                    this.SketchRecordIncrement = (double)value;
                    break;
                case FILLETRAD:
                    this.FilletRadius = (double)value;
                    break;
                case AUNITS:
                    this.AngleUnitFormat = (DxfAngleFormat)value;
                    break;
                case AUPREC:
                    this.AngleUnitPrecision = (short)value;
                    break;
                case MENU:
                    this.FileName = (string)value;
                    break;
                case ELEVATION:
                    this.Elevation = (double)value;
                    break;
                case PELEVATION:
                    this.PaperspaceElevation = (double)value;
                    break;
                case THICKNESS:
                    this.Thickness = (double)value;
                    break;
                case LIMCHECK:
                    this.UseLimitsChecking = (bool)value;
                    break;
                case BLIPMODE:
                    this.BlipMode = (bool)value;
                    break;
                case CHAMFERA:
                    this.FirstChamferDistance = (double)value;
                    break;
                case CHAMFERB:
                    this.SecondChamferDistance = (double)value;
                    break;
                case CHAMFERC:
                    this.ChamferLength = (double)value;
                    break;
                case CHAMFERD:
                    this.ChamferAngle = (double)value;
                    break;
                case SKPOLY:
                    this.PolylineSketchMode = (DxfPolySketchMode)value;
                    break;
                case TDCREATE:
                    this.CreationDate = (DateTime)value;
                    break;
                case TDUCREATE:
                    this.CreationDateUniversal = (DateTime)value;
                    break;
                case TDUPDATE:
                    this.UpdateDate = (DateTime)value;
                    break;
                case TDUUPDATE:
                    this.UpdateDateUniversal = (DateTime)value;
                    break;
                case TDINDWG:
                    this.TimeInDrawing = (TimeSpan)value;
                    break;
                case TDUSRTIMER:
                    this.UserElapsedTimer = (TimeSpan)value;
                    break;
                case USRTIMER:
                    this.UserTimerOn = (bool)value;
                    break;
                case ANGBASE:
                    this.AngleZeroDirection = (double)value;
                    break;
                case ANGDIR:
                    this.AngleDirection = (DxfAngleDirection)value;
                    break;
                case PDMODE:
                    this.PointDisplayMode = (int)value;
                    break;
                case PDSIZE:
                    this.PointDisplaySize = (double)value;
                    break;
                case PLINEWID:
                    this.DefaultPolylineWidth = (double)value;
                    break;
                case COORDS:
                    this.CoordinateDisplay = (DxfCoordinateDisplay)value;
                    break;
                case SPLFRAME:
                    this.DisplaySplinePolygonControl = (bool)value;
                    break;
                case SPLINETYPE:
                    this.PEditSplineCurveType = (DxfPolylineCurvedAndSmoothSurfaceType)value;
                    break;
                case SPLINESEGS:
                    this.LineSegmentsPerSplinePatch = (short)value;
                    break;
                case ATTDIA:
                    this.ShowAttributeEntryDialogs = (bool)value;
                    break;
                case ATTREQ:
                    this.PromptForAttributeOnInsert = (bool)value;
                    break;
                case HANDLING:
                    this.HandlesEnabled = (bool)value;
                    break;
                case HANDSEED:
                    this.NextAvailableHandle = (uint)value;
                    break;
                case SURFTAB1:
                    this.MeshTabulationsInFirstDirection = (short)value;
                    break;
                case SURFTAB2:
                    this.MeshTabulationsInSecondDirection = (short)value;
                    break;
                case SURFTYPE:
                    this.PEditSmoothSurfaceType = (DxfPolylineCurvedAndSmoothSurfaceType)value;
                    break;
                case SURFU:
                    this.PEditSmoothMDensith = (short)value;
                    break;
                case SURFV:
                    this.PEditSmoothNDensith = (short)value;
                    break;
                case UCSBASE:
                    this.UCSDefinitionName = (string)value;
                    break;
                case UCSNAME:
                    this.UCSName = (string)value;
                    break;
                case UCSORG:
                    this.UCSOrigin = (DxfPoint)value;
                    break;
                case UCSXDIR:
                    this.UCSXAxis = (DxfVector)value;
                    break;
                case UCSYDIR:
                    this.UCSYAxis = (DxfVector)value;
                    break;
                case UCSORTHOREF:
                    this.OrthoUCSReference = (string)value;
                    break;
                case UCSORTHOVIEW:
                    this.OrthgraphicViewType = (DxfOrthographicViewType)value;
                    break;
                case UCSORGTOP:
                    this.UCSOriginTop = (DxfPoint)value;
                    break;
                case UCSORGBOTTOM:
                    this.UCSOriginBottom = (DxfPoint)value;
                    break;
                case UCSORGLEFT:
                    this.UCSOriginLeft = (DxfPoint)value;
                    break;
                case UCSORGRIGHT:
                    this.UCSOriginRight = (DxfPoint)value;
                    break;
                case UCSORGFRONT:
                    this.UCSOriginFront = (DxfPoint)value;
                    break;
                case UCSORGBACK:
                    this.UCSOriginBack = (DxfPoint)value;
                    break;
                case PUCSBASE:
                    this.PaperspaceUCSDefinitionName = (string)value;
                    break;
                case PUCSNAME:
                    this.PaperspaceUCSName = (string)value;
                    break;
                case PUCSORG:
                    this.PaperspaceUCSOrigin = (DxfPoint)value;
                    break;
                case PUCSXDIR:
                    this.PaperspaceXAxis = (DxfVector)value;
                    break;
                case PUCSYDIR:
                    this.PaperspaceYAxis = (DxfVector)value;
                    break;
                case PUCSORTHOREF:
                    this.PaperspaceOrthoUCSReference = (string)value;
                    break;
                case PUCSORTHOVIEW:
                    this.PaperspaceOrthographicViewType = (DxfOrthographicViewType)value;
                    break;
                case PUCSORGTOP:
                    this.PaperspaceUCSOriginTop = (DxfPoint)value;
                    break;
                case PUCSORGBOTTOM:
                    this.PaperspaceUCSOriginBottom = (DxfPoint)value;
                    break;
                case PUCSORGLEFT:
                    this.PaperspaceUCSOriginLeft = (DxfPoint)value;
                    break;
                case PUCSORGRIGHT:
                    this.PaperspaceUCSOriginRight = (DxfPoint)value;
                    break;
                case PUCSORGFRONT:
                    this.PaperspaceUCSOriginFront = (DxfPoint)value;
                    break;
                case PUCSORGBACK:
                    this.PaperspaceUCSOriginBack = (DxfPoint)value;
                    break;
                case USERI1:
                    this.UserInt1 = (short)value;
                    break;
                case USERI2:
                    this.UserInt2 = (short)value;
                    break;
                case USERI3:
                    this.UserInt3 = (short)value;
                    break;
                case USERI4:
                    this.UserInt4 = (short)value;
                    break;
                case USERI5:
                    this.UserInt5 = (short)value;
                    break;
                case USERR1:
                    this.UserReal1 = (double)value;
                    break;
                case USERR2:
                    this.UserReal2 = (double)value;
                    break;
                case USERR3:
                    this.UserReal3 = (double)value;
                    break;
                case USERR4:
                    this.UserReal4 = (double)value;
                    break;
                case USERR5:
                    this.UserReal5 = (double)value;
                    break;
                case WORLDVIEW:
                    this.SetUCSToWCSInDViewOrVPoint = (bool)value;
                    break;
                case SHADEDGE:
                    this.EdgeShading = (DxfShadeEdgeMode)value;
                    break;
                case SHADEDIF:
                    this.PercentAmbientToDiffuse = (short)value;
                    break;
                case TILEMODE:
                    this.PreviousReleaseTileCompatability = (bool)value;
                    break;
                case MAXACTVP:
                    this.MaximumActiveViewports = (short)value;
                    break;
                case PINSBASE:
                    this.PaperspaceInsertionBase = (DxfPoint)value;
                    break;
                case PLIMCHECK:
                    this.LimitCheckingInPaperspace = (bool)value;
                    break;
                case PEXTMIN:
                    this.PaperspaceMinimumDrawingExtents = (DxfPoint)value;
                    break;
                case PEXTMAX:
                    this.PaperspaceMaximumDrawingExtents = (DxfPoint)value;
                    break;
                case PLIMMIN:
                    this.PaperspaceMinimumDrawingLimits = (DxfPoint)value;
                    break;
                case PLIMMAX:
                    this.PaperspaceMaximumDrawingLimits = (DxfPoint)value;
                    break;
                case UNITMODE:
                    this.DisplayFractionsInInput = (bool)value;
                    break;
                case VISRETAIN:
                    this.RetainXRefDependentVisibilitySettings = (bool)value;
                    break;
                case PLINEGEN:
                    this.IsPolylineContinuousAroundVerticies = (bool)value;
                    break;
                case PSLTSCALE:
                    this.ScaleLineTypesInPaperspace = (bool)value;
                    break;
                case TREEDEPTH:
                    this.SpacialIndexMaxDepth = (short)value;
                    break;
                case PICKSTYLE:
                    this.PickStyle = (DxfPickStyle)value;
                    break;
                case CMLSTYLE:
                    this.CurrentMultilineStyle = (string)value;
                    break;
                case CMLJUST:
                    this.CurrentMultilineJustification = (DxfJustification)value;
                    break;
                case CMLSCALE:
                    this.CurrentMultilineScale = (double)value;
                    break;
                case PROXYGRAPHICS:
                    this.SaveProxyGraphics = (bool)value;
                    break;
                case MEASUREMENT:
                    this.DrawingUnits = (DxfDrawingUnits)value;
                    break;
                case CELWEIGHT:
                    this.NewObjectLineWeight = (DxfLineWeight)value;
                    break;
                case ENDCAPS:
                    this.EndCapSetting = (DxfEndCapSetting)value;
                    break;
                case JOINSTYLE:
                    this.LineweightJointSetting = (DxfJoinStyle)value;
                    break;
                case LWDISPLAY:
                    this.DisplayLinewieghtInModelAndLayoutTab = (bool)value;
                    break;
                case INSUNITS:
                    this.DefaultDrawingUnits = (DxfUnits)value;
                    break;
                case HYPERLINKBASE:
                    this.HyperlinkBase = (string)value;
                    break;
                case STYLESHEET:
                    this.Stylesheet = (string)value;
                    break;
                case XEDIT:
                    this.CanUseInPlaceReferenceEditing = (bool)value;
                    break;
                case CEPSNID:
                    this.NewObjectPlotStyleHandle = (uint)value;
                    break;
                case CEPSNTYPE:
                    this.NewObjectPlotStyle = (DxfPlotStyle)value;
                    break;
                case PSTYLEMODE:
                    this.UsesColorDependentPlotStyleTables = (bool)value;
                    break;
                case FINGERPRINTGUID:
                    this.FingerprintGuid = (Guid)value;
                    break;
                case VERSIONGUID:
                    this.VersionGuid = (Guid)value;
                    break;
                case EXTNAMES:
                    this.UseACad2000SymbolTableNaming = (bool)value;
                    break;
                case PSVPSCALE:
                    this.ViewportViewScaleFactor = (double)value;
                    break;
                case OLESTARTUP:
                    this.OleStartup = (bool)value;
                    break;
                case SORTENTS:
                    this.ObjectSortingMethodsFlags = (int)value;
                    break;
                case INDEXCTL:
                    this.LayerAndSpatialIndexSaveMode = (DxfLayerAndSpatialIndexSaveMode)value;
                    break;
                case HIDETEXT:
                    this.HideTextObjectsWhenProducintHiddenView = (bool)value;
                    break;
                case XCLIPFRAME:
                    this.IsXRefClippingBoundaryVisible = (DxfXrefClippingBoundaryVisibility)value;
                    break;
                case HALOGAP:
                    this.HaloGapPercent = (double)value;
                    break;
                case OBSCOLOR:
                    this.ObscuredLineColor = (DxfColor)value;
                    break;
                case OBSLTYPE:
                    this.ObscuredLineTypeStyle = (DxfLineTypeStyle)value;
                    break;
                case INTERSECTIONDISPLAY:
                    this.DisplayIntersectionPolylines = (bool)value;
                    break;
                case INTERSECTIONCOLOR:
                    this.IntersectionPolylineColor = (DxfColor)value;
                    break;
                case DIMASSOC:
                    this.DimensionObjectAssociativity = (DxfDimensionAssociativity)value;
                    break;
                case PROJECTNAME:
                    this.ProjectName = (string)value;
                    break;
                case CAMERADISPLAY:
                    this.UseCameraDisplay = (bool)value;
                    break;
                case LENSLENGTH:
                    this.LensLength = (double)value;
                    break;
                case CAMERAHEIGHT:
                    this.CameraHeight = (double)value;
                    break;
                case STEPSPERSEC:
                    this.StepsPerSecondInWalkOrFlyMode = (double)value;
                    break;
                case STEPSIZE:
                    this.StepSizeInWalkOrFlyMode = (double)value;
                    break;
                case _3DDWFPREC:
                    this.Dwf3DPrecision = (Dxf3DDwfPrecision)value;
                    break;
                case PSOLWIDTH:
                    this.LastPolySolidWidth = (double)value;
                    break;
                case PSOLHEIGHT:
                    this.LastPolySolidHeight = (double)value;
                    break;
                case LOFTANG1:
                    this.LoftOperationFirstDraftAngle = (double)value;
                    break;
                case LOFTANG2:
                    this.LoftOperationSecondDraftAngle = (double)value;
                    break;
                case LOFTMAG1:
                    this.LoftOperationFirstMagnitude = (double)value;
                    break;
                case LOFTMAG2:
                    this.LoftOperationSecondMagnitude = (double)value;
                    break;
                case LOFTPARAM:
                    this.LoftFlags = (int)value;
                    break;
                case LOFTNORMALS:
                    this.LoftedObjectNormalMode = (DxfLoftedObjectNormalMode)value;
                    break;
                case LATITUDE:
                    this.Latitude = (double)value;
                    break;
                case LONGITUDE:
                    this.Longitude = (double)value;
                    break;
                case NORTHDIRECTION:
                    this.AngleBetweenYAxisAndNorth = (double)value;
                    break;
                case TIMEZONE:
                    this.TimeZone = (DxfTimeZone)value;
                    break;
                case LIGHTGLYPHDISPLAY:
                    this.UseLightGlyphDisplay = (bool)value;
                    break;
                case TILEMODELIGHTSYNCH:
                    this.UseTileModeLightSync = (bool)value;
                    break;
                case CMATERIAL:
                    this.CurrentMaterialHandle = (uint)value;
                    break;
                case SOLIDHIST:
                    this.NewSolidsContainHistory = (bool)value;
                    break;
                case SHOWHIST:
                    this.SolidHistoryMode = (DxfSolidHistoryMode)value;
                    break;
                case DWFFRAME:
                    this.DwfUnderlayFrameMode = (DxfUnderlayFrameMode)value;
                    break;
                case DGNFRAME:
                    this.DgnUnderlayFrameMode = (DxfUnderlayFrameMode)value;
                    break;
                case REALWORLDSCALE:
                    this.UseRealWorldScale = (bool)value;
                    break;
                case INTERFERECOLOR:
                    this.InterferenceObjectColor = (DxfColor)value;
                    break;
                case INTERFEREOBJVS:
                    this.InterferenceObjectVisualStylePointer = (uint)value;
                    break;
                case INTERFEREVPVS:
                    this.InterferenceViewPortVisualStylePointer = (uint)value;
                    break;
                case CSHADOW:
                    this.ShadowMode = (DxfShadowMode)value;
                    break;
                case SHADOWPLANELOCATION:
                    this.ShadowPlaneZOffset = (double)value;
                    break;
                case AXISMODE:
                    this.AxisOn = (bool)value;
                    break;
                case AXISUNIT:
                    this.AxisTickSpacing = (DxfVector)value;
                    break;
                case FASTZOOM:
                    this.FastZoom = (bool)value;
                    break;
                case GRIDMODE:
                    this.GridOn = (bool)value;
                    break;
                case GRIDUNIT:
                    this.GridSpacing = (DxfVector)value;
                    break;
                case SNAPANG:
                    this.SnapRotationAngle = (double)value;
                    break;
                case SNAPBASE:
                    this.SnapBasePoint = (DxfPoint)value;
                    break;
                case SNAPISOPAIR:
                    this.SnapIsometricPlane = (DxfSnapIsometricPlane)value;
                    break;
                case SNAPMODE:
                    this.SnapOn = (bool)value;
                    break;
                case SNAPSTYLE:
                    this.SnapStyle = (DxfSnapStyle)value;
                    break;
                case SNAPUNIT:
                    this.SnapSpacing = (DxfVector)value;
                    break;
                case VIEWCTR:
                    this.ViewCenter = (DxfPoint)value;
                    break;
                case VIEWDIR:
                    this.ViewDirection = (DxfVector)value;
                    break;
                case VIEWSIZE:
                    this.ViewHeight = (double)value;
                    break;
                default:
                    throw new ArgumentException("Unrecognized variable", nameof(variableName));
            }
        }
    }
}
