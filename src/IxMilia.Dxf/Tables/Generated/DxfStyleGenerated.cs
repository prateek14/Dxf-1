// Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System.Linq;
using System.Collections.Generic;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Sections;
using IxMilia.Dxf.Tables;

namespace IxMilia.Dxf
{
    public partial class DxfStyle : DxfSymbolTableFlags
    {
        internal const string AcDbText = "AcDbTextStyleTableRecord";

        protected override DxfTableType TableType { get { return DxfTableType.Style; } }

        public double TextHeight { get; set; }
        public double WidthFactor { get; set; }
        public double ObliqueAngle { get; set; }
        public int TextGenerationFlags { get; set; }
        public double LastHeightUsed { get; set; }
        public string PrimaryFontFileName { get; set; }
        public string BigFontFileName { get; set; }
        public int FontFlags { get; set; }

        public DxfXData XData { get; set; }

        public DxfStyle()
            : base()
        {
            TextHeight = 0.0;
            WidthFactor = 1.0;
            ObliqueAngle = 0.0;
            TextGenerationFlags = 0;
            LastHeightUsed = 0.2;
            PrimaryFontFileName = "txt";
            BigFontFileName = null;
            FontFlags = 0;
        }

        internal override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            if (version >= DxfAcadVersion.R13)
            {
                pairs.Add(new DxfCodePair(100, AcDbText));
            }

            pairs.Add(new DxfCodePair(2, Name));
            pairs.Add(new DxfCodePair(70, (short)StandardFlags));
            pairs.Add(new DxfCodePair(40, (TextHeight)));
            pairs.Add(new DxfCodePair(41, (WidthFactor)));
            pairs.Add(new DxfCodePair(50, (ObliqueAngle)));
            pairs.Add(new DxfCodePair(71, (short)(TextGenerationFlags)));
            pairs.Add(new DxfCodePair(42, (LastHeightUsed)));
            pairs.Add(new DxfCodePair(3, (PrimaryFontFileName)));
            pairs.Add(new DxfCodePair(4, (BigFontFileName)));
            if (version >= DxfAcadVersion.R2010)
            {
                pairs.Add(new DxfCodePair(1071, (FontFlags)));
            }

            if (XData != null)
            {
                XData.AddValuePairs(pairs, version, outputHandles);
            }
        }

        internal static DxfStyle FromBuffer(DxfCodePairBufferReader buffer)
        {
            var item = new DxfStyle();
            while (buffer.ItemsRemain)
            {
                var pair = buffer.Peek();
                if (pair.Code == 0)
                {
                    break;
                }

                buffer.Advance();
                switch (pair.Code)
                {
                    case 70:
                        item.StandardFlags = (int)pair.ShortValue;
                        break;
                    case DxfCodePairGroup.GroupCodeNumber:
                        var groupName = DxfCodePairGroup.GetGroupName(pair.StringValue);
                        item.ExtensionDataGroups.Add(DxfCodePairGroup.FromBuffer(buffer, groupName));
                        break;
                    case 40:
                        item.TextHeight = (pair.DoubleValue);
                        break;
                    case 41:
                        item.WidthFactor = (pair.DoubleValue);
                        break;
                    case 50:
                        item.ObliqueAngle = (pair.DoubleValue);
                        break;
                    case 71:
                        item.TextGenerationFlags = (int)(pair.ShortValue);
                        break;
                    case 42:
                        item.LastHeightUsed = (pair.DoubleValue);
                        break;
                    case 3:
                        item.PrimaryFontFileName = (pair.StringValue);
                        break;
                    case 4:
                        item.BigFontFileName = (pair.StringValue);
                        break;
                    case 1071:
                        item.FontFlags = (pair.IntegerValue);
                        break;
                    case (int)DxfXDataType.ApplicationName:
                        item.XData = DxfXData.FromBuffer(buffer, pair.StringValue);
                        break;
                    default:
                        item.TrySetPair(pair);
                        break;
                }
            }

            return item;
        }
    }
}
