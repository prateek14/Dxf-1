// Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Entities;

namespace IxMilia.Dxf.Objects
{
    /// <summary>
    /// DxfSpatialFilter class
    /// </summary>
    public partial class DxfSpatialFilter : DxfObject
    {
        public override DxfObjectType ObjectType { get { return DxfObjectType.SpatialFilter; } }
        protected override DxfAcadVersion MinVersion { get { return DxfAcadVersion.R14; } }
        public IList<DxfPoint> ClipBoundaryDefinitionPoints { get; private set; }
        public DxfVector ClipBoundaryNormal { get; set; }
        public DxfPoint ClipBoundaryOrigin { get; set; }
        public bool IsClipBoundaryEnabled { get; set; }
        public bool IsFrontClippingPlane { get; set; }
        public double FrontClippingPlaneDistance { get; set; }
        public bool IsBackClippingPlane { get; set; }
        public double BackClippingPlaneDistance { get; set; }
        public DxfTransformationMatrix InverseTransformationMatrix { get; set; }
        public DxfTransformationMatrix TransformationMatrix { get; set; }

        public DxfSpatialFilter()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.ClipBoundaryDefinitionPoints = new ListNonNull<DxfPoint>();
            this.ClipBoundaryNormal = DxfVector.ZAxis;
            this.ClipBoundaryOrigin = DxfPoint.Origin;
            this.IsClipBoundaryEnabled = false;
            this.IsFrontClippingPlane = true;
            this.FrontClippingPlaneDistance = 0;
            this.IsBackClippingPlane = false;
            this.BackClippingPlaneDistance = 0;
            this.InverseTransformationMatrix = DxfTransformationMatrix.Identity;
            this.TransformationMatrix = DxfTransformationMatrix.Identity;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            base.AddValuePairs(pairs, version, outputHandles);
            pairs.Add(new DxfCodePair(100, "AcDbFilter"));
            pairs.Add(new DxfCodePair(100, "AcDbSpatialFilter"));
            pairs.Add(new DxfCodePair(70, (short)ClipBoundaryDefinitionPoints.Count));
            foreach (var item in ClipBoundaryDefinitionPoints)
            {
                pairs.Add(new DxfCodePair(10, item.X));
                pairs.Add(new DxfCodePair(20, item.Y));
                pairs.Add(new DxfCodePair(30, item.Z));
            }

            pairs.Add(new DxfCodePair(210, ClipBoundaryNormal?.X ?? default(double)));
            pairs.Add(new DxfCodePair(220, ClipBoundaryNormal?.Y ?? default(double)));
            pairs.Add(new DxfCodePair(230, ClipBoundaryNormal?.Z ?? default(double)));
            pairs.Add(new DxfCodePair(11, ClipBoundaryOrigin?.X ?? default(double)));
            pairs.Add(new DxfCodePair(21, ClipBoundaryOrigin?.Y ?? default(double)));
            pairs.Add(new DxfCodePair(31, ClipBoundaryOrigin?.Z ?? default(double)));
            pairs.Add(new DxfCodePair(71, BoolShort(this.IsClipBoundaryEnabled)));
            pairs.Add(new DxfCodePair(72, BoolShort(this.IsFrontClippingPlane)));
            if (IsFrontClippingPlane)
            {
                pairs.Add(new DxfCodePair(40, (this.FrontClippingPlaneDistance)));
            }

            pairs.Add(new DxfCodePair(73, BoolShort(this.IsBackClippingPlane)));
            if (IsBackClippingPlane)
            {
                pairs.Add(new DxfCodePair(41, (this.BackClippingPlaneDistance)));
            }

            foreach (var item in InverseTransformationMatrix?.Get4x3ValuesRowMajor() ?? new double[12])
            {
                pairs.Add(new DxfCodePair(40, item));
            }

            foreach (var item in TransformationMatrix?.Get4x3ValuesRowMajor() ?? new double[12])
            {
                pairs.Add(new DxfCodePair(40, item));
            }

        }
    }
}
