// Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Entities;

namespace IxMilia.Dxf.Objects
{
    /// <summary>
    /// DxfNavisWorksModelDefinition class
    /// </summary>
    public partial class DxfNavisWorksModelDefinition : DxfObject
    {
        public override DxfObjectType ObjectType { get { return DxfObjectType.NavisWorksModelDefinition; } }
        protected override DxfAcadVersion MinVersion { get { return DxfAcadVersion.R2018; } }
        public string ModelPath { get; set; }
        public bool IsModelLoadedOnDrawingOpen { get; set; }
        public DxfPoint MinimumExtent { get; set; }
        public DxfPoint MaximumExtent { get; set; }
        public bool IsHostGeometryDrawn { get; set; }

        public DxfNavisWorksModelDefinition()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
            this.ModelPath = null;
            this.IsModelLoadedOnDrawingOpen = false;
            this.MinimumExtent = DxfPoint.Origin;
            this.MaximumExtent = DxfPoint.Origin;
            this.IsHostGeometryDrawn = false;
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            base.AddValuePairs(pairs, version, outputHandles);
            pairs.Add(new DxfCodePair(100, "AcDbNavisworksModelDef"));
            pairs.Add(new DxfCodePair(1, (this.ModelPath)));
            pairs.Add(new DxfCodePair(290, (this.IsModelLoadedOnDrawingOpen)));
            pairs.Add(new DxfCodePair(10, MinimumExtent?.X ?? default(double)));
            pairs.Add(new DxfCodePair(20, MinimumExtent?.Y ?? default(double)));
            pairs.Add(new DxfCodePair(30, MinimumExtent?.Z ?? default(double)));
            pairs.Add(new DxfCodePair(11, MaximumExtent?.X ?? default(double)));
            pairs.Add(new DxfCodePair(21, MaximumExtent?.Y ?? default(double)));
            pairs.Add(new DxfCodePair(31, MaximumExtent?.Z ?? default(double)));
            pairs.Add(new DxfCodePair(290, (this.IsHostGeometryDrawn)));
        }

        // This object has vales that share codes between properties and these counters are used to know which property to
        // assign to in TrySetPair() below.
        private int _code_290_index = 0; // shared by properties IsModelLoadedOnDrawingOpen, IsHostGeometryDrawn

        internal override bool TrySetPair(DxfCodePair pair)
        {
            switch (pair.Code)
            {
                case 1:
                    this.ModelPath = (pair.StringValue);
                    break;
                case 10:
                    this.MinimumExtent.X = pair.DoubleValue;
                    break;
                case 20:
                    this.MinimumExtent.Y = pair.DoubleValue;
                    break;
                case 30:
                    this.MinimumExtent.Z = pair.DoubleValue;
                    break;
                case 11:
                    this.MaximumExtent.X = pair.DoubleValue;
                    break;
                case 21:
                    this.MaximumExtent.Y = pair.DoubleValue;
                    break;
                case 31:
                    this.MaximumExtent.Z = pair.DoubleValue;
                    break;
                case 290:
                    switch (_code_290_index)
                    {
                        case 0:
                            this.IsModelLoadedOnDrawingOpen = (pair.BoolValue);
                            _code_290_index++;
                            break;
                        case 1:
                            this.IsHostGeometryDrawn = (pair.BoolValue);
                            _code_290_index++;
                            break;
                        default:
                            Debug.Assert(false, "Unexpected extra values for code 290");
                            break;
                    }
                    break;
                default:
                    return base.TrySetPair(pair);
            }

            return true;
        }
    }
}
