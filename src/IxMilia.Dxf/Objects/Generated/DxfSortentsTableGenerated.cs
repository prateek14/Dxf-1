// Copyright (c) IxMilia.  All Rights Reserved.  Licensed under the Apache License, Version 2.0.  See License.txt in the project root for license information.

// The contents of this file are automatically generated by a tool, and should not be directly modified.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using IxMilia.Dxf.Collections;
using IxMilia.Dxf.Entities;

namespace IxMilia.Dxf.Objects
{
    /// <summary>
    /// DxfSortentsTable class
    /// </summary>
    public partial class DxfSortentsTable : DxfObject, IDxfItemInternal
    {
        public override DxfObjectType ObjectType { get { return DxfObjectType.SortentsTable; } }
        protected override DxfAcadVersion MinVersion { get { return DxfAcadVersion.R14; } }

        IEnumerable<DxfPointer> IDxfItemInternal.GetPointers()
        {
            foreach (var pointer in EntitiesPointers.Pointers)
            {
                yield return pointer;
            }
            foreach (var pointer in SortItemsPointers.Pointers)
            {
                yield return pointer;
            }
        }

        IEnumerable<IDxfItemInternal> IDxfItemInternal.GetChildItems()
        {
            return ((IDxfItemInternal)this).GetPointers().Select(p => (IDxfItemInternal)p.Item);
        }

        internal DxfPointerList<DxfEntity> EntitiesPointers { get; } = new DxfPointerList<DxfEntity>();
        internal DxfPointerList<IDxfItem> SortItemsPointers { get; } = new DxfPointerList<IDxfItem>();
        public IList<DxfEntity> Entities { get { return EntitiesPointers; } }
        public IList<IDxfItem> SortItems { get { return SortItemsPointers; } }

        public DxfSortentsTable()
            : base()
        {
        }

        protected override void Initialize()
        {
            base.Initialize();
        }

        protected override void AddValuePairs(List<DxfCodePair> pairs, DxfAcadVersion version, bool outputHandles)
        {
            base.AddValuePairs(pairs, version, outputHandles);
            pairs.Add(new DxfCodePair(100, "AcDbSortentsTable"));
            pairs.AddRange(this.EntitiesPointers.Pointers.Where(p => p.Handle != 0u).Select(p => new DxfCodePair(331, DxfCommonConverters.UIntHandle(p.Handle))));
            pairs.AddRange(this.SortItemsPointers.Pointers.Where(p => p.Handle != 0u).Select(p => new DxfCodePair(5, DxfCommonConverters.UIntHandle(p.Handle))));
        }
    }
}
